@use 'sass:map';
@use 'sass:meta';
@use 'sass:list';
@use '../../base' as *;
@use 'igniteui-theming/sass/animations' as *;
@use '../../themes/schemas' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Color} $track-color [null] - The main track color.
/// @param {Color} $fill-color-default [null] - The track default fill color.
/// @param {Color} $fill-color-danger [null] - The track danger fill color.
/// @param {Color} $fill-color-warning [null] - The track warning fill color.
/// @param {Color} $fill-color-info [null] - The track info fill color.
/// @param {Color} $fill-color-success [null] - The track success fill color.
/// @param {Color} $stripes-color [null] - The track stripes color.
/// @param {Color} $text-color [null] - The track value text color.
/// @param {List} $track-border-radius [null] - The border radius fraction, between 0 - 8 to be used fot the progress bar track
/// @requires $light-material-schema
/// @example scss Change the stripes color
///   $my-progress-linear-theme: progress-linear-theme(
///     $stripes-color: orange
///   );
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-progress-linear-theme);
@function progress-linear-theme(
    $schema: $light-material-schema,

    $track-color: null,
    $fill-color-default: null,
    $fill-color-danger: null,
    $fill-color-warning: null,
    $fill-color-info: null,
    $fill-color-success: null,
    $stripes-color: null,
    $text-color: null,
    $track-border-radius: null,
) {
    $name: 'igx-linear-bar';
    $linear-bar-schema: ();

    @if map.has-key($schema, 'linear-bar') {
        $linear-bar-schema: map.get($schema, 'linear-bar');
    } @else {
        $linear-bar-schema: $schema;
    }

    $theme: digest-schema($linear-bar-schema);
    $meta: map.get($theme, '_meta');

    @if not($track-border-radius) {
        $track-border-radius: map.get($theme, 'track-border-radius');
    }

    @return extend($theme, (
        name: $name,
        track-color: $track-color,
        fill-color-default: $fill-color-default,
        fill-color-danger: $fill-color-danger,
        fill-color-warning: $fill-color-warning,
        fill-color-info: $fill-color-info,
        fill-color-success: $fill-color-success,
        stripes-color: $stripes-color,
        text-color: $text-color,
        track-border-radius: $track-border-radius,
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme')
        )),
    ));
}

@mixin striped-gradient($gradient-orientation, $stripe-color) {
    background-image: linear-gradient(
        $gradient-orientation,
        $stripe-color 25%,
        transparent 25%,
        transparent 50%,
        $stripe-color 50%,
        $stripe-color 75%,
        transparent 75%,
        transparent
    );
}

@mixin striped-gradient--indigo($gradient-orientation, $stripe-color) {
    background-image: linear-gradient(
        $gradient-orientation,
        transparent 25%,
        $stripe-color 25%,
        $stripe-color 75%,
        transparent 75%,
    );
}

/// @param {Map} $theme - The theme used to style the component.
@mixin progress-linear($theme) {
    @include css-vars($theme);

    $variant: map.get($theme, '_meta', 'variant');

    $bar-height: map.get((
        material: rem(4px),
        fluent: rem(4px),
        bootstrap: rem(16px),
        indigo-design: rem(4px),
    ), $variant);

    $gradient-orientation: map.get((
        material: -45deg,
        fluent: -45deg,
        bootstrap: 45deg,
        indigo-design: 45deg,
    ), $variant);

    $gradient-orientation-rtl: map.get((
        material: 45deg,
        fluent: 45deg,
        bootstrap: -45deg,
        indigo-design: -45deg,
    ), $variant);

    $background-size: map.get((
        material: rem(40px) rem(40px),
        fluent: rem(40px) rem(40px),
        bootstrap: rem(16px) rem(16px),
        indigo-design: rem(20px),
    ), $variant);

    $stripe-color: var-get($theme, 'stripes-color');
    $value-fs: rem(14px, 16px);
    $value-fw: 600;
    $value-margin: 0;

    %linear-display {
        position: relative;
        display: flex;
        width: 100%;
        flex: 1 1 100%;
        flex-direction: column;

        &[dir='rtl'],
        [dir='rtl'] & {
            %linear-bar {
                transform: rotateY(180deg);
            }
        }
    }

    %linear-bar {
        position: relative;
        width: inherit;
        height: $bar-height;
        background: var-get($theme, 'track-color');
        overflow: hidden;
        border-radius: var-get($theme, 'track-border-radius');
        z-index: 0;
    }

    %linear-indicator {
        width: 100%;
        position: absolute;
        height: 100%;
    }

    %linear-indicator--striped {
        @if $variant != 'indigo-design' {
            @include striped-gradient($gradient-orientation, $stripe-color);
        } @else {
            @include striped-gradient--indigo($gradient-orientation, $stripe-color);
        }

        background-size: $background-size;

        [dir='rtl'] & {
            @if $variant != 'indigo-design' {
                @include striped-gradient($gradient-orientation-rtl, $stripe-color);
            } @else {
                @include striped-gradient--indigo($gradient-orientation-rtl, $stripe-color);
            }
        }
    }

    %linear-indicator--indeterminate-secondary,
    %linear-indicator--indeterminate-primary
    {
        transform-origin: top left;
        width: 100% !important;
        height: inherit;
        position: absolute;
        background: transparent;

        &::after {
            content: '';
            position: absolute;
            top: 0;
            inset-inline-start: 0;
            width: inherit;
            height: inherit;
            background: var-get($theme, 'fill-color-default');
            backface-visibility: hidden;
        }
    }

    %linear-indicator--indeterminate-primary {
        transform: scale3d(0, 1, 1);
        animation: indeterminate-primary 2000ms infinite linear;
        left: -145.166611%;

        &::after {
            animation: indeterminate-primary-scale 2000ms infinite linear;
        }
    }

    %linear-indicator--indeterminate-secondary {
        animation: indeterminate-secondary 2000ms infinite linear;
        left: -54.888891%;

        &::after {
            animation: indeterminate-secondary-scale 2000ms infinite linear;
            width: 100%;
            height: inherit;
        }
    }

    %linear-indicator--default {
        background: var-get($theme, 'fill-color-default')
    }

    %linear-indicator--danger {
        background-color: var-get($theme, 'fill-color-danger');
    }

    %linear-indicator--warning {
        background-color: var-get($theme, 'fill-color-warning');
    }

    %linear-indicator--info {
        background-color: var-get($theme, 'fill-color-info');
    }

    %linear-indicator--success {
        background-color: var-get($theme, 'fill-color-success');
    }

    %linear-value {
        margin: $value-margin;
        color: var-get($theme, 'text-color');
        font-size: $value-fs;
        font-weight: $value-fw;
    }

    %linear-value--start {
        align-self: flex-start;
    }

    %linear-value--center {
        align-self: center;
    }

    %linear-value--end {
        align-self: flex-end;
    }

    %linear-value--top {
        order: -1;
    }

    %linear-value--hidden {
        display: none;
    }

    $indeterminate-primary-translate-step-2: cubic-bezier(.5, 0, .701732, .495819);
    $indeterminate-primary-translate-step-3: cubic-bezier(.302435, .381352, .55, .956352);

    $indeterminate-primary-scale-step-2: cubic-bezier(.334731, .12482, .785844, 1);
    $indeterminate-primary-scale-step-3: cubic-bezier(.06, .11, .6, 1);

    $indeterminate-secondary-translate-step-1: cubic-bezier(.15, 0, .515058, .409685);
    $indeterminate-secondary-translate-step-2: cubic-bezier(.31033, .284058, .8, .733712);
    $indeterminate-secondary-translate-step-3: cubic-bezier(.4, .627035, .6, .902026);

    $indeterminate-secondary-scale-step-1: cubic-bezier(.15, 0, .515058, .409685);
    $indeterminate-secondary-scale-step-2: cubic-bezier(.31033, .284058, .8, .733712);
    $indeterminate-secondary-scale-step-3: cubic-bezier(.4, .627035, .6, .902026);

    @keyframes indeterminate-primary {
        0% {
            transform: translateX(0);
        }

        20% {
            animation-timing-function: $indeterminate-primary-translate-step-2;
            transform: translateX(0);
        }

        59.15% {
            animation-timing-function: $indeterminate-primary-translate-step-3;
            transform: translateX(83.67142%);
        }

        100% {
            transform: translateX(200.611057%);
        }
    }

    @keyframes indeterminate-primary-scale {
        0% {
            transform: scaleX(.08);
        }

        36.65% {
            animation-timing-function: $indeterminate-primary-scale-step-2;
            transform: scaleX(.08);
        }

        69.15% {
            animation-timing-function: $indeterminate-primary-scale-step-2;
            transform: scaleX(.661479);
        }

        100% {
            transform: scaleX(.08);
        }
    }

    @keyframes indeterminate-secondary {
        0% {
            animation-timing-function: $indeterminate-secondary-translate-step-1;
            transform: translateX(0);
        }

        25% {
            animation-timing-function: $indeterminate-secondary-translate-step-2;

            transform: translateX(37.651913%);
        }

        48.35% {
            animation-timing-function: $indeterminate-secondary-translate-step-3;
            transform: translateX(84.386165%);
        }

        100% {
            transform: translateX(160.277782%);
        }
    }

    @keyframes indeterminate-secondary-scale {
        0% {
            animation-timing-function: $indeterminate-secondary-scale-step-1;
            transform: scaleX(.08);
        }

        19.15% {
            animation-timing-function: $indeterminate-secondary-scale-step-2;
            transform: scaleX(.457104);
        }

        44.15% {
            animation-timing-function: $indeterminate-secondary-scale-step-3;
            transform: scaleX(.72796);
        }

        100% {
            transform: scaleX(.08);
        }
    }
}

/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $base-circle-color [null] - The base circle fill color.
/// @param {Color | List<Color>} $progress-circle-color [null] - The progress circle fill color.
/// @param {Color} $text-color [null] - The value text color.
///
/// @requires $light-material-schema
///
/// @example scss Change the circle progress color
///   $my-progress-circular-theme: igx-progress-circular-theme(
///     $progress-circle-color: purple
///   );
///   // Pass the theme to the igx-progress-circular component mixin
///   @include igx-progress-circular($my-progress-circle-theme);
@function progress-circular-theme(
    $schema: $light-material-schema,

    $base-circle-color: null,
    $progress-circle-color: null,

    $text-color: null
) {
    $name: 'igx-circular-bar';
    $circular-bar-schema: ();

    @if map.has-key($schema, 'circular-bar') {
        $circular-bar-schema: map.get($schema, 'circular-bar');
    } @else {
        $circular-bar-schema: $schema;
    }

    $theme: digest-schema($circular-bar-schema);
    $meta: map.get($theme, '_meta');

    $progress-circle-color-start: map.get($theme, 'progress-circle-color');
    $progress-circle-color-end: map.get($theme, 'progress-circle-color');

    @if meta.type-of($progress-circle-color) == 'color' {
        $progress-circle-color-start: $progress-circle-color;
        $progress-circle-color-end: $progress-circle-color;
    }

    @if list.length($progress-circle-color) == 2 {
        $progress-circle-color-start: list.nth($progress-circle-color, 1);
        $progress-circle-color-end: list.nth($progress-circle-color, 2);
    }

    @return extend($theme, (
        name: $name,
        base-circle-color: $base-circle-color,
        progress-circle-color-start: $progress-circle-color-start,
        progress-circle-color-end: $progress-circle-color-end,
        text-color: $text-color,
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme')
        )),
    ));
}

/// @param {Map} $theme - The theme used to style the component.
@mixin progress-circular($theme) {
    // Include rotate animation
    @include rotate-center();

    @include css-vars($theme);

    $variant: map.get($theme, '_meta', 'variant');

    $stroke-width: map.get((
        material: rem(4px),
        fluent: rem(4px),
        bootstrap: rem(8px),
        indigo-design: rem(6px),
    ), $variant);

    %circular-display {
        display: inline-flex;
        flex: 1 1 auto;
        width: rem(32px);
        height: rem(32px);
        position: relative;

        svg {
            width: 100%;
            height: 100%;
            min-width: inherit;
            min-height: inherit;
            //transform-origin: 50% 50%;
            transform: rotate(-90deg);
        }
    }

    %circular-display--indeterminate {
        @include animation(rotate-center 3s linear normal infinite);

        [dir='rtl'] & {
            animation-direction: reverse;
        }
    }

    %circular-inner {
        stroke-width: $stroke-width;
        fill: transparent;
        stroke: var-get($theme, 'base-circle-color');
    }

    %circular-outer {
        fill: transparent;
        stroke-width: $stroke-width;
        stroke-dashoffset: 289;
        stroke-dasharray: 289;

        @if $variant == 'indigo-design' {
            stroke-linecap: round;
        }
    }

    %circular-outer--indeterminate {
        stroke-dasharray: 289;
        @include animation(indeterminate-accordion 1.5s cubic-bezier(0, .085, .68, .53) normal infinite);

        [dir='rtl'] & {
            animation-direction: reverse;
        }
    }

    %circular-text {
        position: absolute;
        inset-block-start: 50%;
        inset-inline-start: 50%;
        transform: translate(-50%, -50%);
        font-size: rem(16px);
        line-height: 1;
        text-align: center;
        font-weight: 600;
        fill: var-get($theme, 'text-color');
    }

    %circular-text--hidden {
        visibility: hidden;
    }

    %circular-gradient-start {
        stop-color: var-get($theme, 'progress-circle-color-start');
    }

    %circular-gradient-end {
        stop-color: var-get($theme, 'progress-circle-color-end');
    }

    @include keyframes('indeterminate-accordion') {
        from {
            stroke-dashoffset: 578;
            stroke-dasharray: 259;
        }

        to {
            stroke-dashoffset: 120;
        }
    }
}
