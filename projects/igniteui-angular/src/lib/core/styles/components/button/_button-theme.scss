@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use '../../base' as *;
@use '../../themes/schemas' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
////

/// If only background color is specified, text/icon color
/// will be assigned automatically to a contrasting color.
/// Does ___not___ apply for disabled state colors.
/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Map} $elevations [$elevations] - The elevations (shadows) map to be used.
/// @param {Color} $background [null] - The background color of the button.
/// @param {Color} $foreground [null] - The text color of the button.
/// @param {Color} $hover-background [null] - The hover background color of the button.
/// @param {Color} $hover-foreground [null] - The hover text color of the button.
/// @param {Color} $focus-background [null] - The focus background color of the button.
/// @param {Color} $focus-foreground [null] - The focus text color of the button.
/// @param {Color} $focus-visible-background [null] - The focus-visible background color of the button.
/// @param {Color} $focus-visible-foreground [null] - The focus-visible text color of the button.
/// @param {Color} $active-background [null] - The active background of the button.
/// @param {Color} $active-foreground [null] - The active text color of the button.
/// @param {List} $border-radius [null] - The border radius of the button.
/// @param {Color} $border-color [null] - The border color of the button.
/// @param {Color} $hover-border-color [null] - The hover border color of the button.
/// @param {Color} $focus-border-color [null] - The focus border color of the button.
/// @param {Color} $focus-visible-border-color [null] - The focus-visible border color of the button.
/// @param {Color} $active-border-color [null] - The active border color of the button.
/// @param {Color} $shadow-color [null] - The shadow color of the button.
/// @param {Color} $resting-shadow [null] - The shadow of the button in its idle state.
/// @param {Color} $hover-shadow [null] - The shadow of the button in its hover state.
/// @param {Color} $focus-shadow [null] - The shadow of the button in its focus state.
/// @param {Color} $active-shadow [null] - The shadow of the button in its focus state.
/// @param {Color} $disabled-background [null] - The disabled background color of the button.
/// @param {Color} $disabled-foreground [null] - The disabled text color of the button.
/// @param {Color} $disabled-border-color [null] - The disabled border color of the button.
///
/// @requires $light-material-schema
///
/// @example scss Change the background and text colors in raised buttons
///   $my-button-theme: button-theme(
///     $foreground: white,
///     $background: black
///   );
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-button-theme);
@function button-theme(
    $schema: $light-material-schema,
    $elevations: null,

    $background: null,
    $foreground: null,

    $hover-background: null,
    $hover-foreground: null,

    $focus-background: null,
    $focus-foreground: null,

    $focus-visible-background: null,
    $focus-visible-foreground: null,

    $active-background: null,
    $active-foreground: null,

    $border-radius: null,
    $border-color: null,
    $hover-border-color: null,
    $focus-border-color: null,
    $focus-visible-border-color: null,
    $active-border-color: null,

    $shadow-color: null,

    $resting-shadow: null,
    $hover-shadow: null,
    $focus-shadow: null,
    $active-shadow: null,

    $disabled-background: null,
    $disabled-foreground: null,
    $disabled-border-color: null,
    $size: null,
) {
    $name: 'igx-button';
    $button-schema: ();

    @if map.has-key($schema, 'button') {
        $button-schema: map.get($schema, 'button');
    } @else {
        $button-schema: $schema;
    }

    $themes: ();
    $variant: null;

    @each $_name, $_schema in $button-schema {
        $_resting-shadow: $resting-shadow;
        $_hover-shadow: $hover-shadow;
        $_focus-shadow: $focus-shadow;
        $_active-shadow: $active-shadow;
        $_border-radius: $border-radius;

        @if not($variant) {
            $variant: map.get($schema, '_meta', 'theme');
        }

        @if not($foreground) and $background {
            $foreground: text-contrast($background);
        }

        @if not($hover-background) and $background {
            @if meta.type-of($background) == 'color' {
                $hover-background: color.scale($background, $lightness: 5%);
            }
        }

        @if not($hover-foreground) and $hover-background {
            @if meta.type-of($hover-background) == 'color' {
                $hover-foreground: text-contrast($hover-background);
            }
        }

        @if not($focus-background) and $background {
            $focus-background: color.scale($background, $lightness: 5%);
        }

        @if not($focus-foreground) and $focus-background {
            $focus-foreground: text-contrast($focus-background);
        }

        @if not($focus-visible-background) and $focus-background {
            $focus-visible-background: $focus-background;
        }

        @if not($focus-visible-foreground) and $focus-foreground {
            $focus-visible-foreground: $focus-foreground;
        }

        @if not($focus-visible-border-color) and $focus-border-color {
            $focus-visible-border-color: $focus-border-color;
        }

        @if not($_resting-shadow) {
            $resting-elevation: map.get($_schema, 'resting-elevation');
            $_resting-shadow: elevation($resting-elevation);
        }

        @if not($_hover-shadow) {
            $hover-elevation: map.get($_schema, 'hover-elevation');
            $_hover-shadow: elevation($hover-elevation);
        }

        @if not($_focus-shadow) {
            $focus-elevation: map.get($_schema, 'focus-elevation');
            $_focus-shadow: elevation($focus-elevation);
        }

        @if not($_active-shadow) {
            $active-elevation: map.get($_schema, 'active-elevation');
            $_active-shadow: elevation($active-elevation);
        }

        $themes: map.merge($themes, (
            $_name: extend( digest-schema($_schema), (
                name: $name,
                background: $background,
                foreground: $foreground,

                hover-background: $hover-background,
                hover-foreground: $hover-foreground,

                focus-background: $focus-background,
                focus-foreground: $focus-foreground,

                focus-visible-background: $focus-visible-background,
                focus-visible-foreground: $focus-visible-foreground,

                active-background: $active-background,
                active-foreground: $active-foreground,

                border-radius: $_border-radius,
                border-color: $border-color,
                hover-border-color: $hover-border-color,
                focus-border-color: $focus-border-color,
                focus-visible-border-color: $focus-visible-border-color,
                active-border-color: $active-border-color,

                shadow-color: $shadow-color,

                resting-shadow: $_resting-shadow,
                hover-shadow: $_hover-shadow,
                focus-shadow: $_focus-shadow,
                active-shadow: $_active-shadow,

                disabled-background: $disabled-background,
                disabled-foreground: $disabled-foreground,
                disabled-border-color: $disabled-border-color,
                size: $size,
            ))
        ));
    }

    @return (
        name: $name,
        variant: $variant,
        themes: $themes,
    );
}

/// @param {Map} $theme - The theme used to style the component.
@mixin button($theme) {
    $button-width: rem(88px);

    $variant: map.get($theme, variant);

    $flat-theme: map.get(map.get($theme, 'themes'), 'flat');
    $outlined-theme: map.get(map.get($theme, 'themes'), 'outlined');
    $raised-theme: map.get(map.get($theme, 'themes'), 'raised');
    $fab-theme: map.get(map.get($theme, 'themes'), 'fab');
    $icon-theme: map.get(map.get($theme, 'themes'), 'icon');

    @include css-vars($flat-theme);
    @include css-vars($outlined-theme);
    @include css-vars($raised-theme);
    @include css-vars($fab-theme);
    @include css-vars($icon-theme);

    $time: map.get((
        material: .1s,
        fluent: .1s,
        bootstrap: .15s,
        indigo-design: .15s
    ), $variant);

    $button-transition: color $time ease-in-out,
        background-color $time ease-in-out,
        border-color $time ease-in-out,
        box-shadow $time ease-in-out;

    $button-disabled-shadow: none;

    $button-floating-width: rem(56px);
    $button-floating-height: $button-floating-width;

    $button-icon-width: map.get((
        material: rem(36px, 16px),
        fluent: rem(32px, 16px),
        bootstrap: rem(36px, 16px),
        indigo-design: rem(36px, 16px),
    ), $variant);

    $button-icon-height: $button-icon-width;

    $button-padding-material-inline: (
        comfortable: rem(16px, 16px),
        cosy: rem(16px, 16px),
        compact: rem(16px, 16px)
    );

    $button-padding-material-block: (
        comfortable: rem(7px, 16px),
        cosy: rem(4px, 16px),
        compact: rem(1px, 16px)
    );

    $button-padding-fluent-inline: (
        comfortable: rem(16px, 16px),
        cosy: rem(16px, 16px),
        compact: rem(16px, 16px)
    );

    $button-padding-fluent-block: (
        comfortable: 0,
        cosy: 0,
        compact: 0
    );

    $button-padding-bootstrap-inline: (
        comfortable: rem(12px, 16px),
        cosy: rem(10px, 16px),
        compact: rem(8px, 16px)
    );

    $button-padding-bootstrap-block: (
        comfortable: rem(6px, 16px),
        cosy: rem(4px, 16px),
        compact: rem(2px, 16px)
    );

    $button-padding-indigo-inline: (
        comfortable: rem(12px, 16px),
        cosy: rem(12px, 16px),
        compact: rem(8px, 16px)
    );

    $button-padding-indigo-block: (
        comfortable: rem(3px, 16px),
        cosy: rem(2px, 16px),
        compact: rem(1px, 16px)
    );

    $outlined-button-padding-material-inline: (
        comfortable: rem(14px, 16px),
        cosy: rem(14px, 16px),
        compact: rem(14px, 16px)
    );

    $outlined-button-padding-material-block: (
        comfortable: rem(7px, 16px),
        cosy: rem(4px, 16px),
        compact: rem(1px, 16px)
    );

    $outlined-button-padding-indigo-inline: (
        comfortable: rem(14px, 16px),
        cosy: rem(10px, 16px),
        compact: rem(6px, 16px)
    );

    $outlined-button-padding-indigo-block: (
        comfortable: rem(6px, 16px),
        cosy: rem(4px, 16px),
        compact: rem(2px, 16px)
    );

    $button-padding-inline: map.get((
        material: $button-padding-material-inline,
        fluent: $button-padding-fluent-inline,
        bootstrap: $button-padding-bootstrap-inline,
        indigo-design: $button-padding-indigo-inline,
    ), $variant);

    $button-padding-block: map.get((
        material: $button-padding-material-block,
        fluent: $button-padding-fluent-block,
        bootstrap: $button-padding-bootstrap-block,
        indigo-design: $button-padding-indigo-block,
    ), $variant);

    $outlined-button-padding-inline: map.get((
        material: $outlined-button-padding-material-inline,
        fluent: $button-padding-fluent-inline,
        bootstrap: $button-padding-bootstrap-inline,
        indigo-design: $outlined-button-padding-indigo-inline
    ), $variant);

    $outlined-button-padding-block: map.get((
        material: $outlined-button-padding-material-block,
        fluent: $button-padding-fluent-block,
        bootstrap: $button-padding-bootstrap-block,
        indigo-design: $outlined-button-padding-indigo-block
    ), $variant);

    $button-floating-padding-block: (
        comfortable: rem(8px),
        cosy: rem(4px),
        compact: 0
    );

    $button-floating-padding-inline: (
        comfortable: rem(14px),
        cosy: rem(10px),
        compact: rem(6px)
    );

    $items-gap: (
        comfortable: rem(12px),
        cosy: rem(8px),
        compact: rem(4px)
    );

    $icon-sizes: map.get((
        material: rem(18px),
        fluent: rem(16px),
        bootstrap: rem(18px),
        indigo-design: rem(18px),
    ), $variant);

    $filtering-row-button-size: (
        comfortable: rem(40px),
        cosy: rem(30px),
        compact: rem(21px)
    );

    $icon-in-button-size: $icon-sizes;

    $raised-shadow: map.get((
        material: var-get($raised-theme, 'resting-shadow'),
        fluent: var-get($raised-theme, 'resting-shadow'),
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $raised-shadow--hover: map.get((
        material: var-get($raised-theme, 'hover-shadow'),
        fluent: var-get($raised-theme, 'hover-shadow'),
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $raised-shadow--focus: map.get((
        material: var-get($raised-theme, 'focus-shadow'),
        fluent: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color'),
        bootstrap: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color'),
        indigo-design: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color')
    ), $variant);

    $raised-shadow--active: map.get((
        material: var-get($raised-theme, 'active-shadow'),
        fluent: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color'),
        bootstrap: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color'),
        indigo-design: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color')
    ), $variant);

    $fab-shadow: map.get((
        material: var-get($fab-theme, 'resting-shadow'),
        fluent: var-get($fab-theme, 'resting-shadow'),
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $fab-shadow--hover: map.get((
        material: var-get($fab-theme, 'hover-shadow'),
        fluent: var-get($fab-theme, 'hover-shadow'),
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $fab-shadow--focus: map.get((
        material: var-get($fab-theme, 'focus-shadow'),
        fluent:  0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
        bootstrap: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
        indigo-design: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color')
    ), $variant);

    $fab-shadow--active: map.get((
        material: var-get($fab-theme, 'active-shadow'),
        fluent:  0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
        bootstrap: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
        indigo-design: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color')
    ), $variant);

    $icon-shadow: map.get((
        material: var-get($icon-theme, 'focus-shadow'),
        fluent: 0 0 0 rem(3px) var-get($icon-theme, 'shadow-color'),
        bootstrap: 0 0 0 rem(3px) var-get($icon-theme, 'shadow-color'),
        indigo-design: 0 0 0 rem(3px) var-get($icon-theme, 'shadow-color')
    ), $variant);

    %igx-button-display {
        @include sizable();
        --component-size: var(--ig-size, var(--ig-size-large));

        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: $button-width;
        padding-inline: pad-inline(
            map.get($button-padding-inline, 'compact'),
            map.get($button-padding-inline, 'cosy'),
            map.get($button-padding-inline, 'comfortable')
        );
        padding-block: pad-block(
            map.get($button-padding-block, 'compact'),
            map.get($button-padding-block, 'cosy'),
            map.get($button-padding-block, 'comfortable')
        );
        min-height: var-get($flat-theme, 'size');
        border: rem(1px) solid var-get($flat-theme, 'border-color');
        cursor: pointer;
        user-select: none;
        outline-style: none;
        -webkit-tap-highlight-color: transparent;
        overflow: hidden;
        white-space: nowrap;
        transition: $button-transition;
        gap: pad-inline(
            map.get($items-gap, 'compact'),
            map.get($items-gap, 'cosy'),
            map.get($items-gap, 'comfortable')
        );


        @if ($variant == 'bootstrap') {
            // important is needed to override the typography margins
            margin: rem(4px) !important;
        }

        igx-icon {
            --component-size: var(--ig-size, var(--ig-size-large));
            display: flex;
            justify-content: center;
            width: var(--igx-icon-size, #{$icon-in-button-size});
            height: var(--igx-icon-size, #{$icon-in-button-size});
            font-size: var(--igx-icon-size, #{$icon-in-button-size});
        }
    }

    igx-grid-filtering-row {
        @if ($variant == 'bootstrap') {
            --filtering-row-button-size: #{sizable(
                #{map.get($filtering-row-button-size, 'compact')},
                #{map.get($filtering-row-button-size, 'cosy')},
                #{map.get($filtering-row-button-size, 'comfortable')}
            )};

            %igx-button-display {
                min-height: var(--filtering-row-button-size);
                padding-block: 0;

                > * {
                    display: flex;
                    align-items: center;
                    height: rem(18px);
                }
            }
        }
    }

    %igx-button--flat {
        background: var-get($flat-theme, 'background');
        color: var-get($flat-theme, 'foreground');
        border-radius: var-get($flat-theme, 'border-radius');

        &:hover {
            background: var-get($flat-theme, 'hover-background');
            color: var-get($flat-theme, 'hover-foreground');
            border-color: var-get($flat-theme, 'hover-border-color');
        }

        &:focus {
            background: var-get($flat-theme, 'focus-background');
            color: var-get($flat-theme, 'focus-foreground');
            box-shadow: 0 0 0 rem(3px) var-get($flat-theme, 'shadow-color');
            border-color: var-get($flat-theme, 'focus-border-color');
        }

        &:active {
            background: var-get($flat-theme, 'active-background');
            color: var-get($flat-theme, 'active-foreground');
            box-shadow: 0 0 0 rem(3px) var-get($flat-theme, 'shadow-color');
            border-color: var-get($flat-theme, 'active-border-color');
        }

        &:focus-visible {
            background: var-get($flat-theme, 'focus-visible-background');
            color: var-get($flat-theme, 'focus-visible-foreground');
            border-color: var-get($flat-theme, 'focus-visible-border-color');
        }

        @if($variant == 'bootstrap') {
            &:focus,
            &:active,
            &:focus-visible {
                box-shadow: 0 0 0 rem(3px) var-get($outlined-theme, 'shadow-color');
            }
        }
    }

    %igx-button--outlined {
        background: var-get($outlined-theme, 'background');
        color: var-get($outlined-theme, 'foreground');
        border-color: var-get($outlined-theme, 'border-color');
        border-radius: var-get($outlined-theme, 'border-radius');
        padding-block: pad-block(
            map.get($outlined-button-padding-block, 'compact'),
            map.get($outlined-button-padding-block, 'cosy'),
            map.get($outlined-button-padding-block, 'comfortable')
        );
        padding-inline: pad-inline(
            map.get($outlined-button-padding-inline, 'compact'),
            map.get($outlined-button-padding-inline, 'cosy'),
            map.get($outlined-button-padding-inline, 'comfortable')
        );

        @if $variant == 'indigo-design' {
            border-width: rem(2px);
        }

        &:hover {
            background: var-get($outlined-theme, 'hover-background');
            color: var-get($outlined-theme, 'hover-foreground');
            border-color: var-get($outlined-theme, 'hover-border-color');
        }

        &:focus {
            background: var-get($outlined-theme, 'focus-background');
            color: var-get($outlined-theme, 'focus-foreground');
            border-color: var-get($outlined-theme, 'focus-border-color');

            @if($variant == 'bootstrap') {
                &:hover {
                    background: var-get($outlined-theme, 'hover-background');
                    color: var-get($outlined-theme, 'hover-foreground');
                }
                box-shadow: 0 0 0 rem(3px) var-get($outlined-theme, 'shadow-color');
            } @else if($variant == 'indigo-design') {
                box-shadow: 0 0 0 rem(3px) var-get($outlined-theme, 'shadow-color');
            }
        }

        &:active {
            background: var-get($outlined-theme, 'active-background');
            color: var-get($outlined-theme, 'active-foreground');
            border-color: var-get($outlined-theme, 'active-border-color');
            box-shadow: 0 0 0 rem(3px) var-get($outlined-theme, 'shadow-color');
        }

        &:focus-visible {
            background: var-get($outlined-theme, 'focus-visible-background');
            color: var-get($outlined-theme, 'focus-visible-foreground');
            border-color: var-get($outlined-theme, 'focus-visible-border-color');

            &:hover {
                background: var-get($outlined-theme, 'hover-background');
                color: var-get($outlined-theme, 'hover-foreground');
                border-color: var-get($outlined-theme, 'hover-border-color');
            }

            &:active {
                background: var-get($outlined-theme, 'active-background');
                color: var-get($outlined-theme, 'active-foreground');
                border-color: var-get($outlined-theme, 'active-border-color');
            }
        }

        @if($variant == 'fluent') {
            &::after {
                border-radius: inherit;
            }

            &:focus-visible {
                &::after {
                    $outline-btn-indent: rem(2px);
                    content: '';
                    position: absolute;
                    top: $outline-btn-indent;
                    inset-inline-start: $outline-btn-indent;
                    pointer-events: none;
                    width: calc(100% - (#{$outline-btn-indent} * 2));
                    height: calc(100% - (#{$outline-btn-indent} * 2));
                    box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'focus-visible-foreground');
                }

                /* stylelint-disable */
                &:hover {
                    &::after {
                        box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'hover-foreground');
                    }
                }

                &:active {
                    &::after {
                        box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'active-foreground');
                    }
                }
                /* stylelint-enable */
            }
        }
    }

    %igx-button--raised {
        color: var-get($raised-theme, 'foreground');
        background: var-get($raised-theme, 'background');
        box-shadow: $raised-shadow;
        border-radius: var-get($raised-theme, 'border-radius');

        &:hover {
            color: var-get($raised-theme, 'hover-foreground');
            background: var-get($raised-theme, 'hover-background');
            border-color: var-get($raised-theme, 'hover-border-color');
            box-shadow: $raised-shadow--hover;
        }

        &:focus {
            color: var-get($raised-theme, 'focus-foreground');
            background: var-get($raised-theme, 'focus-background');
            border-color: var-get($raised-theme, 'focus-border-color');

            @if $variant == 'material' or  $variant == 'fluent' {
                box-shadow: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color'), $raised-shadow--focus;
            } @else {
                box-shadow: $raised-shadow--focus;
            }
        }

        &:active {
            color: var-get($raised-theme, 'active-foreground');
            background: var-get($raised-theme, 'active-background');
            border-color: var-get($raised-theme, 'active-border-color');

            @if $variant == 'material' or  $variant == 'fluent' {
                box-shadow: 0 0 0 rem(3px) var-get($raised-theme, 'shadow-color'), $raised-shadow--active;
            } @else {
                box-shadow: $raised-shadow--active;
            }
        }

        &:focus-visible {
            background: var-get($raised-theme, 'focus-visible-background');
            color: var-get($raised-theme, 'focus-visible-foreground');
            border-color: var-get($raised-theme, 'focus-visible-border-color');

            &:hover {
                color: var-get($raised-theme, 'hover-foreground');
                background: var-get($raised-theme, 'hover-background');
                border-color: var-get($raised-theme, 'hover-border-color');
            }

            &:active {
                color: var-get($raised-theme, 'active-foreground');
                background: var-get($raised-theme, 'active-background');
                border-color: var-get($raised-theme, 'active-border-color');
            }
        }

        @if($variant == 'fluent') {
            &::after {
                border-radius: inherit;
            }

            &:focus-visible {
                &::after {
                    $outline-btn-indent: rem(3px);
                    content: '';
                    position: absolute;
                    top: $outline-btn-indent;
                    inset-inline-start: $outline-btn-indent;
                    pointer-events: none;
                    width: calc(100% - (#{$outline-btn-indent} * 2));
                    height: calc(100% - (#{$outline-btn-indent} * 2));
                    box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'focus-visible-foreground');
                }

                /* stylelint-disable */
                &:hover {
                    &::after {
                        box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'hover-foreground');
                    }
                }

                &:active {
                    &::after {
                        box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'active-foreground');
                    }
                }
                /* stylelint-enable */
            }
        }
    }

    %igx-button--round {
        display: inline-flex;
        position: relative;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        outline: none;
        cursor: pointer;
        transition: $button-transition;
        user-select: none;
        -webkit-tap-highlight-color: transparent;
        overflow: hidden;
        // hack to allow circular overflow in safari...
        filter: blur(0);
    }

    %igx-button--fab {
        padding-block: pad-block(
            map.get($button-floating-padding-block, 'compact'),
            map.get($button-floating-padding-block, 'cosy'),
            map.get($button-floating-padding-block, 'comfortable')
        );
        padding-inline: pad-inline(
            map.get($button-floating-padding-inline, 'compact'),
            map.get($button-floating-padding-inline, 'cosy'),
            map.get($button-floating-padding-inline, 'comfortable')
        );
        min-width: var-get($fab-theme, 'size');
        min-height: var-get($fab-theme, 'size');
        line-height: unset;
        white-space: nowrap;
        color: var-get($fab-theme, 'foreground');
        background: var-get($fab-theme, 'background');
        border-color: var-get($flat-theme, 'border-color');
        box-shadow: $fab-shadow;
        border-radius: var-get($fab-theme, 'border-radius');

        &:hover {
            color: var-get($fab-theme, 'hover-foreground');
            background: var-get($fab-theme, 'hover-background');
            border-color: var-get($flat-theme, 'hover-border-color');
            box-shadow: $fab-shadow;
        }

        &:focus {
            color: var-get($fab-theme, 'focus-foreground');
            background: var-get($fab-theme, 'focus-background');
            border-color: var-get($flat-theme, 'focus-border-color');

            @if $variant == 'material' or  $variant == 'fluent' {
                box-shadow: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'), $fab-shadow--focus;
            } @else {
                box-shadow: $raised-shadow--focus;
            }
        }

        &:active {
            color: var-get($fab-theme, 'active-foreground');
            background: var-get($fab-theme, 'active-background');
            border-color: var-get($flat-theme, 'active-border-color');

            @if $variant == 'material' or  $variant == 'fluent' {
                box-shadow: 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'), $fab-shadow--active;
            } @else {
                box-shadow: $raised-shadow--active;
            }
        }

        &:focus-visible {
            background: var-get($fab-theme, 'focus-visible-background');
            color: var-get($fab-theme, 'focus-visible-foreground');
            border-color: var-get($fab-theme, 'focus-visible-border-color');

            &:hover {
                color: var-get($fab-theme, 'hover-foreground');
                background: var-get($fab-theme, 'hover-background');
                border-color: var-get($fab-theme, 'hover-border-color');
            }

            &:active {
                color: var-get($fab-theme, 'active-foreground');
                background: var-get($fab-theme, 'active-background');
                border-color: var-get($fab-theme, 'active-border-color');
            }
        }

        @if($variant == 'fluent') {
            &::after {
                border-radius: inherit;
            }

            &:focus-visible {
                &::after {
                    $outline-btn-indent: rem(3px);
                    content: '';
                    position: absolute;
                    top: $outline-btn-indent;
                    inset-inline-start: $outline-btn-indent;
                    pointer-events: none;
                    border-radius: calc(#{var-get($fab-theme, 'border-radius')} - #{$outline-btn-indent});
                    width: calc(100% - (#{$outline-btn-indent} * 2));
                    height: calc(100% - (#{$outline-btn-indent} * 2));
                    box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'focus-visible-foreground');
                }

                /* stylelint-disable */
                &:hover {
                    &::after {
                        box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'hover-foreground');
                    }
                }

                &:active {
                    &::after {
                        box-shadow: 0 0 0 rem(1px) var-get($outlined-theme, 'active-foreground');
                    }
                }
                /* stylelint-enable */
            }
        }
    }

    %igx-button--icon {
        width: var-get($icon-theme, 'size');
        height: var-get($icon-theme, 'size');
        min-width: unset;
        min-height: unset;
        font-size: rem(24px, 24px);
        padding: 0;
        color: var-get($icon-theme, 'foreground');
        background: var-get($icon-theme, 'background');
        border-radius: var-get($icon-theme, 'border-radius');
        border-color: var-get($icon-theme, 'border-color');

        @if $variant == 'indigo-design' {
            border-width: rem(3px);
        }

        &:hover {
            @if $variant != 'fluent' {
                transition: $button-transition;
            }

            color: var-get($icon-theme, 'hover-foreground');
            background: var-get($icon-theme, 'hover-background');
            border-color: var-get($icon-theme, 'hover-border-color');
        }

        &:focus {
            color: var-get($icon-theme, 'focus-foreground');
            background: var-get($icon-theme, 'focus-background');
            border-color: var-get($icon-theme, 'focus-border-color');

            @if $variant == 'fluent' {
                &:hover {
                    color: var-get($icon-theme, 'hover-foreground');
                    background: var-get($icon-theme, 'hover-background');
                    border-color: var-get($icon-theme, 'hover-border-color');
                }

                &:active {
                    color: var-get($icon-theme, 'active-foreground');
                    background: var-get($icon-theme, 'active-background');
                    border-color: var-get($icon-theme, 'active-border-color');
                }
            }
        }

        &:active {
            color: var-get($icon-theme, 'active-foreground');
            background: var-get($icon-theme, 'active-background');
            border-color: var-get($flat-theme, 'active-border-color');
        }

        &:focus-visible {
            color: var-get($icon-theme, 'focus-visible-foreground');
            background: var-get($icon-theme, 'focus-visible-background');
            border-color: var-get($icon-theme, 'focus-visible-border-color') ;

            &:hover {
                color: var-get($icon-theme, 'hover-foreground');
                background: var-get($icon-theme, 'hover-background');
                border-color: var-get($icon-theme, 'focus-visible-border-color');
            }

            &:active {
                color: var-get($icon-theme, 'active-foreground');
                background: var-get($icon-theme, 'active-background');
                border-color: var-get($icon-theme, 'focus-visible-border-color');
            }
        }

        &:focus,
        &:active {
            @if $variant == 'material' or  $variant == 'fluent' {
                box-shadow: 0 0 0 rem(3px) var-get($icon-theme, 'shadow-color'), $icon-shadow;
            } @else {
                box-shadow: $icon-shadow;
            }
        }
    }

    %igx-button--disabled {
        background: var-get($flat-theme, 'disabled-background');
        color: var-get($flat-theme, 'disabled-foreground');
        border-color: var-get($flat-theme, 'disabled-border-color');
        pointer-events: none;
        box-shadow: none;

        &:focus {
            box-shadow: none;
        }
    }
}

/// Adds typography styles for the igx-button component.
/// Uses the 'button' category from the typographic scale.
/// @group typography
/// @param {String} $categories [(text: 'button')] - The category from the typographic scale used for type styles.
@mixin button-typography($categories: (text: 'button')) {
    $text: map.get($categories, 'text');

    %igx-button-display {
        @include type-style($text) {
            text-align: center;
        }
    }

    %igx-button--fab {
        @include type-style($text) {
            text-align: center;
            margin: 0;
        }
    }
}
