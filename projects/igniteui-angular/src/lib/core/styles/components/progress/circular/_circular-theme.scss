@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:list';
@use '../../../base' as *;
@use 'igniteui-theming/sass/animations' as *;
@use '../../../themes/schemas' as *;

/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $base-circle-color [null] - The base circle fill color.
/// @param {Color | List<Color>} $progress-circle-color [null] - The progress circle fill color.
/// @param {Color} $text-color [null] - The value text color.
/// @param {Number} $diameter [null] - The progress circle diameter.
///
/// @requires $light-material-schema
///
/// @example scss Change the circle progress color
///   $my-progress-circular-theme: igx-progress-circular-theme(
///     $progress-circle-color: purple
///   );
///   // Pass the theme to the igx-progress-circular component mixin
///   @include igx-progress-circular($my-progress-circle-theme);
@function progress-circular-theme(
    $schema: $light-material-schema,
    $base-circle-color: null,
    $progress-circle-color: null,
    $text-color: null,
    $diameter: null
) {
    $name: 'igx-circular-bar';
    $circular-bar-schema: ();

    @if map.has-key($schema, 'circular-bar') {
        $circular-bar-schema: map.get($schema, 'circular-bar');
    } @else {
        $circular-bar-schema: $schema;
    }

    $theme: digest-schema($circular-bar-schema);
    $meta: map.get($theme, '_meta');

    $progress-circle-color-start: map.get($theme, 'progress-circle-color');
    $progress-circle-color-end: map.get($theme, 'progress-circle-color');

    @if meta.type-of($progress-circle-color) == 'color' {
        $progress-circle-color-start: $progress-circle-color;
        $progress-circle-color-end: $progress-circle-color;
    }

    @if list.length($progress-circle-color) == 2 {
        $progress-circle-color-start: list.nth($progress-circle-color, 1);
        $progress-circle-color-end: list.nth($progress-circle-color, 2);
    }

    @return extend($theme, (
        name: $name,
        base-circle-color: $base-circle-color,
        progress-circle-color-start: $progress-circle-color-start,
        progress-circle-color-end: $progress-circle-color-end,
        text-color: $text-color,
        diameter: $diameter,
        theme: map.get($schema, '_meta', 'theme'),
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme')
        )),
    ));
}

/// @deprecated Use the `css-vars` mixin instead.
/// @see {mixin} css-vars
/// @param {Map} $theme - The theme used to style the component.
@mixin progress-circular($theme) {
    // Include rotate animation
    @include rotate-center();

    @include css-vars($theme);

    $variant: map.get($theme, '_meta', 'variant');
    $stroke-width: rem(4px);
    $diameter: var-get($theme, 'diameter');

    %circular-display {
        display: inline-flex;
        flex: 1 1 auto;
        width: $diameter;
        height: $diameter;
        position: relative;

        svg {
            width: 100%;
            height: 100%;
            min-width: inherit;
            min-height: inherit;
            //transform-origin: 50% 50%;
            transform: rotate(-90deg);
        }
    }

    %circular-display--indeterminate {
        @include animation(rotate-center 3s linear normal infinite);

        [dir='rtl'] & {
            animation-direction: reverse;
        }
    }

    %circular-inner {
        stroke-width: $stroke-width;
        fill: transparent;
        stroke: var-get($theme, 'base-circle-color');
    }

    %circular-outer {
        fill: transparent;
        stroke-width: $stroke-width;
        stroke-dashoffset: 289;
        stroke-dasharray: 289;

        @if $variant == 'indigo' {
            stroke-width: calc($stroke-width + rem(1px));
        }

        @if $variant == 'material' {
            stroke-width: calc($stroke-width + rem(2px));
        }
    }

    %circular-outer--indeterminate {
        stroke-dasharray: 289;
        @include animation(indeterminate-accordion 1.5s cubic-bezier(0, .085, .68, .53) normal infinite);

        [dir='rtl'] & {
            animation-direction: reverse;
        }
    }

    %circular-text {
        $scale-factor: 2.28571;

        @if $variant == 'indigo' {
            $scale-factor: 3;
        }

        @if $variant == 'bootstrap' {
            $scale-factor: 2.7;
        }

        --stroke-scale: calc(#{$diameter} / #{unitless(map.get($theme, 'diameter'))});
        $font-size: round(calc($diameter / $scale-factor - #{unitless($stroke-width)} * var(--stroke-scale)), 1px);

        position: absolute;
        inset-block-start: 50%;
        inset-inline-start: 50%;
        transform: translate(-50%, -50%);
        color: var-get($theme, 'text-color');
        font-size: #{$font-size};
        line-height: normal;
        text-align: center;
        font-weight: 600;

        @if $variant == 'bootstrap' or $variant == 'fluent' {
            font-weight: 700;
        }

        counter-reset:
            progress-integer var(--_progress-integer, 0)
            progress-fraction var(--_progress-fraction, 0);
        transition:
            --_progress-integer var(--_transition-duration) ease-in-out,
            --_progress-fraction var(--_transition-duration) ease-in-out;
    }

    %circular-text:not(%circular-text--fraction) {
        &::before {
            content: counter(progress-integer) '%';
        }
    }

    %circular-text--fraction {
        &::before {
            content: counter(progress-integer) '.' counter(progress-fraction, decimal-leading-zero) '%';
        }
    }

    %circular-text--hidden {
        visibility: hidden;
    }

    %circular-gradient-start {
        stop-color: var-get($theme, 'progress-circle-color-start');
    }

    %circular-gradient-end {
        stop-color: var-get($theme, 'progress-circle-color-end');
    }

    @include keyframes('indeterminate-accordion') {
        from {
            stroke-dashoffset: 578;
            stroke-dasharray: 259;
        }

        to {
            stroke-dashoffset: 120;
        }
    }

    %animation-none {
        animation-duration: 0s;
        animation: none;
    }
}
