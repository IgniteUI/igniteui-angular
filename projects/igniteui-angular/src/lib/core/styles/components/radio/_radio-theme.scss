@use 'sass:map';
@use 'sass:math';
@use '../../base' as *;
@use '../ripple/ripple-theme' as *;
@use '../ripple/ripple-component' as *;
@use 'igniteui-theming/sass/animations' as *;
@use '../../themes/schemas' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $label-color [null]- The text color used for the label text.
/// @param {Color} $empty-color [null] - The unchecked border color.
/// @param {Color} $fill-color [null] - The checked border and dot colors.
/// @param {Color} $disabled-color [null] - The disabled border and dot colors.
/// @param {Color} $disabled-label-color [null] - The disabled label color.
/// @param {Color} $hover-color [null] - The border and dot colors on hover.
/// @param {Color} $fill-color-hover [null] - The checked border and dot colors on hover.
/// @param {Color} $fill-hover-border-color [null] - The checked dot border color on hover.
/// @param {Color} $focus-outline-color [null] - The focus outlined color.
/// @param {Color} $error-color [null] - The label, border and dot color in invalid state.
/// @param {Color} $error-color-hover [null] - The label, border and dot color in invalid state on hover.
///
/// @requires $light-material-schema
///
/// Set light to true when the surrounding area is dark.
/// @example scss Change the checked dot and border colors
///   $my-radio-theme: radio-theme($fill-color: magenta);
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-radio-theme);
@function radio-theme(
    $schema: $light-material-schema,

    $label-color: null,
    $empty-color: null,
    $fill-color: null,
    $fill-hover-border-color: null,
    $focus-outline-color: null,
    $disabled-color: null,
    $disabled-label-color: null,
    $hover-color: null,
    $fill-color-hover: null,
    $error-color: null,
    $error-color-hover: null,
) {
    $name: 'igx-radio';
    $radio-schema: ();

    @if map.has-key($schema, 'radio') {
        $radio-schema: map.get($schema, 'radio');
    } @else {
        $radio-schema: $schema;
    }

    $theme: digest-schema($radio-schema);
    $meta: map.get($theme, '_meta');

    @return extend($theme, (
        name: $name,
        label-color: $label-color,
        empty-color: $empty-color,
        fill-color: $fill-color,
        fill-hover-border-color: $fill-hover-border-color,
        disabled-color: $disabled-color,
        disabled-label-color: $disabled-label-color,
        hover-color: $hover-color,
        fill-color-hover: $fill-color-hover,
        focus-outline-color: $focus-outline-color,
        error-color: $error-color,
        error-color-hover: $error-color-hover,
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme'),
            theme-variant: map.get($schema, '_meta', 'variant')
        )),
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires ripple-theme
@mixin radio($theme) {
    @include css-vars($theme);
    @include scale-in-out($start-scale: .9);

    $theme-variant: map.get($theme, '_meta', 'theme-variant');
    $variant: map.get($theme, '_meta', 'variant');
    $material-theme: $variant == 'material';
    $bootstrap-theme: $variant == 'bootstrap';
    $not-bootstrap-theme: $variant != 'bootstrap';

    $label-margin: map.get((
        material: rem(2px),
        fluent: rem(6px),
        bootstrap: rem(8px),
        indigo-design: rem(8px),
    ), $variant);

    $size: map.get((
        material: rem(40px),
        fluent: rem(20px),
        bootstrap: rem(16px),
        indigo-design: rem(20px),
    ), $variant);

    $scale: map.get((
        material: scale(.5),
        fluent: scale(.5),
        bootstrap: scale(.375),
        indigo-design: scale(.5),
    ), $variant);

    $border-width: map.get((
        material: rem(2px),
        fluent: rem(1px),
        bootstrap: rem(1px),
        indigo-design: rem(2px),
    ), $variant);

    $radio-hover-scale: map.get((
        material: null,
        fluent: scale(.5),
    ), $variant);

    $ripple-display: map.get((
        material: block,
        bootstrap: none,
        fluent: none,
        indigo-design: none,
    ), $variant);

    $horizontal-group-margin: map.get((
        material: rem(16px),
        fluent: rem(12px),
        bootstrap: rem(8px),
        indigo-design: rem(8px),
    ), $variant);

    $vertical-group-margin: map.get((
        material: 0,
        fluent: rem(8px),
        bootstrap: rem(8px),
        indigo-design: rem(8px),
    ), $variant);

    $border-style: solid;
    $border-radius: border-radius(50%);

    $transition: all .2s ease-in;

    $ripple-size: rem(40px);
    $ripple-radius: math.div($ripple-size, 2);

    $ripple-theme: ripple-theme(
        $schema: $light-material-schema,
        $color: var-get($theme, 'fill-color')
    );

    %radio-display {
        position: relative;
        display: inline-flex;
        flex-flow: row nowrap;
        align-items: center;
        color: var-get($theme, 'label-color');
    }

    %radio-input {
        @include hide-default();
    }

    %radio-display--disabled {
        pointer-events: none;
        color: var-get($theme, 'disabled-label-color');
        user-select: none;
    }

    %radio-label--invalid {
        color: var-get($theme, 'error-color');
    }

    %radio-label--disabled {
        color: var-get($theme, 'disabled-label-color');
    }

    %radio-composite {
        position: relative;
        display: inline-block;
        width: $size;
        height: $size;
        min-width: $size;
        line-height: $size;
        cursor: pointer;
        color: var-get($theme, 'label-color');
        user-select: none;

        &::before,
        &::after {
            position: absolute;
            content: '';
            width: $size;
            height: $size;
            inset-inline-start: 0;
            top: 0;
            border-radius: $border-radius;
        }

        @if $material-theme {
            &::before,
            &::after {
                width: math.div($size, 2);
                height: math.div($size, 2);
                top: 25%;
                inset-inline-start: 25%;
            }
        }

        &::before {
            backface-visibility: hidden;
            transform: scale(0);

            @if $not-bootstrap-theme {
                transition: $transition;
            }

            z-index: 1;
        }

        &::after {
            border: $border-width $border-style var-get($theme, 'empty-color');
        }
    }

    %radio-composite--x {
        &::before {
            border: $border-width $border-style var-get($theme, 'fill-color');
            background: var-get($theme, 'fill-color');
            transform: $scale;

            @if $bootstrap-theme {
                border-color: var-get($theme, 'fill-hover-border-color');
                background: var-get($theme, 'fill-hover-border-color');
            }
        }

        &::after {
            border: $border-width $border-style var-get($theme, 'fill-color');

            @if $bootstrap-theme{
                background: var-get($theme, 'fill-color');
            }
        }
    }

    %igx-radio-hover__composite {
        &::before {
            background: var-get($theme, 'hover-color');
            transform: $radio-hover-scale;
        }
    }

    %igx-radio-hover__composite--invalid {
        &::before {
            background: var-get($theme, 'error-color');
        }
    }

    %radio-composite--x--invalid--hover {
        @if $bootstrap-theme {
            &::before {
                background: white;
            }
        } @else if $variant == 'indigo-design' {
            &::before {
                background: var-get($theme, 'error-color');
            }
        } @else {
            &::before {
                background: var-get($theme, 'error-color-hover');
            }

            &::after {
                border: $border-width $border-style var-get($theme, 'error-color-hover');
            }
        }
    }

    %igx-radio--checked-active__composite {
        &::before {
            background: var-get($theme, 'fill-color-hover');
            border-color: var-get($theme, 'fill-hover-border-color');
        }

        &::after {
            @if $bootstrap-theme {
                border-color: var-get($theme, 'fill-color');
            } @else {
                border-color: var-get($theme, 'fill-hover-border-color');
            }
        }
    }

    %radio-composite--invalid {
        &::after {
            border: $border-width $border-style var-get($theme, 'error-color');

            @if $bootstrap-theme {
                background: transparent;
                border: $border-width $border-style var-get($theme, 'error-color');
            }
        }
    }

    %radio-composite--x--invalid {
        &::after {
            border: $border-width $border-style var-get($theme, 'error-color');
        }

        &::before {
            background: var-get($theme, 'error-color');
            border: $border-width $border-style transparent;
        }

        @if $bootstrap-theme {
            &::after {
                background: var-get($theme, 'error-color');
                border-color: var-get($theme, 'error-color');
            }

            &::before {
                background: white;
            }
        }
    }

    %radio-composite--disabled {
        &::after {
            border: $border-width $border-style var-get($theme, 'disabled-color');

            @if $bootstrap-theme {
                background: transparent;
                border: $border-width $border-style var-get($theme, 'disabled-label-color');
            }
        }
    }

    %radio-composite--x--disabled {
        &::after {
            border: $border-width $border-style var-get($theme, 'disabled-color');
        }

        &::before {
            background: var-get($theme, 'disabled-color');
            border: $border-width $border-style transparent;
        }

        @if $bootstrap-theme {
            &::after {
                background: var-get($theme, 'disabled-color');
                border-color: var-get($theme, 'disabled-color');
            }

            &::before {
                background: white;
            }
        }
    }

    %radio-label {
        color: currentColor;
        cursor: pointer;
        user-select: none;
        word-wrap: break-all;

        &:empty {
            display: none;
        }
    }

    %radio-label--after {
        margin-inline-start: $label-margin;
    }

    %radio-label--before {
        order: -1;
        margin-inline-end: $label-margin;
    }

    %radio-label--before,
    %radio-label--after {
        &:empty {
            margin: 0;
        }
    }

    %radio-ripple {
        @include ripple($ripple-theme);
        @include css-vars($ripple-theme);
        display: $ripple-display;
        position: absolute;
        top: calc(50% - #{$ripple-radius});
        inset-inline-start: calc(50% - #{$ripple-radius});
        width: $ripple-size;
        height: $ripple-size;
        border-radius: border-radius(math.div($ripple-size, 2));
        overflow: hidden;
        pointer-events: none;
        filter: opacity(1);
    }

    %igx-radio--focused {
        @if $variant == 'fluent' {
            position: relative;
            $focus-outline-offset-top: rem(2px);
            $focus-outline-offset-left: rem(2px);

            &::after {
                content: '';
                position: absolute;
                top: -$focus-outline-offset-top;
                inset-inline-start: -$focus-outline-offset-left;
                box-shadow: 0 0 0 rem(1px) var-get($theme, 'focus-outline-color');
                width: calc(100% + (#{$focus-outline-offset-left} * 2));
                height: calc(100% + (#{$focus-outline-offset-top} * 2));
            }

            %radio-composite {
                &::before {
                    background: var-get($theme, 'hover-color');
                    transform: $radio-hover-scale;
                }
            }
        }

        @if $variant == 'bootstrap' {
            %radio-composite {
                border-radius: $border-radius;
                box-shadow: 0 0 0 rem(2px) var-get($theme, 'focus-outline-color');
            }
        }

        @if $variant == 'indigo-design' {
            %radio-composite {
                border-radius: $border-radius;
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color');
            }
        }
    }

    %igx-radio--focused-checked {
        @if $variant == 'fluent' {
            %radio-composite--x {
                &::before {
                    background: var-get($theme, 'fill-color');
                }

                &::after {
                    border: $border-width $border-style var-get($theme, 'fill-color');
                }
            }
        }

        @if $variant == 'indigo-design' {
            %radio-composite {
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
            }
        }
    }

    %igx-radio--focused--invalid {
        @if $variant == 'bootstrap' {
            %radio-composite {
                box-shadow: 0 0 0 rem(2px) var-get($theme, 'error-color-hover');
            }
        } @else if $variant == 'indigo-design' {
            %radio-composite {
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'error-color-hover');
            }
        } @else if $variant == 'fluent' {
            %radio-composite {
                &::after {
                    border: $border-width $border-style var-get($theme, 'error-color');
                }

                &::before {
                    background: var-get($theme, 'error-color');
                }
            }
        }
    }

    %igx-radio--focused--invalid--checked {
        %radio-composite {
            &::after {
                border: $border-width $border-style var-get($theme, 'error-color');
            }

            &::before {
                background: var-get($theme, 'error-color');
                border-color: var-get($theme, 'error-color');
            }

            @if $variant == 'bootstrap' {
                &::before {
                    background: white;
                }
            }
        }

        @if $variant == 'fluent' {
            %radio-composite {
                &::after {
                    border: $border-width $border-style var-get($theme, 'error-color-hover');
                }

                &::before {
                    background: var-get($theme, 'error-color-hover');
                }
            }
        }
    }

    %radio-ripple--hover {
        background: var-get($theme, 'empty-color');
        transition: background .2s $ease-out-quad;
        opacity: .06;

        @if $theme-variant == 'dark' {
            opacity: .12;
        }
    }

    %radio-ripple--hover-checked {
        background: var-get($theme, 'fill-color');
    }

    %radio-ripple--hover-invalid {
        background: var-get($theme, 'error-color');
    }

    %radio-ripple--focused {
        background: var-get($theme, 'empty-color');
        transition: background .2s $ease-out-quad;
        opacity: .12;

        @if $theme-variant == 'dark' {
            opacity: .24;
        }
    }

    %radio-ripple--focused-checked {
        background: var-get($theme, 'fill-color');
    }

    %radio-ripple--focused-invalid {
        background: var-get($theme, 'error-color');
    }

    %radio-ripple--pressed {
        opacity: .12;

        @if $theme-variant == 'dark' {
            opacity: .24;
        }
    }

    %radio-group-display {
        display: block;
        %radio-display:not(:last-of-type) {
            margin-inline-end: $horizontal-group-margin;
        }
    }

    %radio-group-display--vertical {
        display: flex;
        flex-flow: column;
        %radio-display:not(:last-of-type) {
            margin-inline-end: 0;
            margin-block-end: $vertical-group-margin;
        }
    }
}

/// Adds typography styles for the igx-radio component.
/// Uses the 'subtitle-1' category from the typographic scale.
/// @group typography
/// @param {Map} $categories [(label: 'subtitle-1')] - The categories from the typographic scale used for type styles.
@mixin radio-typography(
    $categories: (label: 'subtitle-1')
) {
    $label: map.get($categories, 'label');

    %radio-label {
        @include type-style($label) {
            margin-top: 0;
            margin-bottom: 0;
        }
    }
}
