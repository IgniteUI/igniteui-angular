@use '../../base' as *;
@use '../../themes/schemas' as *;
@use '../../typography/base' as *;
@use 'sass:map';
@use 'sass:meta';

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// @param {Map} $palette [null] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
/// @param {Map} $elevations [null] - The elevations (shadows) map to be used.
///
/// @param {Color} $background [null] - The navigation drawer background color.
/// @param {Color} $border-color [null] - The navigation drawer right border color.
/// @param {Color} $item-header-text-color [null] - The header's idle text color.
/// @param {Color} $item-text-color [null] - The item's idle text color.
/// @param {Color} $item-icon-color [null] - The item's icon color.
/// @param {Color} $item-active-text-color [null] - The item's active text color.
/// @param {Color} $item-active-background [null] - The item's active background color.
/// @param {Color} $item-active-icon-color [null] - The item's icon active color.
/// @param {Color} $item-hover-background [null] - The item's hover background color.
/// @param {Color} $item-hover-text-color [null] - The item's hover text color.
/// @param {Color} $item-hover-icon-color [null] - The item's hover icon color.
/// @param {Color} $shadow [null] - Sets a custom shadow to be used by the drawer.
/// @param {border-radius} $border-radius [null] - The border radius used for the navdrawer.
/// @param {border-radius} $item-border-radius [null] - The border radius used for the navdrawer item.
///
/// @requires $default-palette
/// @requires $light-schema
/// @requires apply-palette
/// @requires extend
/// @requires text-contrast
/// @requires elevation
///
/// @example scss Change the background and item colors
///   $navdrawer-theme: navdrawer-theme(
///     $background: #2d313a,
///     $item-active-background: #ecc256,
///     $item-icon-color: #ecc256
///   );
///   // Pass the theme to the navdrawer component mixin
///   @include navdrawer($navdrawer-theme);
@function navdrawer-theme(
    $palette: null,
    $schema: $light-schema,
    $elevations: null,

    $border-radius: null,
    $item-border-radius: null,

    $background: null,
    $border-color: null,

    $item-header-text-color: null,
    $item-text-color: null,
    $item-icon-color: null,

    $item-active-text-color: null,
    $item-active-background: null,
    $item-active-icon-color:null,

    $item-hover-background: null,
    $item-hover-text-color: null,
    $item-hover-icon-color: null,
    $shadow: null
) {
    $name: 'igx-nav-drawer';
    $navdrawer-schema: ();

    @if map.has-key($schema, $name) {
        $navdrawer-schema: map.get($schema, $name);
    } @else {
        $navdrawer-schema: $schema;
    }

    $theme: apply-palette($navdrawer-schema, $palette);

    @if not($item-header-text-color) and $background {
        $item-header-text-color: text-contrast($background);
    }

    @if not($item-text-color) and $background {
        $item-text-color: text-contrast($background);
    }

    @if not($item-icon-color) and $background {
        $item-icon-color: text-contrast($background);
    }

    @if not($item-active-background) and $background {
        @if meta.type-of($background) == 'color' {
            $item-active-background: rgba(text-contrast($background), .24);
        }
    }

    @if not($item-active-text-color) and $item-active-background {
        $item-active-text-color: text-contrast($item-active-background);
    }

    @if not($item-active-icon-color) and $item-active-background {
        $item-active-icon-color: text-contrast($item-active-background);
    }

    @if not($item-hover-background) and $background {
        @if meta.type-of($background) == 'color' {
            $item-hover-background: rgba(text-contrast($background), .08);
        }
    }

    @if not($item-hover-text-color) and $background {
        $item-hover-text-color: text-contrast($background);
    }

    @if not($shadow) {
        $elevation: map.get($navdrawer-schema, 'elevation');
        $shadow: elevation($elevations, $elevation);
    }

    @return extend($theme, (
        name: $name,
        palette: $palette,
        border-radius: $border-radius,
        item-border-radius: $item-border-radius,
        background: $background,
        border-color: $border-color,
        item-text-color:$item-text-color,
        item-active-text-color: $item-active-text-color,
        item-active-background: $item-active-background,
        item-hover-background: $item-hover-background,
        item-hover-text-color:$item-hover-text-color,
        item-header-text-color:$item-header-text-color,
        item-icon-color:$item-icon-color,
        item-active-icon-color:$item-active-icon-color,
        item-hover-icon-color: $item-hover-icon-color,
        shadow: $shadow,
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} css-vars
/// @requires rem
/// @requires var-get
@mixin navdrawer($theme) {
    @include css-vars($theme);

    $drawer-icon-size: rem(24px);
    $drawer-item-margin: rem(8px);
    $text-side-padding: rem(8px);
    $drawer-item-min-h: auto;
    $drawer-item-max-h: rem(48px);
    $drawer-item-min-w: rem(32px);

    $variant: map.get($theme, variant);

    %navdrawer-display {
        transition: flex-basis;
        transition-duration: .3s;
        transition-timing-function: $ease-out-quad;
        flex-shrink: 0;
    }

    %aside {
        position: fixed;
        height: 100%;
        max-width: 90%;
        min-height: 100%;
        overflow-x: hidden;
        background: var-get($theme, 'background');
        top: 0;
        bottom: 0;
        inset-inline-start: 0;
        z-index: 999;
        transition: width, transform;
        transition-timing-function: $ease-out-quad, $ease-out-quad;
        box-shadow: var-get($theme, 'shadow');
        @if $variant != 'indigo-design' {
            border-inline-end: 1px solid var-get($theme, 'border-color');
        }
        border-radius: border-radius(var-get($theme, 'border-radius'));
    }

    %aside-panning {
        overflow-x: hidden;
        transition: none;
    }

    %aside--pinned {
        position: relative;
        max-width: 100%;
        box-shadow: none;
        z-index: 0;
    }

    %aside--collapsed--right {
        transform: translate3d(300px, 0, 0);
        box-shadow: none;

        [dir='rtl'] & {
            transform: translate3d(-300px, 0, 0);
        }
    }

    %igx-nav-drawer__aside--collapsed {
        transform: none;
        width: 0;
        overflow: hidden;
        border: none;
    }

    %aside--collapsed {
        transform: translate3d(-300px, 0, 0);

        [dir='rtl'] & {
            transform: translate3d(300px, 0, 0);
        }

        box-shadow: none;
    }

    %aside--right {
        inset-inline-start: auto;
        inset-inline-end: 0;
        border-inline-end: none;
        border-inline-start: 1px solid var-get($theme, 'border-color');
    }

    %aside--mini {
        width: rem(60px);
        transition-duration: .2s, .2s;

        %item {
            justify-content: center;
            @if $variant == 'indigo-design' {
                max-width: rem(32px);
                // important is needed to override the typography margins
                margin: rem(14px) auto !important;
            }

            igx-icon {
                margin-inline-start: 0;
            }
        }
    }

    %aside--normal {
        width: rem(242px);
        transition-duration: .3s, .3s;
    }

    %overlay {
        opacity: 1;
        background: color(map.get($theme, 'palette'), 'grays', 500, .54);
        transition: opacity, visibility;
        transition-duration: .25s, .25s;
        transition-timing-function: ease-in, step-start;
        transition-delay: 0s, 0s;
        position: absolute;
        inset-inline-start: 0;
        top: 0;
        width: 100%;
        height: 100%;
        visibility: visible;
        z-index: 999;
    }

    %overlay-panning {
        transform: translate3d(0, 0, 0);
        transition: none;
    }

    %overlay--hidden {
        transition-timing-function: ease-in-out, step-end;
        visibility: hidden;
        opacity: 0;
    }

    %overlay-panning--hidden {
        /* must be visible during pan.. */
        visibility: visible;
    }

    %item {
        position: relative;
        display: flex;
        align-items: center;
        flex-flow: row nowrap;
        color: var-get($theme, 'item-text-color');
        max-height: $drawer-item-max-h;
        min-width: $drawer-item-min-w;

        @if $variant != 'indigo-design' {
            // important is needed to override the typography margins
            margin: $drawer-item-margin !important;
            padding: rem(12px) rem(8px);
            gap: rem(32px);
        } @else {
            // important is needed to override the typography margins
            margin: rem(15px) $drawer-item-margin !important;
            padding: rem(4px);
            gap: calc(32px - #{$text-side-padding});
        }

        cursor: pointer;
        user-select: none;
        outline: transparent;
        white-space: nowrap;
        border-radius: border-radius(var-get($theme, 'item-border-radius'));
        text-decoration: none;
        width: calc(100% - #{$drawer-item-margin * 2});
        border: none;
        justify-content: flex-start;

        igx-icon {
            color: var-get($theme, 'item-icon-color');
            @if $variant == 'indigo-design' {
                margin-inline-start: rem(4px);
            }
        }

        span {
            @if $variant == 'indigo-design' {
                padding-inline-start: $text-side-padding;
            }
        }

        // Need this to override the igx-buttons
        &[igxButton] {
            background: transparent;
            border: none;
        }

        &%igx-button--fab {
            min-height: $drawer-item-min-h;
        }

        &%igx-button--icon {
            height: auto;
            transition: none;
        }

        &:hover,
        &:focus {
            background: var-get($theme, 'item-hover-background');
            color: var-get($theme, 'item-hover-text-color');
            box-shadow: none;

            igx-icon {
                color: var-get($theme, 'item-hover-icon-color');
            }
        }
    }

    %item--active {
        // should be app primary color
        color: var-get($theme, 'item-active-text-color');
        background: var-get($theme, 'item-active-background');

        igx-icon {
            color: var-get($theme, 'item-active-icon-color');
        }

        &:focus,
        &:hover {
            color: var-get($theme, 'item-active-text-color');
            background: var-get($theme, 'item-active-background');

            igx-icon {
                color: var-get($theme, 'item-active-icon-color');
            }
        }
    }

    %item,
    %item--active {
        // Need this to override the igx-buttons
        &[igxButton] {
            box-shadow: none;

            igx-icon {
                width: var(--igx-icon-size, #{$drawer-icon-size});
                height: var(--igx-icon-size, #{$drawer-icon-size});
                font-size: var(--igx-icon-size, #{$drawer-icon-size});
                margin: 0;
            }

            &:hover,
            &:focus {
                box-shadow: none;
                border: none;
            }
        }
    }

    %item--header {
        display: block;
        padding: rem(12px) rem(16px);
        white-space: nowrap;
        color: var-get($theme, 'item-header-text-color');
    }

    %style-dummy {
        height: 0;
        background: none;
        box-shadow: none;
        transition: none;
        visibility: hidden;
    }

    %disable-animation {
        transition-duration: 0s;
    }
}

/// Adds typography styles for the igx-navdrawer component.
/// Uses the 'subtitle-1', 'subtitle-2'
/// category from the typographic scale.
/// @group typography
/// @param {Map} $type-scale - A typographic scale as produced by igx-type-scale.
/// @param {Map} $categories [(item: 'subtitle-2', header: 'subtitle-1')] - The categories from the typographic scale used for type styles.
/// @requires {mixin} type-style
@mixin navdrawer-typography(
    $type-scale,
    $categories: (
        item: 'subtitle-2',
        header: 'subtitle-1'
    )
) {
    $item: map.get($categories, 'item');
    $header: map.get($categories, 'header');

    %item {
        @include type-style($type-scale, $item);
    }

    %item--header {
        @include type-style($type-scale, $header) {
            margin: 0;
        }
    }
}
