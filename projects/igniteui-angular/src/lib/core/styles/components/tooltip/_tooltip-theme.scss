@use '../../base' as *;
@use '../../themes/schemas' as *;
@use '../../typography/base' as *;
@use 'sass:map';

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// Returns a map containing all style properties related to the theming the tooltip directive.
/// @param {Map} $palette [null] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $background [null] - The background color of the tooltip.
/// @param {Color} $text-color [null] - The text color of the tooltip.
///
/// @param {border-radius} $border-radius [null] - The border radius used for the tooltip component.
///
/// @requires $default-palette
/// @requires $light-schema
/// @requires apply-palette
/// @requires extend
/// @requires text-contrast
///
/// @example scss Change the tooltip background
///   $my-tooltip-theme: tooltip-theme($background: magenta);
///   // Pass the theme to the tooltip component mixin
///   @include tooltip($my-checkbox-theme);
@function tooltip-theme(
    $palette: null,
    $schema: $light-schema,

    $border-radius: null,
    $background: null,
    $text-color: null
) {
    $name: 'igx-tooltip';
    $selector: '.igx-tooltip--desktop, .igx-tooptip--mobile';

    $tooltip-schema: ();

    @if map.has-key($schema, $name) {
        $tooltip-schema: map.get($schema, $name);
    } @else {
        $tooltip-schema: $schema;
    }

    $theme: apply-palette($tooltip-schema, $palette);

    @if not($text-color) and $background {
        $text-color: text-contrast($background);
    }

    @return extend($theme, (
        name: $name,
        selector: $selector,
        palette: $palette,
        background: $background,
        border-radius: $border-radius,
        text-color: $text-color,
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} css-vars
/// @requires var-get
@mixin tooltip($theme) {
    @include css-vars($theme);

    %tooltip-display {
        display: inline-flex;
        justify-content: center;
        flex-flow: column wrap;
        background: var-get($theme, 'background');
        color: var-get($theme, 'text-color');
        border-radius: border-radius(var-get($theme, 'border-radius'));
        margin: 0 auto;
    }

    %tooltip--desktop {
        padding: 0 rem(8px);
        min-height: rem(24px);
    }

    %tooltip--mobile {
        padding: 0 rem(16px);
        min-height: rem(32px);
    }

    %tooltip--hidden {
        display: none;
    }
}

/// Adds typography styles for the igx-tooltip component.
/// Uses the 'body-2' category from the typographic scale for mobile tooltips and custom typography for desktop tooltips.
/// @group typography
/// @param {Map} $type-scale - A typographic scale as produced by igx-type-scale.
/// @param {Map} $categories [(text-desktop: null, text-mobile: 'body-2')] - The categories from the typographic scale used for type styles.
/// @requires rem
/// @requires {mixin} type-style
@mixin tooltip-typography(
    $type-scale,
    $categories: (text-desktop: null, text-mobile: 'body-2')
) {
    $text-desktop: map.get($categories, 'text-desktop');
    $text-mobile: map.get($categories, 'text-mobile');

    %tooltip--mobile {
        @include type-style($type-scale, $text-mobile);
    }

    @if $text-desktop != null {
        %tooltip--desktop {
            @include type-style($type-scale, $text-desktop);
        }
    } @else {
        %tooltip--desktop {
            font-size: rem(10px);
            font-weight: 600;
        }
    }
}
