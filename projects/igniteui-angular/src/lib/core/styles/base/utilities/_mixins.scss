@use '../variables' as *;
@use 'functions' as *;
@use 'sass:color';
@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:string';

////
/// @group Utilities
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
////

/// @access private
@mixin icon-w-margin($margin, $left) {
    > * {
        margin-#{$left}: $margin;

        &:first-child {
            margin-#{$left}: 0;
        }
    }
}

/// Hides the element from the DOM.
/// @access public
/// @example scss - Sample usage
///   input[type="checkbox"] {
///     @include hide-default();
///   }
@mixin hide-default {
    position: absolute;
    width: 1px;
    height: 1px;
    margin: -1px;
    border: none;
    clip: rect(0, 0, 0, 0);
    outline: 0;
    pointer-events: none;
    overflow: hidden;
    appearance: none;
}

/// Generates a linear gradient.
/// @access public
/// @param {string} $direction - The direction of the gradient.
/// @param {List} $color-stops - A list of color stops to be used in the gradient.
/// @example scss - Sample usage
///   .bozo {
///     background: @include linear-gradient("to right", red, orange);
///   }
/// @outputs The CSS representation of linear-gradient.
@mixin linear-gradient($direction, $color-stops...) {
    // Direction has been omitted and happens to be a color-stop
    @if is-direction($direction) == false {
        $color-stops: $direction, $color-stops;
        $direction: 180deg;
    }
    background: linear-gradient($direction, $color-stops);
}

/// Registers a keyframes animation in the global keyframes registry list.
/// @access public
/// @group animations
/// @param {String} $name - The name of the keyframes animation.
@mixin keyframes($name) {
    $keyframe: map.get($keyframes, $name);

    @if $keyframe == null {
        $keyframe: string.unique-id();
        $keyframes: map.merge($keyframes, (#{$name}: $keyframe)) !global;

        @at-root {
            @keyframes #{$name} {
                @content;
            }
        }
    }
}

/// Registers a component to the list of known components.
/// @access private
/// @param {String} $name - The component name to register.
@mixin register-component($name, $deps: ()) {
    $component: map.get($components, $name);

    @if $component == null {
        $components: map.merge($components, (
            #{$name}: (
                usedBy: ()
            ),
        )) !global;
    }

    @each $dep in $deps {
        @include register-component($dep);

        @if map.has-key($components, $dep) {
            $component: map.get($components, $dep);
            $usedBy: map.get($component, 'usedBy');

            $components: map.merge($components, (
                #{$dep}: map.merge($component, (
                    usedBy: list.append($usedBy, $name, $separator: comma)
                ))
            )) !global;
        }
    }
}

/// Animates an element.
/// @access public
/// @group animations
/// @param {List} $animate - The list of animation properties.
/// @example scss - Animating an element
///  @include fade-in(); // include the 'fade-in' keyframes animation mixin
///
///  .bozo {
///     @include animation('fade-in' .3s ease-out);
///  }
@mixin animation($animate...) {
    $max: list.length($animate);
    $animations: '';
    @for $i from 1 through $max {
        $animations: #{$animations + list.nth($animate, $i)};
        @if $i < $max {
            $animations: #{$animations + ', '};
        }
    }
    animation: $animations;
}

/// Applies text-overflow ellipsis to e text element.
/// This won't work on display flex elements.
/// @access public
@mixin ellipsis() {
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

/// Generates a CSS class name for a color from a
/// given name, variant, prefix and suffix
/// @access private
/// @param {string} $name - The main class name.
/// @param {string} $variant - An additional string to be attached to the main class name.
/// @param {string} $prefix - A prefix to be attached to the name and variant string.
/// @param {string} $prefix - A suffix to be attached to the name and variant string.
@mixin gen-color-class($name, $variant, $prefix, $suffix) {
    $prefix: if($prefix, '#{$prefix}-', '');
    $suffix: if($suffix, '-#{$suffix}', '');

    .#{$prefix}#{$name}-#{$variant}#{$suffix} {
        @content;
    }
}

// stylelint-disable max-nesting-depth
/// Generates CSS class names for all colors from
/// for a given property and color palette, with
/// optional prefix and suffix attached to the class name.
/// @access private
/// @param {string} $prop - The CSS property to assign the palette color to.
/// @param {string} $prefix - A prefix to be attached to the class name.
/// @param {string} $suffix - A suffix to be attached to the class name.
/// @param {Map} $palette [$default-palette] - The igx palette to use to generate css class names for.
/// @example scss Generate background classes with colors from the palette.
///   // Will generate class names like
///   // .my-primary-500-bg { ... };
///   @include gen-color-classes(
///     $prop: 'background-color',
///     $prefix: 'my',
///     $suffix: 'bg'
///   );
/// @requires {mixin} gen-color-class
@mixin gen-color-classes($prop, $prefix, $suffix, $palette: $default-palette) {
    @each $name, $color in $palette {
        @each $variant, $value in $color {
            @if meta.type-of($value) != 'map' {
                @include gen-color-class($name, $variant, $prefix, $suffix) {
                    @if legacy() {
                        #{$prop}: igx-color($palette, $color: $name, $variant: $variant);
                    } @else {
                        #{$prop}: igx-color($color: $name, $variant: $variant);
                    }
                }
            }
        }
    }
}

/// Generates CSS variables for a given palette.
/// @access public
/// @param {Map} $palette [null] - The igx palette to use to generate CSS variables for.
/// @param {bool} $contrast [true] - Specify if contrast colors should be included.
///
/// @example scss Generate css variables for the `$default-palette`.
///    @include igx-palette-vars($default-palette);
///
@mixin igx-palette-vars($palette, $contrast: true) {
    $scope: if(is-root(), ':root', '&');
    $_meta: map.get($palette, '_meta');
    $theme: if($_meta, map.get($_meta, 'variant'), null);
    $gray: if($_meta, map.get($_meta, 'grays'), #fff);

    #{$scope} {
        @each $name, $color in $palette {
            @each $variant, $value in $color {
                $_valid-base: meta.type-of(map.get($color, 500)) == 'color' and $theme;
                $_valid-variant: not(string.index(#{$variant}, 'contrast')) and not(string.index(#{$variant}, 'variant')) and $theme;

                @if $_valid-base and $variant == 500 {
                    --igx-#{$name}-h: #{math.round(color.hue($value))};
                    --igx-#{$name}-s: #{math.round(color.saturation($value))};
                    --igx-#{$name}-l: #{math.round(color.lightness($value))};

                    @if $name != 'grays' {
                        --igx-#{$name}-a: #{color.alpha($value)};
                    } @else {
                        --igx-#{$name}-a: 1;
                    }
                }

                @if $_valid-base and $_valid-variant {
                    --igx-#{$name}-#{$variant}: #{gen-hsla-color($name, $variant, $theme, $gray)};
                } @else if $name != '_meta' {
                    --igx-#{$name}-#{$variant}: #{$value};
                }
            }
        }
    }
}
// stylelint-enable max-nesting-depth

/// Generates CSS variables for a given elevations map.
/// @access public
/// @param {Map} $elevations - The igx elevations map to use to generate CSS variables for.
///
/// @example scss Generate CSS variables for elevations.
///    $elevations: igx-elevations(red, green, blue); // umbra, penumbra, ambient
///    @include igx-elevation-vars($elevations);
///
@mixin igx-elevation-vars($elevations) {
    $scope: if(is-root(), ':root', '&');

    #{$scope} {
        @each $level, $shadow in $elevations {
            --igx-elevation-#{$level}: #{$shadow};
        }
    }
}

/// Generates CSS class names for all colors from
/// for a given property and color palette, with
/// optional prefix and suffix attached to the class name.
/// @access public
/// @param {string} $prop - The CSS property to assign the palette color to.
/// @param {string} $prefix [igx] - A prefix to be attached to the class name.
/// @param {string} $suffix [null] - A suffix to be attached to the class name.
/// @param {Map} $palette [$default-palette] - The igx palette to use to generate css class names for.
/// @example scss Generate background classes with colors from the palette.
///   // Will generate class names like
///   // .igx-primary-500-bg { ... };
///   @include igx-color-classes(
///     $prop: 'background-color',
///     $suffix: 'bg'
///   );
/// @requires {mixin} gen-color-classes
@mixin igx-color-classes($prop, $suffix: null, $prefix: 'igx', $palette: $default-palette) {
    @include gen-color-classes($prop, $prefix, $suffix, $palette);
}

/// Parses a map of key value pairs
/// from component themes to css variables.
/// @access private
/// @param {map} $theme - The component theme to be used to generate css variables.
/// @example scss Convert theme colors to css variables.
///   $my-theme: igx-avatar-theme($icon-color: red);
///   :root {
///     @include css-vars-from-theme($my-theme);
///   }
@mixin css-vars-from-theme($theme, $prefix: null) {
    $name: map.get($theme, 'name');
    $ignore: ('name', 'palette', 'variant', 'selector');
    $webc-prefix: 'igc';
    $webc: list.nth(str-split($name, '-'), 1) == $webc-prefix;
    $themes: map.get($theme, 'themes');

    @if not($prefix) and $webc {
        $prefix: $webc-prefix;
    }

    @if not($name) or string.length($name) == 0 {
        @error 'Theme should have a non-null or empty name property. Example: my-theme: (name: my-theme)';
    }

    @if $themes and meta.type-of($themes) == 'map' {
        @each $theme in $themes {
            @include igx-css-vars(list.nth($theme, 2));
        }
    }

    @each $key, $value in $theme {
        $elevation: string.index($key, 'elevation');

        @if not(list.index($ignore, $key) or $elevation) and meta.type-of($value) != 'map' {
            @if $prefix {
                --#{$prefix}-#{$key}: var(--#{$name}-#{$key}, #{$value});
            } @else {
                --#{$key}: var(--#{$name}-#{$key}, #{$value});
            }
        }
    }
}

/// Add theme colors to a scope.
/// @access public
/// @param {map} $theme - The component theme to be used
/// @requires {mixin} css-vars-from-theme
@mixin igx-css-vars($theme, $scope: null, $prefix: null) {
    $s: map.get($theme, 'selector');
    $n: map.get($theme, 'name');
    $name: if($scope, $scope, $s or $n);

    @if not(legacy()) {
        @if is-root() {
            #{$name} {
                @include css-vars-from-theme($theme, $prefix);
            }
        } @else {
            &,
            #{$name} {
                @include css-vars-from-theme($theme, $prefix);
            }
        }
    }
}

/// Scopes CSS rules to a predefined top-level parent selector.
/// Respects specificity and selector scopes.
/// @access private
/// @param {String} $parent - The selector to be used as top level scope.
/// @example scss Apply mixin style rules only when '.igx-typography' selector is present.
///    @mixin igx-card-typography {
///       @include igx-scope('.igx-typography') {
///         // style rules...
///       }
///    }
///
///    // Later
///    .my-selector {
///      @include igx-card-typography();
///    }
///
///    // Generated CSS
///    // .igx-typography .my-selector {
///    //    ...styles rules as output by igx-card-typography mixin
///    // }
@mixin igx-scope($parent) {
    @each $selector in & {
        $len: list.length($selector);
        @if $len == null {
            $parent: $parent;
        } @else {
            @for $i from 1 through $len {
                $parent: list.append($parent, list.nth($selector, $i));
            }
        }

        @at-root #{$parent} {
            @content;
        }
    }
}

/// Compiles the passed content to CSS only if
/// the global $direction variable is set to 'ltr'.
/// @example scss Include content only if $direction is set to ltr (default)
///    @include if-ltr {
///      margin-right: 8px;
///    }
@mixin if-ltr {
    $dir: if(meta.global-variable-exists('direction'), $direction, 'ltr');

    @if $dir != 'rtl' {
        @content;
    }
}

/// Compiles the passed content to CSS only if
/// the global $direction variable is set to 'rtl'.
/// @example scss Include content only if $direction is set to rtl
///    @include if-rtl {
///      margin-left: 8px;
///    }
@mixin if-rtl {
    $dir: if(meta.global-variable-exists('direction'), $direction, 'ltr');

    @if $dir == 'rtl' {
        @content;
    }
}

/// Truncates text at a specific number of lines
/// @param {number|string} $lines - The number of lines to show
/// @param {Boolean} $inline - Sets whether an element displays inline-box or box
/// @param {Boolean} $vertical - Sets whether an element lays out its contents horizontally or vertically
/// @example scss Truncates text after the fourth line
///    @include line-clamp(4, true, true);
@mixin line-clamp($lines, $inline, $vertical) {
    display: if($inline, -webkit-inline-box, -webkit-box);
    -webkit-line-clamp: if($lines, $lines, initial);
    -webkit-box-orient: if($vertical, vertical, initial);
    overflow: hidden;
}
