@use '../../base' as *;
@use '../../themes/schemas' as *;
@use '../../typography/base' as *;
@use 'sass:map';

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// @param {Map} $palette [null] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $label-color [null] - sets the color for the label.
/// @param {Number} $symbol-size [null] - the size of the symbols.
/// @param {Color} $symbol-empty-color [null] - sets the idle color for the symbol when it is a plane text.
/// @param {Color} $symbol-full-color [null] - sets the color in selected state for the symbol when it is a plane text.
/// @param {Color} $symbol-empty-filter [null] - the filter(s) used for the empty symbol.
/// @param {Color} $symbol-full-filter [null] - the filter(s) used for the filled symbol.
/// @param {Color} $disabled-label-color [null] - sets the color for the label in disabled state.
/// @param {Color} $disabled-empty-symbol-color [null] - sets the idle color for the symbol in disabled state when it is a plane text.
/// @param {Color} $disabled-full-symbol-color [null] - sets the color for the symbol in selected/disabled state when it is a plane text.
///
/// @requires $light-schema
/// @requires extend
///
/// @example scss
///   $my-rating-theme: rating-theme();
///   @include rating($my-rating-theme);
@function rating-theme(
    $palette: null,
    $schema: $light-schema,
    $rest...
) {

    $name: 'igc-rating';
    $rating-schema: ();

    @if map.has-key($schema, $name) {
        $rating-schema: map.get($schema, $name);
    } @else {
        $rating-schema: $schema;
    }

    $theme: apply-palette($rating-schema, $palette);

    @return extend($theme, (name: $name), keywords($rest));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} css-vars
/// @requires var-get
@mixin rating($theme) {
    @include css-vars($theme: $theme, $prefix: ignore);

    igc-rating::part(label) {
        color: var-get($theme, 'label-color');
    }

    igc-rating::part(value-label) {
        color: color(map.get($theme, 'palette'), 'grays', 900);
    }
    
    igc-rating[disabled]::part(label),
    igc-rating[disabled]::part(value-label) {
        color: var-get($theme, 'disabled-label-color');
    }

    igc-rating[disabled] {
        --symbol-empty-color: var(--disabled-empty-symbol-color);
        --symbol-full-color: var(--disabled-full-symbol-color);
        --symbol-empty-filter: grayscale(100%) opacity(50%);
        --symbol-full-filter: grayscale(50%);
    }
}

