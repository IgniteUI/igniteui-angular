@use '../../base' as *;
@use '../../typography/base' as *;
@use '../../themes/schemas' as *;
@use '../ripple/ripple-theme' as *;
@use '../ripple/ripple-component' as *;
@use 'sass:map';
@use 'sass:meta';

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// If only background color is specified,
/// the idle item color will be assigned automatically to a contrasting color.
///
/// @param {Map} $palette [null] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
///
/// @param {Color} $item-text-color [null] - The color used for the tab text color.
/// @param {Color} $item-background [null] - The background color used for the tabs header.
/// @param {Color} $item-hover-background [null] - The background used for the tabs on hover.
/// @param {Color} $item-hover-color [null] - The text color used for the tabs on hover.
///
/// @param {Color} $item-active-color [null] - The color used for the active tabs text.
/// @param {Color} $item-active-icon-color [null] - The color used for the active tabs icon.
/// @param {Color} $item-active-background [null] - The color used for the active/focused tab background.
///
/// @param {Color} $indicator-color [null] - The color used for the active tab indicator.
/// @param {Color} $button-color [null] - The color used for the button icon/text color.
/// @param {Color} $button-hover-color [null] - The color used for the button icon/text color on hover.
/// @param {Color} $button-background [null] - The color used for the button background.
/// @param {Color} $button-hover-background [null] - The color used for the button background on hover.
///
/// @param {border-radius} $border-radius [null] - The border radius for the tabs.
/// @param {Color} $border-color [null] - The border color of the tabs.
/// @param {Color} $border-color--hover [null] - The border color of the tabs on hover.
///
/// @param {Color} $tab-ripple-color [null] - The color used for the button background.
/// @param {Color} $button-ripple-color [null] - The color used for the button background on hover.
/// @param {Bool} $disable-shadow [true] - Sets the tabs header shadow visibility.
///
/// @requires $default-palette
/// @requires $light-schema
/// @requires apply-palette
/// @requires extend
/// @requires elevation
/// @requires text-contrast
///
/// @example scss Set a custom background color
///   $my-tabs-theme: tabs-theme(
///      $item-background: orange
///    );
///   // Pass the theme to the tabs component mixin
///   @include tabs($my-tabs-theme);
@function tabs-theme(
    $palette: null,
    $schema: $light-schema,
    $item-text-color: null,
    $item-background: null,
    $item-hover-background: null,
    $item-hover-color: null,
    $item-active-color: null,
    $item-active-icon-color: null,
    $item-active-background: null,
    $indicator-color: null,
    $button-color: null,
    $button-background: null,
    $button-hover-background: null,
    $button-hover-color: null,
    $tab-ripple-color: null,
    $button-ripple-color: null,
    $border-radius: null,
    $border-color: null,
    $border-color--hover: null,
    $disable-shadow: true
) {
    $name: 'igx-tabs';
    $tabs-schema: ();

    @if map.has-key($schema, $name) {
        $tabs-schema: map.get($schema, $name);
    } @else {
        $tabs-schema: $schema;
    }

    $theme: apply-palette($tabs-schema, $palette);

    $variant: map.get($theme, variant);
    $bootstrap-theme: $variant == 'boostrap';

    $tab-area-shadow: if($disable-shadow == true, none, elevation($elevation: 1));
    $buttons-shadow: if($disable-shadow == true, none, elevation($elevation: 4));

    @if not($item-text-color) and $item-background {
        @if meta.type-of($item-background) == 'color' {
            $item-text-color: rgba(text-contrast($item-background), .54);
        }
    }

    @if not($item-hover-color) and $item-background {
        $item-hover-color: text-contrast($item-background);
    }

    @if not($item-hover-color) and $item-hover-background {
        $item-hover-color: text-contrast($item-hover-background);
    }

    @if not($item-active-icon-color) and $item-active-background {
        $item-active-icon-color: text-contrast($item-active-background);
    }

    @if not($item-active-icon-color) and $item-background {
        $item-active-icon-color: text-contrast($item-background);
    }

    @if not($indicator-color) and $item-background {
        $indicator-color: text-contrast($item-background);
    }

    @if not($item-active-color) and $item-active-icon-color {
        $item-active-color: $item-active-icon-color;
    }

    // Button
    @if not($button-color) and $item-background {
        $button-color: text-contrast($item-background);
    }

    @if not($button-color) and $button-background {
        $button-color: text-contrast($button-background);
    }

    @if not($button-color) and $item-background {
        $button-background: transparent;
    }

    @if not($button-hover-color) and $button-hover-background {
        $button-hover-color: text-contrast($button-hover-background);
    }

    @if not($button-hover-background) and $item-background {
        $button-hover-color: text-contrast($item-background);
    }

    @if not($button-background) and $item-background {
        @if meta.type-of($item-background) == 'color' and lightness($item-background) > 50 {
            $button-background: transparent;
        } @else {
            $button-background: rgba(255, 255, 255 , .1);
        }
    }

    @if not($button-hover-background) and $item-background {
        @if meta.type-of($item-background) == 'color' and lightness($item-background) > 50 {
            $button-hover-background: rgba(0, 0, 0, .05);
        } @else {
            $button-hover-background: rgba(255, 255, 255 , .14);
        }
    }

    @if not($button-ripple-color) and $button-background {
        @if meta.type-of($item-background) == 'color' and lightness($item-background) > 50 {
            $button-ripple-color: rgba(0, 0, 0, .4);
        } @else {
            $button-ripple-color: rgba(255, 255, 255, .4);
        }
    }
    // Button end

    @if not($tab-ripple-color) and $item-active-background {
        $tab-ripple-color: text-contrast($item-active-background);
    }

    @if not($tab-ripple-color) and $item-background {
        $tab-ripple-color: text-contrast($item-background);
    }

    @return extend($theme, (
        name: $name,
        palette: $palette,
        item-text-color: $item-text-color,
        item-background: $item-background,
        item-hover-color: $item-hover-color,
        item-hover-background: $item-hover-background,
        item-active-color: $item-active-color,
        item-active-icon-color: $item-active-icon-color,
        item-active-background: $item-active-background,
        indicator-color: $indicator-color,
        button-color: $button-color,
        button-background: $button-background,
        button-hover-background:$button-hover-background,
        button-hover-color:$button-hover-color,
        tab-ripple-color: $tab-ripple-color,
        button-ripple-color: $button-ripple-color,
        tab-area-shadow: $tab-area-shadow,
        buttons-shadow: $buttons-shadow,
        border-color: $border-color,
        border-radius: $border-radius,
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} css-vars
/// @requires {mixin} ellipsis
/// @requires ripple-theme
/// @requires {mixin} ripple
/// @requires elevation
/// @requires rem
/// @requires var-get
@mixin tabs($theme) {
    @include css-vars($theme);

    $variant: map.get($theme, 'variant');
    $not-bootstrap-theme: $variant != 'bootstrap';
    $bootstrap-theme: $variant == 'bootstrap';
    $indigo-theme: $variant == 'indigo-design';

    $item-min-width: 90px;
    $item-max-width: 360px;

    $tabs-animation-function: cubic-bezier(.35, 0, .25, 1);

    $item-padding: rem(11px) rem(16px);

    $tabs-ripple-theme: ripple-theme(
        $schema: $light-schema,
        $color: var-get($theme, 'tab-ripple-color')
    );
    $button-ripple-theme: ripple-theme(
        $schema: $light-schema,
        $color: var-get($theme, 'button-ripple-color')
    );

    $icon-space: (
        comfortable: rem(12px),
        cosy: rem(8px),
        compact: rem(4px)
    );

    %tabs-header,
    %tabs-header-button,
    %tabs-header-item-inner,
    %tabs-header-content {
        display: flex;
    }

    %tabs-display {
        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    %tabs-header {
        overflow: hidden;
        flex: 0 0 auto;
        background: var-get($theme, 'item-background');
        box-shadow: var-get($theme, 'tab-area-shadow');
        min-height: rem(42px);
        z-index: 1;

        @if $bootstrap-theme or $indigo-theme {
            box-shadow: none;
        }
    }

    %tabs-header-content {
        flex: 1 1 auto;
        overflow: hidden;
        scroll-behavior: smooth;
    }

    %tabs-header-wrapper {
        position: relative;
        flex-grow: 1;

        @if $bootstrap-theme or $indigo-theme {
            &::after {
                content: '';
                position: absolute;
                bottom: 0;
                inset-inline-start: 0;
                width: 100%;
                height: 1px;
                background: var-get($theme, 'border-color');
                z-index: 0;
            }
        }
    }

    %tabs-header-scroll {
        display: flex;
        height: 100%;
    }

    %tabs-header-button {
        align-items: center;
        justify-content: center;
        z-index: 1;
        border: none;
        padding: 0;
        min-width: rem(48px);
        width: rem(48px);
        cursor: pointer;
        position: relative;
        background: var-get($theme, 'button-background');
        color: var-get($theme, 'button-color');
        outline: 0;

        @if not $indigo-theme {
            box-shadow: var-get($theme, 'buttons-shadow');
        }

        &:hover {
            background: var-get($theme, 'button-hover-background');
            color: var-get($theme, 'button-hover-color');
        }

        &:focus {
            outline: 0;
            background: var-get($theme, 'button-hover-background');
        }

        &::-moz-focus-inner {
            // remove focus dotted border in firefox
            border: 0;
        }

        &--hidden {
            visibility: hidden;
        }

        &--none {
            display: none;
        }


        @include ripple($button-ripple-theme);
        @include css-vars($button-ripple-theme);

        [dir='rtl'] & {
            transform: scaleX(-1);
        }
    }

    %tabs-header-item {
        > * {
            margin-inline-start: map.get($icon-space, 'comfortable');
    
            &:first-child {
                margin-inline-start: 0;
            }
        }
        display: inline-flex;
        justify-content: center;
        align-items: center;
        min-width: $item-min-width;
        max-width: $item-max-width;
        word-wrap: break-word;
        // Flex basis & shrink are Needed for IE11
        flex-basis: auto;
        flex-shrink: 0;
        padding: $item-padding;
        overflow: hidden;
        cursor: pointer;
        position: relative;

        @if $not-bootstrap-theme {
            transition: all .3s $tabs-animation-function;
        }

        user-select: none;
        background: var-get($theme, 'item-background');
        color: var-get($theme, 'item-text-color');
        outline: 0;

        @if $bootstrap-theme {
            border: 1px solid transparent;
            border-start-start-radius: border-radius(var-get($theme, 'border-radius'));
            border-start-end-radius: border-radius(var-get($theme, 'border-radius'));
        }

        @if $indigo-theme {
            border-bottom: 1px solid var-get($theme, 'border-color');
        }

        &::-moz-focus-inner {
            border: 0;
        }

        &:focus {
            background: var-get($theme, 'item-active-background');
            border-bottom-color: transparent;
        }

        &:hover {
            background: var-get($theme, 'item-hover-background');
            color: var-get($theme, 'item-hover-color');

            @if $bootstrap-theme {
                border-color: var-get($theme, 'border-color--hover') var-get($theme, 'border-color--hover') transparent;
            }
        }

        @if $not-bootstrap-theme {
            border: 1px solid var-get($theme, 'border-color');

            &:hover,
            &:focus {
                border: 1px solid var-get($theme, 'border-color--hover');
            }
        }

        @if $indigo-theme {
            border-top: transparent;
            border-inline: transparent;

            &:hover,
            &:focus {
                border-top: transparent;
                border-inline: transparent;
            }
        }

        @include ripple($tabs-ripple-theme);
        @include css-vars($tabs-ripple-theme);
    }

    %tabs-header-item--selected {
        outline: 0;
        color: var-get($theme, 'item-active-color');

        @if $bootstrap-theme {
            border-color: var-get($theme, 'border-color--hover') var-get($theme, 'border-color--hover') transparent;
        }

        &:focus {
            background: var-get($theme, 'item-active-background');
            color: var-get($theme, 'item-active-color');
        }

        &:hover {
            background: var-get($theme, 'item-active-background');
            color: var-get($theme, 'item-active-color');
        }

        igx-icon {
            color: var-get($theme, 'item-active-icon-color');
        }

        @if $bootstrap-theme {
            background: var-get($theme, 'item-active-background');
            position: relative;
            z-index: 1;
            border-top-color: var-get($theme, 'border-color');
            border-inline-color: var-get($theme, 'border-color');
            border-bottom-color: transparent;

            &::after {
                content: '';
                position: absolute;
                bottom: -1px;
                inset-inline-start: 0;
                width: 100%;
                height: 1px;
                background: var-get($theme, 'item-active-background');
            }

            &:hover,
            &:focus {
                border-top-color: var-get($theme, 'border-color');
                border-inline-color: var-get($theme, 'border-color');
                border-bottom-color: transparent;
            }
        }
    }

    %tabs-header-item--disabled {
        outline: 0;
        @if not $indigo-theme {
            opacity: .5;
        } @else  {
            > * {
                opacity: .4;
            }
        }
        cursor: default;
        pointer-events: none;
    }

    %tabs-header-item-inner {
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;

        > [igxtabheadericon] {
            margin-bottom: rem(8px);

            &:last-child {
                margin-bottom: 0;
            }
        }
    }

    %tabs-header-active-indicator {
        position: absolute;
        bottom: 0;
        // We need to explicitly set the default for IE 11
        left: 0;
        transform: translateX(0);
        height: 2px;
        min-width: $item-min-width;
        background: var-get($theme, 'indicator-color');
        transition: transform .3s $tabs-animation-function, width .2s $tabs-animation-function;
        @if $bootstrap-theme {
            display: none;
        }
    }

    %tabs-panels {
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
    }

    %tabs-panel {
        position: absolute;
        inset: 0;
        overflow-x: hidden;
        overflow-y: auto;
        flex: 1 1 auto;

        &::-moz-focus-inner {
            // remove focus dotted border in firefox
            border: 0;
        }

        &:focus {
            outline-width: 0;
        }

        &[tabindex='0'] {
            position: relative;
        }
    }

    %tabs-header-scroll--start {
        justify-content: flex-start;
    }

    %tabs-header-scroll--end {
        justify-content: flex-end;
    }

    %tabs-header-scroll--center {
        justify-content: center;
    }

    %tabs-header-scroll--justify {
        %tabs-header-item {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }
    }
}

/// Adds typography styles for the igx-tabs component.
/// Uses the 'subtitle-2'
/// category from the typographic scale.
/// @group typography
/// @param {Map} $type-scale - A typographic scale as produced by igx-type-scale.
/// @param {Map} $categories [(label: 'button')] - The categories from the typographic scale used for type styles.
/// @requires {mixin} type-style
@mixin tabs-typography($type-scale, $categories: (label: 'button')) {
    $label: map.get($categories, 'label');

    %tabs-header-item-inner > [igxtabheaderlabel]{
        @include type-style($type-scale, $label) {
            margin-top: 0;
            margin-bottom: 0;
        }
    }
}
