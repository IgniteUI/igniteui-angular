@use 'sass:map';
@use 'sass:math';
@use '../../base' as *;
@use '../ripple/ripple-theme' as *;
@use '../ripple/ripple-component' as *;
@use 'igniteui-theming/sass/animations' as *;
@use '../../themes/schemas' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Color} $thumb-on-color [null] - The color of the thumb when the switch is on.
/// @param {Color} $track-on-color [null] - The color of the track when the switch is on.
/// @param {Color} $track-on-hover-color [null] - The color of the track when the switch is on and hovered.
/// @param {Color} $thumb-off-color [null] - The color of the thumb when the switch is off.
/// @param {Color} $track-off-color [null] - The color of the track when the switch is off.
/// @param {Color} $thumb-disabled-color [null] - The color of the thumb when the switch is disabled.
/// @param {Color} $thumb-on-disabled-color [null] - The color of the thumb when the switch is on and disabled.
/// @param {Color} $track-disabled-color [null] - The color of the track when the switch is disabled.
/// @param {Color} $track-on-disabled-color [null] - The color of the track when the switch is on and disabled.
/// @param {Color} $label-color [null] - The color of the switch label
/// @param {Color} $label-disabled-color [null] - The color of the switch label when the switch is disabled
/// @param {box-shadow} $resting-shadow [null] - The shadow used for the thumb in resting state of the switch.
/// @param {box-shadow} $hover-shadow [null] - The shadow used for the thumb in hover state of the switch.
/// @param {box-shadow} $disabled-shadow [null] - The shadow used for the thumb in disable state of the switch.
/// @param {List} $border-radius-track [null] - The border radius used for switch track.
/// @param {List} $border-radius-thumb [null] - The border radius used for switch thumb.
/// @param {List} $border-radius-ripple [null] - The border radius used for switch ripple.
/// @param {Color} $border-color [null] - The border color of the switch.
/// @param {Color} $border-hover-color [null] - The border color of the switch on hover.
/// @param {Color} $border-disabled-color [null] - The border color of the switch when it is disabled.
/// @param {Color} $border-on-color [null] - The border color when the switch is on.
/// @param {Color} $border-on-hover-color [null] - The border color when the switch is on and hovered.
/// @param {Color} $focus-outline-color [null] - The focus outlined color.
/// @param {Color} $focus-outline-color-focused [null] - The focus outlined color for focused state.
/// @param {Color} $focus-fill-color [null] - The focus fill color.
/// @param {Color} $label-invalid-color [null] - The color of the switch label in invalid state.
/// @param {Color} $track-error-color [null] - The color of the track in invalid state when the switch is off.
/// @param {Color} $thumb-on-error-color [null] - The color of the thumb when the switch is on and invalid.
/// @param {Color} $error-color [null] - The border and fill colors in invalid state.
/// @param {Color} $error-color-hover [null] - The border and fill colors in invalid state on hover.
/// @requires $light-material-schema
///
/// @example scss Set custom track and thumb on colors
///   $my-switch-theme: switch-theme($thumb-on-color: black, $track-on-color: yellow);
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-switch-theme);
@function switch-theme(
    $schema: $light-material-schema,

    $thumb-on-color: null,
    $track-on-color: null,
    $track-on-hover-color: null,

    $thumb-off-color: null,
    $track-off-color: null,

    $track-disabled-color: null,
    $track-on-disabled-color: null,
    $thumb-disabled-color: null,
    $thumb-on-disabled-color: null,

    $label-color: null,
    $label-disabled-color: null,
    $label-invalid-color: null,

    $resting-shadow: null,
    $hover-shadow: null,
    $disabled-shadow: null,

    $border-radius-track: null,
    $border-radius-thumb: null,
    $border-radius-ripple: null,
    $border-color: null,
    $border-hover-color: null,
    $border-disabled-color: null,
    $border-on-color: null,
    $border-on-hover-color: null,
    $focus-outline-color: null,
    $focus-outline-color-focused: null,
    $focus-fill-color: null,
    $track-error-color: null,
    $thumb-on-error-color: null,
    $error-color: null,
    $error-color-hover: null,
) {
    $name: 'igx-switch';
    $switch-schema: ();

    @if map.has-key($schema, 'switch') {
        $switch-schema: map.get($schema, 'switch');
    } @else {
        $switch-schema: $schema;
    }

    $theme: digest-schema($switch-schema);
    $meta: map.get($theme, '_meta');

    @if not($resting-shadow) {
        $resting-elevation: map.get($switch-schema, 'resting-elevation');
        $resting-shadow: elevation($resting-elevation);
    }

    @if not($hover-shadow) {
        $hover-elevation: map.get($switch-schema, 'hover-elevation');
        $hover-shadow: elevation($hover-elevation);
    }

    @if not($disabled-shadow) {
        $disabled-elevation: map.get($switch-schema, 'disabled-elevation');
        $disabled-shadow: elevation($disabled-elevation);
    }

    @if not($border-radius-track) {
        $border-radius-track: map.get($theme, 'border-radius-track');
    }

    @if not($border-radius-thumb) {
        $border-radius-thumb: map.get($theme, 'border-radius-thumb');
    }

    @if not($border-radius-ripple) {
        $border-radius-ripple: map.get($theme, 'border-radius-ripple');
    }

    @return extend($theme, (
        name: $name,

        thumb-on-color: $thumb-on-color,
        track-on-color: $track-on-color,
        track-on-hover-color: $track-on-hover-color,

        thumb-off-color: $thumb-off-color,
        track-off-color: $track-off-color,

        track-disabled-color: $track-disabled-color,
        track-on-disabled-color: $track-on-disabled-color,
        thumb-disabled-color: $thumb-disabled-color,
        thumb-on-disabled-color: $thumb-on-disabled-color,

        label-color: $label-color,
        label-disabled-color: $label-disabled-color,
        label-invalid-color: $label-invalid-color,

        resting-shadow: $resting-shadow,
        hover-shadow: $hover-shadow,
        disabled-shadow: $disabled-shadow,

        border-radius-track: $border-radius-track,
        border-radius-thumb: $border-radius-thumb,
        border-radius-ripple: $border-radius-ripple,
        border-color: $border-color,
        border-hover-color: $border-hover-color,
        border-disabled-color: $border-disabled-color,
        border-on-color: $border-on-color,
        border-on-hover-color: $border-on-hover-color,
        focus-outline-color: $focus-outline-color,
        focus-outline-color-focused: $focus-outline-color-focused,
        focus-fill-color: $focus-fill-color,
        track-error-color: $track-error-color,
        thumb-on-error-color: $thumb-on-error-color,
        error-color: $error-color,
        error-color-hover: $error-color-hover,
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme'),
            theme-variant: map.get($schema, '_meta', 'variant')
        )),
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} ripple
/// @requires ripple-theme
@mixin switch($theme) {
    @include css-vars($theme);
    @include scale-in-out($start-scale: .9);

    $variant: map.get($theme, '_meta', 'variant');
    $theme-variant: map.get($theme, '_meta', 'theme-variant');

    $switch-width: map.get((
        material: 36px,
        fluent: 40px,
        bootstrap: 32px,
        indigo-design: 34px
    ), $variant);

    $switch-height: map.get((
        material: 14px,
        fluent: 20px,
        bootstrap: 16px,
        indigo-design: 16px
    ), $variant);

    $switch-thumb-width: map.get((
        material: 20px,
        fluent: 12px,
        bootstrap: 10px,
        indigo-design: 8px
    ), $variant);

    $switch-on-offset: map.get((
        material: 1px,
        fluent: math.div($switch-thumb-width, 2),
        bootstrap: 4px,
        indigo-design: 7px
    ), $variant);

    $switch-off-offset: map.get((
        material: -1px,
        fluent: math.div($switch-thumb-width, 3),
        bootstrap: math.div($switch-thumb-width, 4),
        indigo-design: math.div($switch-thumb-width, 3),
    ), $variant);

    $ripple-display: map.get((
        material: block,
        fluent: none,
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $thumb-resting-shadow: map.get((
        material: var-get($theme, 'resting-shadow'),
        fluent: none,
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $thumb-hover-shadow: map.get((
        material: var-get($theme, 'hover-shadow'),
        fluent: none,
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $thumb-disabled-shadow: map.get((
        material: var-get($theme, 'disabled-shadow'),
        fluent: none,
        bootstrap: none,
        indigo-design: none
    ), $variant);

    $switch-thumb-height: $switch-thumb-width;

    $ripple-size: rem(40px);
    $ripple-radius: math.div($ripple-size, 2);

    $label-margin: rem(8px);

    $input-transition: all .2s $ease-in-out-quad;

    $ripple-theme: ripple-theme(
        $schema: $light-material-schema,
        $color: var-get($theme, 'thumb-on-color')
    );

    %switch-display {
        position: relative;
        display: inline-flex;
        flex-flow: row nowrap;
        align-items: center;
    }

    %switch-input {
        @include hide-default();
    }

    %switch-display--disabled {
        user-select: none;
        pointer-events: none;
        cursor: initial;
    }

    %switch-composite {
        display: flex;
        align-items: center;
        width: rem($switch-width);
        height: rem($switch-height);
        border: rem(1px) solid var-get($theme, 'border-color');
        border-radius: var-get($theme, 'border-radius-track');
        background: var-get($theme, 'track-off-color');
        cursor: pointer;
        user-select: none;
        transition: $input-transition;

        @if $variant == 'indigo-design' {
            border: rem(2px) solid var-get($theme, 'border-color');
        }
    }

    %switch-composite--hover {
        @if $variant == 'material' or  $variant == 'fluent' {
            border-color: var-get($theme, 'border-hover-color');
        }

        @if $variant == 'fluent' {
            %switch-composite-thumb {
                background: var-get($theme, 'border-hover-color');
            }

            %switch-composite-thumb--x {
                background: var-get($theme, 'thumb-on-color');
            }
        }
    }

    %switch-composite--invalid {
        border-color: var-get($theme, 'error-color');

        @if $variant == 'material' {
            border-color: var-get($theme, 'track-error-color');
            background: var-get($theme, 'track-error-color');
        }
    }

    %switch-composite--invalid--hover {
        @if $variant == 'fluent' {
            border-color: var-get($theme, 'error-color-hover');

            %switch-composite-thumb {
                background: var-get($theme, 'error-color-hover');
            }
        }
    }

    %switch-composite--x {
        background: var-get($theme, 'track-on-color');
        border-color: var-get($theme, 'border-on-color');
    }

    %switch-composite--x--hover {
        @if $variant != 'bootstrap' {
            border-color: var-get($theme, 'border-on-hover-color');
        }

        @if $variant == 'fluent' {
            background: var-get($theme, 'track-on-hover-color');

            %switch-composite-thumb {
                background: var-get($theme, 'thumb-on-color');
            }
        }
    }

    %switch-composite--disabled {
        background: var-get($theme, 'track-disabled-color');
        border-color: var-get($theme, 'border-disabled-color');
    }

    %switch-composite-thumb {
        position: relative;
        display: block;
        width: rem($switch-thumb-width);
        height: $switch-thumb-height;
        min-width: rem($switch-thumb-width);
        border-radius: var-get($theme, 'border-radius-thumb');
        background: var-get($theme, 'thumb-off-color');
        box-shadow: $thumb-resting-shadow;
        transition: $input-transition;
        transform: translateX(#{rem($switch-off-offset)});

        [dir='rtl'] & {
            transform: translateX(#{rem(-1 * $switch-off-offset)});
        }

        @if $variant != 'bootstrap' {
            &:hover {
                box-shadow: $thumb-hover-shadow;
            }
        }
    }

    %switch-composite-thumb--x {
        background: var-get($theme, 'thumb-on-color');
        transform: translateX(#{rem($switch-width) - rem($switch-thumb-width) - rem($switch-on-offset)});

        [dir='rtl'] & {
            transform: translateX(-#{rem($switch-width) - rem($switch-thumb-width) - rem($switch-on-offset)});
        }
    }

    %switch-composite-thumb--invalid {
        background: var-get($theme, 'error-color');
    }

    %switch-composite-thumb--x--invalid {
        background: var-get($theme, 'thumb-on-error-color');
    }

    %switch-composite-thumb--disabled {
        background: var-get($theme, 'thumb-disabled-color');
        box-shadow: $thumb-disabled-shadow;
    }

    %switch-ripple {
        @include ripple($ripple-theme);
        @include css-vars($ripple-theme);
        display: $ripple-display;
        position: absolute;
        top: calc(50% - #{$ripple-radius});
        inset-inline-start: calc(50% - #{$ripple-radius});
        width: $ripple-size;
        height: $ripple-size;
        overflow: hidden;
        pointer-events: none;
        filter: opacity(1);
        border-radius: var-get($theme, 'border-radius-ripple');
    }

    %igx-switch--focused {
        @if $variant == 'fluent' {
            %switch-composite {
                position: relative;
                $focus-outline-offset-top: rem(2px);
                $focus-outline-offset-left: rem(2px);

                &::after {
                    content: '';
                    position: absolute;
                    top: -$focus-outline-offset-top;
                    inset-inline-start: -$focus-outline-offset-left;
                    box-shadow: 0 0 0 rem(1px) var-get($theme, 'focus-outline-color');
                    width: calc(100% + (#{$focus-outline-offset-left} * 2));
                    height: calc(100% + (#{$focus-outline-offset-top} * 2));
                }
            }
        }

        @if $variant == 'bootstrap' {
            %switch-composite {
                border-color: var-get($theme, 'focus-fill-color');
                box-shadow: 0 0 0 rem(2px) var-get($theme, 'focus-outline-color');
            }

            %switch-composite-thumb {
                background: var-get($theme, 'focus-fill-color');
            }
        }

        @if $variant == 'indigo-design' {
            %switch-composite {
                border-radius: var-get($theme, 'border-radius-thumb');
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color');
            }
        }
    }

    %igx-switch--focused--invalid {
        @if $variant == 'bootstrap' {
            %switch-composite {
                border-color: var-get($theme, 'error-color');
                box-shadow: 0 0 0 rem(2px) var-get($theme, 'error-color-hover');
            }

            %switch-composite-thumb {
                background: var-get($theme, 'error-color');
            }
        }

        @if $variant == 'indigo-design' {
            %switch-composite {
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'error-color-hover');
            }
        }
    }

    %igx-switch--focused-checked {
        @if $variant == 'bootstrap' {
            %switch-composite {
                border-color: var-get($theme, 'border-on-color');
            }

            %switch-composite-thumb--x {
                background: var-get($theme, 'thumb-on-color');
            }
        }

        @if $variant == 'indigo-design' {
            %switch-composite {
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'focus-outline-color-focused');
            }
        }
    }

    %igx-switch--disabled-checked {
        @if $variant != 'indigo-design' {
            %switch-composite--x {
                background: var-get($theme, 'track-on-disabled-color');
            }

            %switch-composite-thumb--x {
                background: var-get($theme, 'thumb-on-disabled-color');
            }
        }

        @if $variant == 'bootstrap' or $variant == 'fluent'{
            %switch-composite--x {
                border-color: var-get($theme, 'track-on-disabled-color');
            }
        }
    }

    %switch-ripple--focused {
        background: var-get($theme, 'track-off-color');
        transition: background .2s $ease-out-quad;
        opacity: .12;

        @if $theme-variant == 'dark' {
            opacity: .24;
        }
    }

    %switch-ripple--focused-checked {
        background: var-get($theme, 'thumb-on-color');
    }

    %switch-ripple--focused-invalid {
        background: var-get($theme, 'error-color-hover');
    }

    %switch-label {
        display: inline-block;
        color: var-get($theme, 'label-color');
        cursor: pointer;
        user-select: none;
        word-wrap: break-all;

        &:empty {
            margin: 0;
        }
    }

    %switch-label--before,
    %switch-label--after {
        &:empty {
            margin: 0;
        }
    }

    %switch-label--after {
        margin-inline-start: $label-margin;
    }

    %switch-label--before {
        order: -1;
        margin-inline-end: $label-margin;
    }

    %switch-label--invalid {
        color: var-get($theme, 'label-invalid-color');
    }

    %switch-label--disabled {
        color: var-get($theme, 'label-disabled-color');
    }

    %switch-ripple--hover {
        &::after {
            position: absolute;
            content: '';
            opacity: .06;
            inset: 0;

            @if $theme-variant == 'dark' {
                opacity: .12;
            }
        }
    }

    %switch-ripple--hover-unchecked {
        &::after {
            background: var-get($theme, 'track-off-color');
        }
    }

    %switch-ripple--hover-checked {
        &::after {
            background: var-get($theme, 'thumb-on-color');
        }
    }

    %switch-ripple--hover-invalid {
        &::after {
            background: var-get($theme, 'error-color-hover');
        }
    }

    %switch-ripple--hover-checked-invalid {
        &::after {
            background: var-get($theme, 'thumb-on-color');
        }
    }

    %switch-ripple--pressed {
        &::after {
            opacity: .12;

            @if $theme-variant == 'dark' {
                opacity: .24;
            }
        }
    }
}

/// Adds typography styles for the igx-switch component.
/// Uses the 'subtitle-1' category from the typographic scale.
/// @group typography
/// @param {Map} $categories [(label: 'subtitle-1')] - The categories from the typographic scale used for type styles.
@mixin switch-typography(
    $categories: (label: 'subtitle-1')
) {
    $label: map.get($categories, 'label');

    %switch-label {
        @include type-style($label) {
            margin-top: 0;
            margin-bottom: 0;
        }
    }
}
