@use 'sass:map';
@use 'node_modules/sass-true' as *;
@use '../base' as *;
@use '../components' as *;

@include describe('Register Component') {
    $components: () !default;

    @include it('should add new component inside components list') {
        @include register-component('my-component');
        @include assert-true(map.has-key($components, 'my-component'));
    }
}

@include describe('CSS Variables from themes') {
    @include it('should concatenated variable names in the right order:--[prefix]-[key]: var(--[name]-[key], [value])'){
        $name: red-theme;
        $key: color;
        $value: red;
        $prefix: 'my';

        $theme: (
            name: #{$name},
            #{$key}: #{$value}
        );
        @include assert() {
            @include output() {
                @include css-vars-from-theme($theme, #{$prefix});
            }

            @include contains() {
                --#{$prefix}-#{$key}: var(--#{$name}-#{$key}, #{$value});
            }
        }
    }

    @include it('should autoprefix web component themes like dockmanager with "igc"'){
        $theme: dock-manager-theme();
        $key: 'active-color';

        @include assert() {
            @include output() {
                @include css-vars-from-theme($theme);
            }

            @include contains() {
                --igc-active-color: var(--igc-dockmanager-#{$key}, #{map.get($theme, #{$key})});
            }
        }
    }

    @include it('should not generate variables for name, palette, variant, selector and elevation') {
        $theme: (
            name: green-theme,
            palette: my-palette,
            variant: my-variant,
            selector: my-selector,
            elevation: my-elevsation,
            color: green
        );
        @include assert() {
            @include output() {
                @include css-vars-from-theme($theme);
            }

            @include expect() {
                --color: var(--green-theme-color, green);
            }
        }
    }
}

@include describe('Generate color class') {
    @include it('should concatenate the name, variant, prefix, and suffix in the correct order.') {
        $name: primary;
        $variant: 500;
        $prefix: igx;
        $suffix: bg;
        $selector: #{$prefix}-#{$name}-#{$variant}-#{$suffix};

        @include assert() {
            @include output() {
                @include gen-color-class($name, $variant, $prefix, $suffix) {
                    content: 'test';
                }
            }

            @include expect() {
                .#{$selector}{
                    content: 'test'
                }
            }
        }
    }
}

/* stylelint-disable max-nesting-depth */
@include describe('palette-vars') {
    $primary: red;
    $secondary: green;

    $my-palette: palette(
        $primary: $primary,
        $secondary: $secondary,
    );

    $h: round(hue($primary));
    $s: round(saturation($primary));
    $l: round(lightness($primary));
    $a: round(alpha($primary));

    @include it('should generate variables for all palette colors') {
        @include assert() {
            @include output() {
                @include palette-vars($my-palette);
            }

            @include contains() {
                --igx-primary-h: #{$h};
                --igx-primary-s: #{$s};
                --igx-primary-l: #{$l};
                --igx-primary-a: #{$a};
                --igx-primary-500: #{var(--igx-primary-h), var(--igx-primary-s), var(--igx-primary-l)};
            }
        }
    }
}
/* stylelint-enable max-nesting-depth */

/* stylelint-disable max-nesting-depth */
@include describe('palette-to-wc') {
    $primary: red;
    $secondary: green;

    $igc-palette: palette(
        $primary: $primary,
        $secondary: $secondary,
    );

    @include it('should generate CSS variables for all palette colors prefixed with --igc') {
        @include assert() {
            @include output() {
                @include palette-to-wc($igc-palette);
            }

            @include contains() {
                --igc-primary-h: #{var(--igx-primary-h)};
                --igc-primary-s: #{var(--igx-primary-s)};
                --igc-primary-l: #{var(--igx-primary-l)};

                --igc-gray-h: #{var(--igx-grays-h)};
                --igc-gray-s: #{var(--igx-grays-s)};
                --igc-gray-l: #{var(--igx-grays-l)};
            }
        }
    }
}

/* stylelint-enable max-nesting-depth */
/* stylelint-disable string-quotes, number-leading-zero */
@include describe('Animation') {
    @include it('should produce correct syntax for animation') {
        @include assert() {
            @include output() {
                @include animation('fade-in' .3s ease-out);
            }

            @include expect() {
                animation: "fade-in" 0.3s ease-out;
            }
        }
    }
}
/* stylelint-enable string-quotes, number-leading-zero */

@include describe('Keyframes') {
    $keyframes: () !default;
    @include it('should registers a keyframe animation in the global keyframes registry list') {
        @include keyframes('my-keyframe');
        @include assert-true(map.has-key($keyframes, 'my-keyframe'));
    }

    /* stylelint-disable max-nesting-depth */
    @include it('should produce a keyframe animation with the passed name') {
        @include assert() {
            @include output() {
                @include keyframes('my-keyframe') {
                    0% {
                        opacity: 1;
                    }

                    100% {
                        opacity: 0;
                    }
                }
            }

            @include expect() {
                @keyframes keyframes {
                    0% {
                        opacity: 1;
                    }

                    100% {
                        opacity: 0;
                    }
                }
            }
        }
    }
    /* stylelint-enable max-nesting-depth */
}
