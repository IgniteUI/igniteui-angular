/* blazorCopyInheritedMembers */
/* blazorElement */
/* wcElementTag: igc-row-island */
/* blazorIndirectRender */
/* jsonAPIManageCollectionInMarkup */
/* jsonAPIManageItemInMarkup */
/* mustUseNGParentAnchor */
/* additionalIdentifier: ChildDataKey */
/* contentParent: RowIsland */
/* contentParent: HierarchicalGrid */

import { DOCUMENT } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EnvironmentInjector, EventEmitter, forwardRef, Inject, Injector, Input, IterableDiffers, LOCALE_ID, NgZone, Optional, Output, QueryList, ViewContainerRef } from '@angular/core';
import { IGX_GRID_SERVICE_BASE, IgxFlatTransactionFactory, IgxGridTransaction, IgxOverlayService, IgxRowIslandComponent, IgxTextHighlightService, State, Transaction, TransactionService } from 'igniteui-angular';
import { PlatformUtil } from 'igniteui-angular/src/lib/core/utils';
import { IgxFilteringService } from 'igniteui-angular/src/lib/grids/filtering/grid-filtering.service';
import { IgxGridValidationService } from 'igniteui-angular/src/lib/grids/grid/grid-validation.service';
import { IgxHierarchicalGridAPIService } from 'igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid-api.service';
import { IgxHierarchicalGridNavigationService } from 'igniteui-angular/src/lib/grids/hierarchical-grid/hierarchical-grid-navigation.service';
import { IgxRowIslandAPIService } from 'igniteui-angular/src/lib/grids/hierarchical-grid/row-island-api.service';
import { IgxColumnResizingService } from 'igniteui-angular/src/lib/grids/resizing/resizing.service';
import { IgxGridSelectionService } from 'igniteui-angular/src/lib/grids/selection/selection.service';
import { IgxGridSummaryService } from 'igniteui-angular/src/lib/grids/summaries/grid-summary.service';
import { takeUntil } from 'rxjs';
import { IColumnsAutoGeneratedEventArgs } from './events';
import { IgxActionStripToken } from 'igniteui-angular/src/lib/action-strip/token';

/**
 * Row island
 *
 * @igxModule IgxHierarchicalGridModule
 * @igxParent IgxGridElementsComponent, IgxHierarchicalGridElementsComponent, IgxRowIslandElementsComponent
 *
 */
@Component({
    changeDetection: ChangeDetectionStrategy.OnPush,
    selector: 'igx-row-island',
    template: `<div #sink style="display: none;">
    <ng-content select="igx-column,igc-column,igx-column-group,igc-column-group,igx-action-strip,igc-action-strip"></ng-content>
    <ng-content select="igx-row-island,igc-row-island"></ng-content>
    </div>`,
    providers: [
        IgxRowIslandAPIService,
        IgxFilteringService,
        IgxGridSelectionService
    ],
    standalone: true
})
export class IgxRowIslandElementsComponent extends IgxRowIslandComponent {

    constructor(
        validationService: IgxGridValidationService,
        selectionService: IgxGridSelectionService,
        colResizingService: IgxColumnResizingService,
        @Inject(IGX_GRID_SERVICE_BASE) gridAPI: IgxHierarchicalGridAPIService,
        transactionFactory: IgxFlatTransactionFactory,
        elementRef: ElementRef<HTMLElement>,
        zone: NgZone,
        @Inject(DOCUMENT) document,
        cdr: ChangeDetectorRef,
        differs: IterableDiffers,
        viewRef: ViewContainerRef,
        injector: Injector,
        envInjector: EnvironmentInjector,
        navigation: IgxHierarchicalGridNavigationService,
        filteringService: IgxFilteringService,
        textHighlightService: IgxTextHighlightService,
        @Inject(IgxOverlayService) overlayService: IgxOverlayService,
        summaryService: IgxGridSummaryService,
        public override rowIslandAPI: IgxRowIslandAPIService,
        @Inject(LOCALE_ID) localeId: string,
        platform: PlatformUtil) {
        super(
            validationService,
            selectionService,
            colResizingService,
            gridAPI,
            transactionFactory,
            elementRef,
            zone,
            document,
            cdr,
            differs,
            viewRef,
            injector,
            envInjector,
            navigation,
            filteringService,
            textHighlightService,
            overlayService,
            summaryService,
            rowIslandAPI,
            localeId,
            platform
        );
        this.selectionService.selectedRowsChange.pipe(takeUntil(this.destroy$)).subscribe((args: any[]) => {
            this.selectedRowsChange.emit(args);
        });
    }

    //children
    // childLayoutList

    /* contentChildren */
    /* blazorInclude */
    /* blazorTreatAsCollection */
    /* blazorCollectionName: RowIslandCollection */
    /* ngQueryListName: childLayoutList */
    /**
     * @hidden
     */
    @ContentChildren(IgxRowIslandElementsComponent, { read: IgxRowIslandElementsComponent, descendants: false })
    public override childLayoutList: QueryList<IgxRowIslandElementsComponent>;

    /**
     * @hidden
     */
    @ContentChildren(forwardRef(() => IgxRowIslandElementsComponent), { read: IgxRowIslandElementsComponent, descendants: false })
    public override children = new QueryList<IgxRowIslandElementsComponent>();

    @Output()
    public columnsAutogenerated = new EventEmitter<IColumnsAutoGeneratedEventArgs>();

    @Output()
    public selectedRowsChange = new EventEmitter<any[]>();

    // TODO(api-analyzer): Shouldn't need all tags to copy from base or hidden/internal due to include tag
    /* contentChildren */
    /* blazorInclude */
    /* blazorTreatAsCollection */
    /* blazorCollectionName: ActionStripCollection */
    /* blazorCollectionItemName: ActionStrip */
    /* ngQueryListName: actionStripComponents */
    /** @hidden @internal */
    @ContentChildren(IgxActionStripToken, { read: IgxActionStripToken, descendants: false })
    protected actionStripComponents: QueryList<IgxActionStripToken>;

    protected override autogenerateColumns() {
        super.autogenerateColumns();
        this.columnsAutogenerated.emit({ columns: this._autoGeneratedCols });
    }

    /**
     * Sets the key of the row island by which child data would be taken from the row data if such is provided.
     */
    @Input()
    public get childDataKey() {
        return this.key;
    }

    public set childDataKey(value: string) {
        this.key = value;
    }
}
