@use 'sass:map';
@use 'igniteui-theming/sass/bem' as *;
@use 'igniteui-theming/sass/themes' as *;
@use 'igniteui-theming/sass/typography' as *;
@use 'styles/themes/standalone' as *;
@use 'igniteui-theming/sass/animations/easings' as *;
@use './light/tokens' as *;

$theme: $base;

$required-symbol: '*';
$transition-timing: .25s $out-cubic;

// This creates an inverse relationship
// between the value of the base scale size and
// the sizing of all inner elements.
// i.e. the bigger the scale size,
// the smaller the padding of the inner items.
$base-scale-size: (
    'comfortable': 16px,
    'cosy': 19px,
    'compact': 22px
);

@include layer(base) {
    %bundle-start-end {
        display: flex;
        min-width: 0;
        min-height: 100%;
        grid-row: 2;
    }

    @include b(igx-input-group) {
        @include sizable();
        --component-size: var(--ig-size, #{var-get($theme, 'default-size')});
        --input-size: var(--component-size);
        --input-icon: #{sizable(rem(14px), rem(16px), rem(18px))};
        --_bundle-template-columns: auto 1fr auto;
        --_bundle-template-rows: auto #{var-get($theme, 'size')};
        --_prefix-suffix-spacing: #{pad-inline(rem(8px), rem(12px), rem(16px))};

        display: grid;
        position: relative;
        color: var-get($theme, 'idle-text-color');

        igx-suffix:not(igx-icon),
        [igxSuffix]:not(igx-icon),
        igx-prefix:not(igx-icon),
        [igxPrefix]:not(igx-icon) {
            // The :not(igx-icon) makes sure that we don't override the icon font if the prefix/suffix is set on igx-icon
            @include type-style(subtitle-1);
        }

        igx-prefix,
        [igxPrefix],
        igx-suffix,
        [igxSuffix] {
            position: relative;
            display: inline-flex;
            align-items: center;

            // !important is needed, otherwise if the directive is set directly on the igx-icon
            // the icon overrides the width/height set by the prefix/suffix
            width: max-content !important;
            height: auto !important;
            min-height: 100%;
            outline-style: none;
            transition: color $transition-timing, background $transition-timing;

            &:not(:empty) {
                padding-inline: var(--_prefix-suffix-spacing);
            }
        }

        igx-prefix,
        [igxPrefix] {
            color: var-get($theme, 'input-prefix-color');
            background: var-get($theme, 'input-prefix-background');
        }

        igx-suffix,
        [igxSuffix] {
            color: var-get($theme, 'input-suffix-color');
            background: var-get($theme, 'input-suffix-background');
        }

        @include e(bundle) {
            display: grid;
            grid-template-columns: var(--_bundle-template-columns);
            position: relative;
            max-width: 100%;
            font-size: rem(16px);
            height: var-get($theme, 'size');
            min-height: var-get($theme, 'size');
            grid-template-rows: var(--_bundle-template-rows);
        }

        @include e(label) {
            color: #{var-get($theme, 'idle-secondary-color')};

            display: inline-block;
            grid-row: 1;
            grid-column: 1 / -1;
        }

        @include e(bundle-start) {
            @extend %bundle-start-end;
            grid-column: 1;
        }

        @include e(bundle-end) {
            @extend %bundle-start-end;

            grid-column: 3;
        }

        @include e(bundle-main) {
            grid-row: 2;
            min-width: 0;
        }

        %input-textarea-common {
            position: relative;
            display: block;
            border: none;
            width: 100%;
            min-width: 0;
            background: transparent;
            color: var-get($theme, 'filled-text-color');
            outline-style: none;
            box-shadow: none;
            text-overflow: ellipsis;
            z-index: 0;

            &::-webkit-input-placeholder {
                line-height: normal;
            }

            &::placeholder {
                color: var-get($theme, 'placeholder-color');
                opacity: 1;

                /* Fix placeholder position in Safari */
                line-height: normal;
            }

            &:hover {
                color: var-get($theme, 'filled-text-hover-color');

                &::placeholder {
                    color: var-get($theme, 'hover-placeholder-color');
                }
            }

            &:focus {
                cursor: text;
                color: var-get($theme, 'focused-text-color');

                &::placeholder {
                    color: var-get($theme, 'hover-placeholder-color');
                }
            }
        }

        @include e(input) {
            @extend %input-textarea-common;

            overflow: hidden;
            height: calc(var-get($theme, 'size') - 1px);

            &:not([type='date']) {
                /* Reset typography */
                line-height: 0 !important;
            }

            &[type='file'] {
                @include hide-default();
            }
        }

        @include e(textarea) {
            --textarea-size: #{sizable(
                rem(82px, map.get($base-scale-size, 'compact')),
                rem(82px, map.get($base-scale-size, 'cosy')),
                rem(82px, map.get($base-scale-size, 'comfortable'))
            )};

            @extend %input-textarea-common;

            padding: 0;
            min-height: var(--textarea-size);
            resize: vertical;
            z-index: 1;
        }

        @include e(hint) {
            @include type-style(caption);

            color: var-get($theme, 'helper-text-color');
            position: relative;
            display: flex;
            justify-content: space-between;

            &:empty {
                display: none;
            }
        }

        @include e(file-input) {
            width: 100%;
            max-width: 100%;
            overflow: hidden;
            height: calc(var-get($theme, 'size') - 2px);
            color: var-get($theme, 'filled-text-color');

            span {
                @include ellipsis();
                position: relative;
                display: inline-block;
                width: inherit;
                max-width: inherit;
                top: 50%;
                transform: translateY(-50%);
            }
        }

        @include m(file, $not: (border)) {
            --_bundle-template-columns: auto auto 1fr auto;


            @include e(bundle-main) {
                grid-column: 3;
            }

            @include e(bundle-end) {
                grid-column: 4;
            }
        }

        @include m(file) {

            @include e(bundle-main) {
                cursor: pointer;
            }

            @include e(label) {
                pointer-events: none;
            }
        }

        @include e(upload) {
            display: flex;
            height: 100%;
            grid-column: 2;
        }

        @include e(clear-icon) {
            cursor: pointer;
        }

        @include e(upload-button) {
            --igx-button-background: transparent;
            --igx-button-hover-background: transparent;
            --igx-button-focus-background: transparent;
            --igx-button-focus-visible-background: transparent;
            --igx-button-active-background: transparent;

            //min-width: min-content;
            padding-inline: var(--_prefix-suffix-spacing);
        }

        @include m(textarea-group) {
            --_bundle-template-rows: auto;

            @include e(bundle) {
                height: auto;
            }
        }

        @include m(required) {
            @include e(label) {
                &::after {
                    content: '*';
                    font-size: inherit;
                    vertical-align: top;
                    margin-inline-start: rem(2px);
                    display: inline-block;
                }
            }
        }

        @include m(filled) {
            igx-prefix,
            [igxPrefix] {
                color: var-get($theme, 'input-prefix-color--filled');
                background: var-get($theme, 'input-prefix-background--filled');
            }

            igx-suffix,
            [igxSuffix] {
                color: var-get($theme, 'input-suffix-color--filled');
                background: var-get($theme, 'input-suffix-background--filled');
            }
        }

        @include m(focused) {
            igx-prefix,
            [igxPrefix] {
                color: var-get($theme, 'input-prefix-color--focused');
                background: var-get($theme, 'input-prefix-background--focused');
            }

            igx-suffix,
            [igxSuffix] {
                color: var-get($theme, 'input-suffix-color--focused');
                background: var-get($theme, 'input-suffix-background--focused');
            }
        }

        @include m(disabled) {
            %input-textarea-disabled-colors {
                cursor: default;

                color: var-get($theme, 'disabled-text-color');

                &::placeholder {
                    color: var-get($theme, 'disabled-placeholder-color');
                }
            }

            igx-prefix,
            [igxPrefix],
            igx-suffix,
            [igxSuffix] {
                color: var-get($theme, 'disabled-text-color');
            }

            @include e(label) {
                color: var-get($theme, 'disabled-text-color')
            }

            @include e(input) {
                @extend %input-textarea-disabled-colors;
            }

            @include e(textarea) {
                @extend %input-textarea-disabled-colors;

                resize: none;
            }

            @include e(bundle) {
                > * {
                    cursor: default;
                }
            }

            @include e(hint) {
                color: var-get($theme, 'disabled-text-color');
            }

            @include e(file-input) {
                color: var-get($theme, 'disabled-text-color');
            }

            /* stylelint-disable max-nesting-depth */
            &:hover {
                @include e(input) {
                    @extend %input-textarea-disabled-colors;
                }

                @include e(textarea) {
                    @extend %input-textarea-disabled-colors;
                }
            }
            /* stylelint-enable max-nesting-depth */
        }
    }
}
