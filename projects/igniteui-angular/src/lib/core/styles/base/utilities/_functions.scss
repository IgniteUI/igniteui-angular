@use '../variables' as *;
@use 'sass:math';
@use 'sass:color';
@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

////
/// @group Utilities
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
////

/// Test if `$value` is a valid direction.
/// @access private
/// @param {*} $value - The value to test.
@function is-direction($value) {
    $is-keyword: list.index(( to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: meta.type-of($value)=='number' and list.index('deg' 'grad' 'turn' 'rad', math.unit($value));
    @return $is-keyword or $is-angle;
}

/// Test if a component, or list of components
/// is in the list of known components.
/// @access private
/// @param {String|List} $items - The components list to check in.
/// @return {List} - The list of passed items.
@function is-component($items) {
    $register: map.keys($components);
    @each $item in $items {
        @if not(list.index($register, $item)) {
            @warn unquote('Can\'t exclude "#{$item}" because it is not in the list of known components.');
        }
    }
    @return $items;
}

/// Converts numbers to HEX value strings.
/// @access private
/// @param {number} $num - The number to convert.
/// @param {radix} $radix [16] - The base radix to use for the conversion.
/// @return {String} - The resulting string.
@function to-string($num, $radix: 16) {
    $chars: '0123456789abcdef';
    $result: '';
    $sign: '';
    @if $num < 0 {
        $sign: '-';
        $num: math.abs($num);
    }
    @if $num >= 0 and $num < $radix {
        @return $sign + string.slice($chars, ($num + 1), ($num + 1));
    }
    $q: $num;
    @while $q !=0 {
        $r: $q % $radix;
        $q: math.floor($q / $radix);
        $result: string.slice($chars, ($r + 1), ($r + 1)) + $result;
    }
    @return $sign + $result;
}

/// @access private
@function to-number($value) {
    @if meta.type-of($value) == 'number' {
        @return $value;
    } @else if meta.type-of($value) != 'string' {
        $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: string.slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through string.length($value) {
        $character: string.slice($value, $i, $i);

        @if not(list.index(map.keys($numbers), $character) or $character == '.') {
            @return $value;
        }

        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map.get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map.get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

/// Splits a string into a list by a given separator.
/// @access private
/// @param {string} $string - The string to split.
/// @param {string} $separator - The string separator to split the string by.
@function str-split($string, $separator) {
    $split-arr: ();
    $index : string.index($string, $separator);
    @while $index != null {
        $item: string.slice($string, 1, $index - 1);
        $split-arr: list.append($split-arr, $item);
        $string: string.slice($string, $index + 1);
        $index : string.index($string, $separator);
    }
    $split-arr: list.append($split-arr, $string);
    @return $split-arr;
}

/// Returns a random color.
/// @access private
@function random-color() {
    @return hsl(math.random(360), 100%, 50%);
}

/// A thin wrapper around Sass' color scale function
/// to allow pass-through for values other than those
/// of type color.
/// @access private
/// @param {Color} $color - The color to be lightened.
/// @param {Percent} $amount - The percent value by which the color will be lightened.
/// @returns {Color | any} - The modified color as produced by the lighten function.
/// If the value passed is not a color, then the passed value will be returned.
@function lighten-color($color, $amount) {
    @if meta.type-of($color) == 'color' {
        @return color.scale($color, $lightness: $amount);
    }
    @return $color;
}

/// A thin wrapper around Sass' color scale function
/// to allow pass-through for values other than those
/// of type color.
/// @access private
/// @param {Color} $color - The color to be lightened.
/// @param {Percent} $amount - The percent value by which the color will be lightened.
/// @returns {Color | any} - The modified color as produced by the lighten function.
/// If the value passed is not a color, then the passed value will be returned.
@function darken-color($color, $amount) {
    @if meta.type-of($color) == 'color' {
        @return color.scale($color, $lightness: -$amount);
    }
    @return $color;
}

@function expand-shorthand($list) {
    $len: list.length($list);

    $margins: (
        'margin-top': null,
        'margin-right': null,
        'margin-bottom': null,
        'margin-left': null,
    );

    @for $i from 1 through 4 {
        $n: $i % $len;
        $n: if($n != 0, $n, $len);

        @if $len == 3 and $i == 4 {
            $n: 2;
        }

        $key: list.nth(map.keys($margins), $i);
        $value: list.nth($list, $n);

        $margins: map.merge($margins, ($key: $value));
    }

    @return $margins;
}

@function map-keys-prefix($map, $prefix, $separator: '-') {
    $keys: map.keys($map);
    $len: list.length($keys);
    $result: ();

    @for $i from 1 through $len {
        $key: list.nth($keys, $i);

        $result: map.merge($result, (
            '#{$prefix}#{$separator}#{$key}': map.get($map, $key))
        );
    }

    @return $result;
}

@function str-replace($string, $search, $replace: '') {
    $index: string.index($string, $search);
    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + str-replace(
            string.slice($string, $index + string.length($search)),
            $search,
            $replace
        );
    }
    @return $string;
}

/// @access private
@function is-used($name, $checklist) {
    $used: true;

    @if list.index($checklist, $name) {
        $deps: map.get($components, $name, 'usedBy');
        $excluded: ();

        @each $item in $checklist {
            @if list.index($deps, $item) {
                $excluded: list.append($excluded, $item);
            }
        }

        $used: list.length($deps) != list.length($excluded);

        @if not($used) {
            $dropped-themes: list.append($dropped-themes, $name) !global;
        } @else {
            @warn 'You\'ve opted to exclude the "#{$name}" theme but it was held back as the following themes depend on it: "#{$deps}".';
        }
    }

    @return $used;
}
