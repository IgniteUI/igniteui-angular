@use 'node_modules/sass-true' as *;
@use '../base' as *;

@include describe('Unit conversions') {
    @include it('should convert pixel numbers to rem') {
        @include assert-equal(rem(16px, 16px), 1rem);
    }

    @include it('should convert unitless numbers to rem') {
        @include assert-equal(rem(16, 16), 1rem);
    }

    @include it('should convert pixel numbers to em') {
        @include assert-equal(em(16px, 16px), 1em);
    }

    @include it('should convert unitless numbers to em') {
        @include assert-equal(em(16px, 16px), 1em);
    }

    @include it('should convert relative unit numbers to pixels') {
        @include assert-equal(px(1em, 16px), 16px);
        @include assert-equal(px(1rem, 16px), 16px);
    }

    @include it('should convert unitless numbers to pixels') {
        @include assert-equal(px(1, 16), 16px);
    }
}

@include describe('Luminance') {
    @include it('should return a number') {
        @include assert-true(type-of(luminance(blue)), 'number');
    }

    @include it('should retrieve luminance for a given color value') {
        @include assert-equal(luminance(red), .2126);
    }

    @include it('should pass through non-color values') {
        @include assert-equal(luminance('bozo'), 'bozo');
    }
}

@include describe('Contrast') {
    @include it('should return a number') {
        @include assert-true(type-of(contrast(white, black)), 'number');
    }

    @include it('should return the contrast ratio between two colors') {
        @include assert-equal(contrast(white, black), 21);
        @include assert-equal(round(contrast(#09f, black)), 7);
    }
}

@include describe('Meta introspection') {
    @include it('is-root should return true if called from root') {
        @include assert('when called from root') {
            // Defined at root level
            $check: is-root();

            @include output() {
                content: $check;
            }
            @include expect() {
                content: true;
            }
        }
    }

    @include it('is-root should return false if called from within a selector') {
        @include assert('when called inside a selector') {
            @include output() {
                // Defined locally
                content: is-root();
            }
            @include expect() {
                content: false;
            }
        }
    }
}

$_primary: #09f;
$_secondary: #97c;
$_palette: palette($_primary, $_secondary);
$theme-palette: $_palette;

@include describe('Palette operations') {
    @include describe('color') {
        @include it('should return a value of type color w/ palette as only argument')  {
            $value: color($_palette);
            @include assert-equal(type-of($value), color);
        }

        @include it('should return a value of type color w/ palette and color as only arguments')  {
            $value: color($_palette, 'secondary');
            @include assert-equal($value, $_secondary);
        }

        @include it('should return a value of type color w/ all arguments passed')  {
            $value: color($_palette, 'secondary', 500);
            @include assert-equal($value, $_secondary);
        }
    }

    @include describe('color') {
        @include it('should return a value of type string as CSS var w/o arguments')  {
            $value: color();
            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--igx-primary-500), var(--igx-primary-a)));
        }

        @include it('should return a value of type string as CSS var w/ color as only argument')  {
            $value: color($color: secondary);
            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--igx-secondary-500), var(--igx-secondary-a)));
        }

        @include it('should return a value of type string as CSS var w/ color and variant as only arguments')  {
            $value: color($color: secondary, $variant: 'A400');
            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--igx-secondary-A400), var(--igx-secondary-a)));
        }
    }
}

@include describe('Themes') {
    $simple-color: (
        color: primary
    );

    $complex-color: (
        color: primary,
        rgba: 1,
        to-opaque: #222
    );

    $deep-color: (
        color: (grays, 300),
        to-opaque: (
            color: (grays, 900),
            rgba: .28,
            text-contrast: (),
            to-opaque: (
                color: surface,
            )
        )
    );

    $other-func: (
        expand-shorthand: 12px,
        map-keys-prefix: 'p'
    );

    @include it('should resolve simple schema colors as CSS vars w/o palette') {
        $actual: resolve-value($value: $simple-color, $payload: null);
        $expected: hsla(var(--igx-primary-500), var(--igx-primary-a));

        @include assert-equal($actual, $expected);
    }

    @include it('should always resolve complex schema colors as values of type color') {
        $actual: resolve-value($value: $complex-color, $payload: $_palette);
        $expected: $_primary;

        @include assert-true(type-of($actual), color);
        @include assert-equal($actual, $expected);

        $actual: resolve-value($value: $complex-color, $payload: null);

        @include assert-true(type-of($actual), color);
        @include assert-equal($actual, $expected);
    }

    @include it('should always resolve deep schema colors as values of type color') {
        $actual: resolve-value($value: $deep-color, $payload: $_palette);
        @include assert-true(type-of($actual), color);

        $actual: resolve-value($value: $deep-color, $payload: null);
        @include assert-true(type-of($actual), color);
    }

    @include it('should resolve non-color functions') {
        $actual: resolve-value($value: $other-func);
        $expected: (
            'p-margin-top': 12px,
            'p-margin-right': 12px,
            'p-margin-bottom': 12px,
            'p-margin-left': 12px
        );
        @include assert-equal($actual, $expected);
    }
}

@include describe('Theme Module System') {
    $components: (
        igx-checkbox: (
            'usedBy': (
                igx-combo,
                igx-grid
            )
        )
    ) !global;

    @include it('should include theme if other themes depend on it') {
        $excluded: (igx-checkbox, igx-combo);
        $test: is-used(
            $name: 'igx-checkbox',
            $checklist: $excluded,
        );
        @include assert-equal($test, true);
    }

    @include it('should exclude theme if no themes depend on it') {
        $excluded: (igx-checkbox, igx-grid, igx-combo);
        $test: is-used(
            $name: 'igx-checkbox',
            $checklist: $excluded,
        );

        @include assert-equal($test, false);
    }
}
