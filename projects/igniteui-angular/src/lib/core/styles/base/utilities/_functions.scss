@use '../variables' as *;
@use 'sass:math';
@use 'sass:color';
@use 'sass:meta';
@use 'sass:map';
@use 'sass:list';
@use 'sass:string';

////
/// @group Utilities
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
////

/// Converts pixels to relative values (em).
/// @access public
/// @param {number|string} $pixels - The pixel value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function em($pixels, $context: $browser-context) {
    @if (math.is-unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (math.is-unitless($context)) {
        $context: $context * 1px;
    }
    @return math.div($pixels, $context) * 1em;
}

/// Pixels to root relative values (rem).
/// @access public
/// @param {number|string} $pixels - The pixel value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function rem($pixels, $context: $browser-context) {
    @if (math.is-unitless($pixels)) {
        $pixels: $pixels * 1px;
    }
    @if (math.is-unitless($context)) {
        $context: $context * 1px;
    }
    @return math.div($pixels, $context) * 1rem;
}

/// Relative value(em/rem) to pixel.
/// @access public
/// @param {number|string} $num - The relative value to be converted.
/// @param {number|string} $context [$browser-context] - The base context to convert against.
@function px($num, $context: $browser-context) {
    @if meta.type-of($num) == 'number' {
        @return math.div($num, $num * 0 + 1) * 16px;
    }

    @return $num;
}

/// Calculates the linear channel value for a given sRGB color.
/// @access private
@function _lcv($value) {
    @return if(
        $value < .03928,
        math.div($value, 12.92),
        math.pow(math.div($value + .055, 1.055), 2.4)
    );
}

/// Calculates the luminance for a given color.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests.
///
/// @param {Color} $color - The color to calculate luminance for.
@function luminance($color) {
    @if meta.type-of($color) == 'color' {
        $r: math.div(color.red($color), 255);
        $g: math.div(color.green($color), 255);
        $b: math.div(color.blue($color), 255);

        @return .2126 * _lcv($r) + .7152 * _lcv($g) + .0722 * _lcv($b);
    }
    @return $color;
}

/// Calculates the contrast ratio between two colors.
/// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
///
/// @param {Color} $background - The background color.
/// @param {Color} $foreground - The foreground color.
/// @returns {Number} - The contrast ratio between the background and foreground colors.
@function contrast($background, $foreground) {
    $backLum: luminance($background) + .05;
    $foreLum: luminance($foreground) + .05;

    @return math.div(math.max($backLum, $foreLum), math.min($backLum, $foreLum));
}

/// Generates a color shade from base color and saturation level.
/// @access private
/// @group Palettes
/// @param {Color} $color - The base color to be used to generate a color shade.
/// @param {number|string} $saturation - The saturation level used to create the color shade.
@function gen-color($color, $saturation) {
    @if ($saturation == 50) {
        @return lighten(saturate($color, 10.4), 37.7);
    } @else if ($saturation == 100) {
        @return lighten(desaturate($color, 10.4), 31.8);
    } @else if ($saturation == 200) {
        @return lighten(desaturate($color, 17), 18.7);
    } @else if ($saturation == 300) {
        @return lighten(desaturate($color, 12.9), 9.1);
    } @else if ($saturation == 400) {
        @return lighten(desaturate($color, 6.6), 4.1);
    } @else if ($saturation == 500) {
        @return $color;
    } @else if ($saturation == 600) {
        @return darken(saturate($color, 12.4), 5.1);
    } @else if ($saturation == 700) {
        @return darken(saturate($color, 24.5), 8.8);
    } @else if ($saturation == 800) {
        @return darken(saturate($color, 23.2), 12.7);
    } @else if ($saturation == 900) {
        @return darken(saturate($color, 16.1), 17);
    } @else if ($saturation == 'A100') {
        @return lighten(saturate($color, 10.4), 16.7);
    } @else if ($saturation == 'A200') {
        @return lighten(saturate($color, 10.4), 7.7);
    } @else if ($saturation == 'A400') {
        @return darken(saturate($color, 10.4), 3.9);
    } @else if ($saturation == 'A700') {
        @return darken(saturate($color, 10.4), 16.6);
    }
}

/// Generates a color shade from base color and saturation level.
/// @access private
/// @group Palettes
/// @param {Color} $color - The base color to be used to generate a color shade.
/// @param {number|string} $shade - The shade.
@function _gen-gray($color, $shade, $base) {
    $lumen: luminance($base);

    @if ($shade == 50) {
        @return change-color($color, $lightness: if($lumen > .5, 98%, 13%));
    } @else if ($shade == 100) {
        @return change-color($color, $lightness: if($lumen > .5, 96%, 26%));
    } @else if ($shade == 200) {
        @return change-color($color, $lightness: if($lumen > .5, 93%, 38%));
    } @else if ($shade == 300) {
        @return change-color($color, $lightness: if($lumen > .5, 88%, 54%));
    } @else if ($shade == 400) {
        @return change-color($color, $lightness: if($lumen > .5, 74%, 62%));
    } @else if ($shade == 500) {
        @return change-color($color, $lightness: if($lumen > .5, 62%, 74%));
    } @else if ($shade == 600) {
        @return change-color($color, $lightness: if($lumen > .5, 54%, 88%));
    } @else if ($shade == 700) {
        @return change-color($color, $lightness: if($lumen > .5, 38%, 93%));
    } @else if ($shade == 800) {
        @return change-color($color, $lightness: if($lumen > .5, 26%, 96%));
    } @else if ($shade == 900) {
        @return change-color($color, $lightness: if($lumen > .5, 13%, 98%));
    }
}

/// Generates an hsla color variant from base(500) colors.
/// @access private
/// @group Palettes
/// @param {Color} $name - The base color name (primary, secondary, etc.) to be used to generate a color variant.
/// @param {number|string} $variant - The target shade variant.
/// @param {number|string} $theme - The target theme variant.
/// @param {String} $prefix [igx] - The prefix for the color variant.
@function gen-hsla-color($name, $variant, $theme, $color, $prefix: 'igx', $base) {
    $h: var(--#{$prefix}-#{$name}-h);
    $s: var(--#{$prefix}-#{$name}-s);
    $l: var(--#{$prefix}-#{$name}-l);
    $lumen: luminance($base);

    @if ($variant == 50) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 98%, 13%)};
        } @else {
            @return #{$h, calc(#{$s} * 1.23), calc(#{$l} * 1.78)};
        }
    } @else if ($variant == 100) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 96%, 26%)};
        } @else {
            @return #{$h, calc(#{$s} / 1.25), calc(#{$l} * 1.66)};
        }
    } @else if ($variant == 200) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 93%, 38%)};
        } @else {
            @return #{$h, calc(#{$s} * .64), calc(#{$l} * 1.43)};
        }
    } @else if ($variant == 300) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 88%, 54%)};
        } @else {
            @return #{$h, calc(#{$s} * .73), calc(#{$l} * 1.19)};
        }
    } @else if ($variant == 400) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 74%, 62%)};
        } @else {
            @return #{$h, calc(#{$s} * .875), calc(#{$l} * 1.08)};
        }
    } @else if ($variant == 500) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 62%, 72%)};
        } @else {
            @return #{$h, $s, $l};
        }
    } @else if ($variant == 600) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 54%, 88%)};
        } @else {
            @return #{$h, calc(#{$s} * 1.26), calc(#{$l} * .89)};
        }
    } @else if ($variant == 700) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 38%, 93%)};
        } @else {
            @return #{$h, calc(#{$s} * 1.52), calc(#{$l} * .81)};
        }
    } @else if ($variant == 800) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 26%, 96%)};
        } @else {
            @return #{$h, calc(#{$s} * 1.5), calc(#{$l} * .73)};
        }
    } @else if ($variant == 900) {
        @if $name == 'grays' or $name == 'gray' {
            @return #{$h, $s, if($lumen > .5, 13%, 98%)};
        } @else {
            @return #{$h, calc(#{$s} * 1.34), calc(#{$l} * .64)};
        }
    } @else if ($variant == 'A100') {
        @return #{$h, calc(#{$s} * 1.23), calc(#{$l} * 1.34)};
    } @else if ($variant == 'A200') {
        @return #{$h, calc(#{$s} * 1.22), calc(#{$l} * 1.16)};
    } @else if ($variant == 'A400') {
        @return #{$h, calc(#{$s} * 1.23), calc(#{$l} * .91)};
    } @else if ($variant == 'A700') {
        @return #{$h, calc(#{$s} * 1.22), calc(#{$l} * .65)};
    }
}

/// Generates a Material-like color palette for a single color.
/// @access private
/// @group Palettes
/// @requires {function} gen-color
/// @requires {function} text-contrast
/// @param {Color} $color - The base color used to generate the palette.
/// @param {List} $saturations - The saturation list of color variants.
/// @param {Color} $base [#fff] - The base color to calculate contrast colors against if the base color is transluscent.
//// Based on the Material color system.
/// @returns {Map} - A map consisting of 14 color variations and 14
/// text contrast colors for each variation.
@function generate-palette(
    $color,
    $saturations,
    $base: #fff
) {
    $result: ();
    @each $saturation in $saturations {
        $shade: gen-color($color, $saturation);
        $contrast: text-contrast(to-opaque($shade, $base, null));

        $result: map.merge($result, (
            $saturation: $shade,
            #{$saturation}-contrast: $contrast
        ));
    }
    @return $result;
}

/// Generates grayscale color palette from a color.
/// @access private
/// @group Palettes
/// @requires {function} text-contrast
/// @param {Color} $color - The base color used to generate the palette.
/// @param {Map} $shades - A map of variations as keys and opacities as values.
/// @param {Color} $base [#fff] - The base color to calculate contrast colors against if the base color is transluscent.
/// Based on the Material color system.
/// @returns {Map} - A map consisting of 10 color variations and 10
/// text contrast colors for each variation.
@function grayscale-palette($color, $shades, $base: #fff) {
    $result: ();
    @each $shade in $shades {
        $gray-shade: _gen-gray($color, $shade, $base);
        $contrast: text-contrast(to-opaque($gray-shade, $base, null));

        $result: map-merge($result, (
            $shade: $gray-shade,
            #{$shade}-contrast: $contrast
        ));
    }
    @return $result;
}

/// Generates a color palette.
/// @access public
/// @group Palettes
/// @requires {function} generate-palette
/// @param {Color} $primary - The primary color used to generate the primary color palette.
/// @param {Color} $secondary - The secondary color used to generate the secondary color palette.
/// @param {Color} $info [#1377d5] - The information color used throughout the application.
/// @param {Color} $success [#4eb862] - The success color used throughout the application.
/// @param {Color} $warn [#fbb13c] - The warning color used throughout the application.
/// @param {Color} $error [#ff134a] - The error color used throughout the application.
/// @param {Color} $grays [#000 | $igx-foreground-color] - The color used for generating the grays palette.
/// @param {Color} $surface [#fff] - The color used as a background in components, such as cards, sheets, and menus.
/// @param {String} $variant ['material'] - The palette variant that gets generated. Possible values are: 'material', 'fluent', 'bootstrap', and 'indigo-design'.
/// @returns {Map} - A map consisting of 74 color variations, including the `primary`, `secondary`, `grays`,
/// `info`, `success`, `warn`, and `error` colors.
@function palette(
    $primary,
    $secondary,
    $info: #1377d5,
    $success: #4eb862,
    $warn: #fbb13c,
    $error: #ff134a,
    $grays: #000,
    $surface: #fff,
    $variant: 'material'
) {
    $saturations: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900, 'A100', 'A200', 'A400', 'A700');
    $gray-shades: (50, 100, 200, 300, 400, 500, 600, 700, 800, 900);

    $primary-palette: generate-palette($primary, $saturations, $surface);
    $secondary-palette: generate-palette($secondary, $saturations, $surface);
    $grayscale-palette: grayscale-palette($grays, $gray-shades, $surface);

    // @debug 'Primary Colors Palette: #{$primary-palette}';
    // @debug 'secondary Colors Palette: #{$secondary-palette}';
    // @debug 'Warn Colors Palette: #{$warn-palette}';

    @return (
        primary: $primary-palette,
        secondary: $secondary-palette,
        grays: $grayscale-palette,
        info: (
            500: $info,
            '500-contrast': text-contrast(
                to-opaque($info, $surface, null)
            )
        ),
        success: (
            500: $success,
            '500-contrast': text-contrast(
                to-opaque($success, $surface, null)
            )
        ),
        warn: (
            500: $warn,
            '500-contrast': text-contrast(
                to-opaque($warn, $surface, null)
            )
        ),
        error: (
            500: $error,
            '500-contrast': text-contrast(
                to-opaque($error, $surface, null)
            )
        ),
        surface: (
            500: $surface,
            '500-contrast': text-contrast(
                to-opaque($surface, $surface, null)
            )
        ),
        _meta: (
            variant: $variant,
            grays: $grays,
        )
    );
}

/// @access private
/// Used in color to test internally
/// for color and variant validity.
$p-test: palette(#fff, #000);

/// Retrieves a color from a color palette.
/// @access public
/// @group Palettes
/// @param {Map} $palette [null]- The source palette map.
/// @param {string} $color [primary]- The target color from the color palette.
/// @param {number|string} $variant [500] - The target color shade from the color palette.
/// @returns {Color} White if no palette, color, and variant matches found.
@function color($palette: null, $color: primary, $variant: 500, $opacity: null) {
    $c: map.get($palette or $p-test, $color);
    // $v: if($c, map.get($c, $variant), null);
    $a: var(--igx-#{$color}-a);
    $var-string: #{var(--igx-#{$color}-#{$variant})};
    $contrast: if(
        type-of($variant) == string,
        list.index(str-split($variant, '-'), 'contrast'),
        null
    );
    $meta: if($palette, map.get($palette, '_meta'), null);

    @if not($c) {
        @error 'The passed color #{$color} is not valid.';
    }

    // Do not check for variant
    // @if not($v) {
    //     @error 'The passed variant #{$variant} is not valid.';
    // }

    @if $palette == null or $meta == null {
        @return if(
            $contrast,
            $var-string,
            hsla($var-string, if($opacity, $opacity, $a)),
        );
    }

    @return rgba(map.get($c, $variant), $alpha: if($opacity, $opacity, 1));
}

/// Retrieves a contrast text color for a given color from a color palette.
/// @access public
/// @group Palettes
/// @param {Map} $palette [null] - The source palette map.
/// @param {string} $color [primary] - The target color from the color palette.
/// @param {number|variant} $variant [500] - The target color shade from the color palette.
/// @requires color
/// @returns {Color} [#fff] - Returns white if no palette, color and/or variant matches found.
@function contrast-color($palette: null, $color: primary, $variant: 500, $opacity: null) {
    @return color($palette, $color, #{$variant}-contrast, $opacity);
}

/// Returns a CSS variable string reference as a list of words.
/// @access private
/// @param {String} $value [] - The CSS variable reference (e.g. var(--igx-primary-500).
/// @param {String} $separator ['-'] - The character to split the string by.
/// @example scss Split a CSS variable reference into Sass list.
/// $list: var-to-parts(var(--igx-primary-500)); // igx primary 500
/// @returns {List}
@function var-to-parts($value, $separator: '-') {
    @if meta.type-of($value) != 'string' {
        @return null;
    }

    $parts: str-replace($value, 'var(--');
    $parts: str-replace($parts, ')');
    @return str-split($parts, $separator);
}

/// Detects if the passed value is a CSS variable and retrieves the
/// referenced color from the passed palette.
/// If the value is not a CSS variable it's simply passed through.
/// @access private
/// @returns {Color | Map}
@function color-from-var($value, $palette: $theme-palette, $raw: true) {
    $parts: var-to-parts($value);
    $is-igx: list.index($parts, 'igx');

    @if $parts and $is-igx {
        $c: list.nth($parts, 2);
        $v: to-number(nth($parts, 3));
        $color: color($palette, $c, $v);
        @return if($raw, $color, (($c $v): $color));
    }

    @return $value;
}

/// Mixes two colors to produce an opaque color.
/// @access public
/// @param {Color} $color-1 - The first color, usually transparent.
/// @param {Color} $color-2 [#fff] - The second color, usually opaque.
/// @param {Map} $palette [$default-palette] - Pass an palette if the passed colors are CSS variable references.
/// @requires {function} color-from-var
/// @return {Color} - The color representation of the rgba value.
@function to-opaque($color-1, $color-2: #fff, $palette: $theme-palette) {
    $color-1: color-from-var($color-1, $palette);
    $color-2: color-from-var($color-2, $palette);

    @if meta.type-of($color-1) == color and meta.type-of($color-2) == color {
        $red: color.red($color-1);
        $green: color.green($color-1);
        $blue: color.blue($color-1);
        $a: color.alpha($color-1);
        $r: math.floor($a * $red + (1 - $a) * color.red($color-2));
        $g: math.floor($a * $green + (1 - $a) * color.green($color-2));
        $b: math.floor($a * $blue + (1 - $a) * color.blue($color-2));
        @return rgb($r, $g, $b);
    }
    @return $color-1;
}

/// Returns a contrast color for a passed color.
/// @access public
/// @group Palettes
/// @param {Color} $background - The background color used to return a contrast/forground color for.
/// @param {Color} $foreground - The foreground color used in case it has enough contrast against the provided background.
/// @param {String} $contrast - The contrast level according to WCAG 2.0 standards.
/// @returns {Color} - Returns either white or black depending on the luminance of the input color.
/// @link https://www.w3.org/TR/UNDERSTANDING-WCAG20/visual-audio-contrast-contrast.html
@function text-contrast(
    $background,
    $foreground: white,
    $contrast: 'AAA',
    $palette: null
) {
    $background: color-from-var($background, $palette, $raw: false);
    $foreground: color-from-var($foreground, $palette);

    @if meta.type-of($background) == 'map' {
        @return contrast-color(null, nth(map.keys($background), 1)...);
    }

    @if meta.type-of($foreground) == 'color' and meta.type-of($background) == 'color' {
        $level: map.get((
            'A': 3,
            'AA': 4.5,
            'AAA': 7
        ), $contrast);

        @if $level == null {
            @error "$contrast must be 'A', 'AA', or 'AAA'";
        }

        @if contrast($background, $foreground) >= $level {
            @return $foreground;
        } @else {
            $lightContrast: contrast($background, white);
            $darkContrast: contrast($background, black);

            @if ($lightContrast > $darkContrast) {
                @return white;
            } @else {
                @return black;
            }
        }
    } @else {
        @return $background;
    }
}

/// Test if `$value` is a valid direction.
/// @access private
/// @param {*} $value - The value to test.
/// @return {Bool}
@function is-direction($value) {
    $is-keyword: list.index(( to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: meta.type-of($value)=='number' and list.index('deg' 'grad' 'turn' 'rad', math.unit($value));
    @return $is-keyword or $is-angle;
}

/// Test if a component, or list of components
/// is in the list of known components.
/// @access private
/// @param {String|List} $items - The components list to check in.
/// @return {List} - The list of passed items.
@function is-component($items) {
    $register: map.keys($components);
    @each $item in $items {
        @if not(list.index($register, $item)) {
            @warn unquote('Can\'t exclude "#{$item}" because it is not in the list of known components.');
        }
    }
    @return $items;
}

/// Converts numbers to HEX value strings.
/// @access private
/// @param {number} $num - The number to convert.
/// @param {radix} $radix [16] - The base radix to use for the conversion.
/// @return {String} - The resulting string.
@function to-string($num, $radix: 16) {
    $chars: '0123456789abcdef';
    $result: '';
    $sign: '';
    @if $num < 0 {
        $sign: '-';
        $num: math.abs($num);
    }
    @if $num >= 0 and $num < $radix {
        @return $sign + string.slice($chars, ($num + 1), ($num + 1));
    }
    $q: $num;
    @while $q !=0 {
        $r: $q % $radix;
        $q: math.floor($q / $radix);
        $result: string.slice($chars, ($r + 1), ($r + 1)) + $result;
    }
    @return $sign + $result;
}

/// @access private
@function to-number($value) {
    @if meta.type-of($value) == 'number' {
        @return $value;
    } @else if meta.type-of($value) != 'string' {
        $_: log('Value for `to-number` should be a number or a string.');
    }

    $result: 0;
    $digits: 0;
    $minus: string.slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

    @for $i from if($minus, 2, 1) through string.length($value) {
        $character: string.slice($value, $i, $i);

        @if not(list.index(map.keys($numbers), $character) or $character == '.') {
            @return $value;
        }

        @if $character == '.' {
            $digits: 1;
        } @else if $digits == 0 {
            $result: $result * 10 + map.get($numbers, $character);
        } @else {
            $digits: $digits * 10;
            $result: $result + map.get($numbers, $character) / $digits;
        }
    }

    @return if($minus, -$result, $result);
}

/// Removes all null key-value pairs from the map
/// @access private
/// @param {Map} $map - The target map to be cleaned.
/// @returns {Map} - Returns a clean map.
@function map-clean($map) {
    $result: ();

    @each $key, $value in $map {
        @if($value) != null {
            $result: map.merge($result, (
                #{$key}: $value
            ));
        }
    }

    @return $result;
}

/// Extends a Map object with the properties of another Map object.
/// @access public
/// @param {Map...} $maps - The source map to get extended.
/// @returns {Map} - Returns the merged maps.
@function extend($maps...) {
    $result: ();

    @each $map in $maps {
        $result: map.merge($result, map-clean($map));
    }

    @return $result;
}

/// Returns a CSS property value. It could return either css '--var' or
/// a plain string value based on theme configuration.
/// @access public
/// @param {map} $map - The source theme to be used to read values from.
/// @param {string} $key - A key from the theme map to assign as value to the property.
/// @example scss Assign the color property in a rule-set to a value from the default avatar theme.
///   %igx-avatar-icon {
///     color: var-get($avatar-theme, 'icon-color');
///   }
/// Returns the value for key 'icon-color' in the '$avatar-theme';
/// @returns {String} - The value of the key in the passed map, or the name of key concatenated with the key name.
@function var-get($map, $key, $fallback: null) {
    @if map.has-key($map, $key) {
        @if not($fallback) {
            @return var(--#{$key})
        } @else {
            @return var(--#{$key}, #{$fallback})
        }
    } @else {
        @error string.unquote('The map you passed does not contain a key #{$key}');
    }
}

/// Splits a string into a list by a given separator.
/// @access private
/// @param {string} $string - The string to split.
/// @param {string} $separator - The string separator to split the string by.
@function str-split($string, $separator) {
    $split-arr: ();
    $index : string.index($string, $separator);
    @while $index != null {
        $item: string.slice($string, 1, $index - 1);
        $split-arr: list.append($split-arr, $item);
        $string: string.slice($string, $index + 1);
        $index : string.index($string, $separator);
    }
    $split-arr: list.append($split-arr, $string);
    @return $split-arr;
}

/// Resolves schema values, where the keys of the passed value map are the names
/// of the functions to be called and the value for a given key is the argument
/// the function should be called with. The output of the first function call
/// is then passed as input to the next, and so on.
/// @access private
/// @param {Map} $value - The value map to be used.
/// @param {List | Map} $payload [null] - Additional payload to be passed during function calls.
/// @example scss Resolve `color` and apply 80% opacity
///   $value: (
///     color: ('primary', 500),
///     rgba: .2
///   );
///   // $palette is a palette we pass as extra payload.
///   $resolved-value: resolve-value($value, $palette);
@function resolve-value($value, $payload: null) {
    $result: null;
    $tp: $theme-palette;

    // Uncomment to discover some broken themes
    // @if type-of($value) != 'map' or type-of($value) != 'list' {
    //     @error 'The passed value must be of type list or map.'
    // }

    @each $fn, $args in $value {
        $func: meta.get-function($fn);

        @if list.length(map.keys($value)) > 1 {
            @if $result == null and ($fn == 'color' or $fn == 'contrast-color') {
                $result: meta.call($func, $payload or $tp, $args...);
            } @else if $fn == 'to-opaque' and meta.type-of($args) == 'map' {
                $result: meta.call($func, $result, resolve-value($args, $payload or $tp));
            } @else if $result {
                $result: meta.call($func, $result, $args...);
            } @else {
                $result: meta.call($func, $args);
            }
        } @else {
            @if $result == null and ($fn == 'color' or $fn == 'contrast-color') {
                $result: meta.call($func, $payload, $args...);
            } @else {
                $result: meta.call($func, $args...);
            }
        }
    }

    @return $result;
}

/// Returns a random color.
/// @access private
@function random-color() {
    @return hsl(math.random(360), 100%, 50%);
}

@function generate-series-colors($palette) {
    $color-blind: if(meta.global-variable-exists('_igx-enhanced-accessibility'), $_igx-enhanced-accessibility, false);

    @if $color-blind {
        @return (
            rgb(86, 180, 233),
            rgb(0, 158, 115),
            rgb(240, 228, 68),
            rgb(213, 94, 0),
            rgb(214, 0, 254),
            rgb(0, 73, 159),
            rgb(230, 159, 0),
            rgb(0, 0, 0),
            rgb(132, 240, 223),
            rgb(115, 86, 86),
        );
    }

    @return (
        rgb(157, 231, 114),
        rgb(139, 91, 177),
        rgb(109, 177, 255),
        rgb(154, 242, 228),
        rgb(238, 88, 121),
        rgb(115, 86, 86),
        rgb(247, 210, 98),
        rgb(168, 168, 183),
        rgb(224, 81, 169),
        rgb(248, 161, 95),
    );
}

/// Applies an `palette` to a given theme schema.
/// @access private
/// @param {Map} $schema - A theme schema.
/// @param {Map} $palette - An palette map.
/// @requires {function} extend
/// @requires {function} resolve-value
/// @example scss Apply an `palette` to theme schema
///   $custom-palette: palette($primary: red, $secondary: blue);
///   $custom-schema: (
///     my-color: (
///        color: ('primary', 800),
///        rgba: .5
///     ),
///     roundness: 5px
///   );
///   $theme: apply-palette($custom-schema, $custom-palette); // A map with palette values resolved.
/// @returns {Map} - A map with the resolved palette values.
@function apply-palette($schema, $palette) {
    $result: ();
    @each $key, $value in $schema {
        @if meta.type-of($value) == 'map' {
            $result: extend($result, (#{$key}: resolve-value($value, $palette)));
        } @else {
            $result: extend($result, (#{$key}: $value));
        }

        @if $value == 'series' {
            $result: extend($result, (
                #{$key}: #{generate-series-colors($palette)}
            ));
        }
    }
    @return $result;
}

/// Returns true if the scope where it's called
/// is the root of the document.
/// @access private
/// @example scss Check if the current scope is root
///   @mixin smart-mixin() {
///     $scope: if(is-root(), ':root', '&');
///
///     #{$scope} {
///       /* style rules here */
///     }
///   }
///
@function is-root() {
    @each $selector in & {
        @return if($selector == null, true, false);
    }
}

/// Returns calc value between given min and max values
/// @access private
@function fraction-clamp($factor, $min, $max) {
    $min: if(math.is-unitless($min), $min * 1px, $min);
    $max: if(math.is-unitless($max), $max * 1px, $max);

    @if $min > $max {
        @error 'Min boundary should be less than max boundary.';
    }

    @return ($max - $min) * $factor + $min;
}

/// Returns a middle value between an upper and lower bound
/// @access private
/// @param {Number} $radius - A preferred value
/// @param {Number} $min - A minimum value
/// @param {Number} $max - A maximum allowed value
@function border-radius($radius, $min: rem(0), $max: $radius) {
    @return clamp($min, calc(var(--igx-radius-factor) * #{$radius}), $max);
}

/// A thin wrapper around Sass' color scale function
/// to allow pass-through for values other than those
/// of type color.
/// @access private
/// @param {Color} $color - The color to be lightened.
/// @param {Percent} $amount - The percent value by which the color will be lightened.
/// @returns {Color | any} - The modified color as produced by the lighten function.
/// If the value passed is not a color, then the passed value will be returned.
@function lighten-color($color, $amount) {
    @if meta.type-of($color) == 'color' {
        @return color.scale($color, $lightness: $amount);
    }
    @return $color;
}

/// A thin wrapper around Sass' color scale function
/// to allow pass-through for values other than those
/// of type color.
/// @access private
/// @param {Color} $color - The color to be lightened.
/// @param {Percent} $amount - The percent value by which the color will be lightened.
/// @returns {Color | any} - The modified color as produced by the lighten function.
/// If the value passed is not a color, then the passed value will be returned.
@function darken-color($color, $amount) {
    @if meta.type-of($color) == 'color' {
        @return color.scale($color, $lightness: -$amount);
    }
    @return $color;
}

@function expand-shorthand($list) {
    $len: list.length($list);

    $margins: (
        'margin-top': null,
        'margin-right': null,
        'margin-bottom': null,
        'margin-left': null,
    );

    @for $i from 1 through 4 {
        $n: $i % $len;
        $n: if($n != 0, $n, $len);

        @if $len == 3 and $i == 4 {
            $n: 2;
        }

        $key: list.nth(map.keys($margins), $i);
        $value: list.nth($list, $n);

        $margins: map.merge($margins, ($key: $value));
    }

    @return $margins;
}

@function map-keys-prefix($map, $prefix, $separator: '-') {
    $keys: map.keys($map);
    $len: list.length($keys);
    $result: ();

    @for $i from 1 through $len {
        $key: list.nth($keys, $i);

        $result: map.merge($result, (
            '#{$prefix}#{$separator}#{$key}': map.get($map, $key))
        );
    }

    @return $result;
}

@function str-replace($string, $search, $replace: '') {
    $index: string.index($string, $search);
    @if $index {
        @return string.slice($string, 1, $index - 1) + $replace + str-replace(
            string.slice($string, $index + string.length($search)),
            $search,
            $replace
        );
    }
    @return $string;
}

/// @access private
@function is-used($name, $checklist) {
    $used: true;

    @if list.index($checklist, $name) {
        $deps: map.get($components, $name, 'usedBy');
        $excluded: ();

        @each $item in $checklist {
            @if list.index($deps, $item) {
                $excluded: list.append($excluded, $item);
            }
        }

        $used: list.length($deps) != list.length($excluded);

        @if not($used) {
            $dropped-themes: list.append($dropped-themes, $name) !global;
        } @else {
            @warn 'You\'ve opted to exclude the "#{$name}" theme but it was held back as the following themes depend on it: "#{$deps}".';
        }
    }

    @return $used;
}

@function to-hsl($color) {
    @return (color.hue($color), color.saturation($color), color.lightness($color));
}
