@use 'sass:map';
@use '../../base' as *;
@use '../../themes/schemas' as *;
@use 'igniteui-theming/sass/animations/easings' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// If only background color is specified, text/icon color will be assigned automatically to a contrasting color.
/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Color} $color [null] - The text color used of the avatar.
/// @param {Color} $background [null] - The background color used of the avatar.
/// @param {Number} $border-radius [null] - The border-radius used of the avatar.
/// @param {Number} $size [null] - The size of the avatar.
/// @requires $light-material-schema
///
/// @example scss Change the background and icon colors in icon avatars
///   $my-avatar-theme: avatar-theme($icon-background: black, $icon-color: white);
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-avatar-theme);
@function avatar-theme(
    $schema: $light-material-schema,
    $background: null,
    $color: null,
    $border-radius: null,
    $size: null,
) {
    $name: 'igx-avatar';
    $avatar-schema: ();

    @if map.has-key($schema, 'avatar') {
        $avatar-schema: map.get($schema, 'avatar');
    } @else {
        $avatar-schema: $schema;
    }

    $theme: digest-schema($avatar-schema);
    $meta: map.get($theme, '_meta');

    @if not($color) and $background {
        $color: text-contrast($background);
    }

    @return extend($theme, (
        name: $name,
        background: $background,
        color: $color,
        border-radius: $border-radius,
        size: $size,
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme')
        )),
    ));
}

/// @param {Map} $theme - The theme used to style the component.
@mixin avatar($theme) {
    @include css-vars($theme);

    $variant: map.get($theme, '_meta', 'variant');
    $bootstrap-theme: $variant == 'bootstrap';

    $box-shadow: map.get((
        material: null,
        fluent: null,
        bootstrap: 0 0 0 rem(3px) var-get($theme, 'background'),
        indigo-design: null,
    ), $variant);

    %igx-avatar-outline {
        position: absolute;
        content: '';
        width: 100%;
        height: 100%;
        border-radius: inherit;
        opacity: .5;
    }

    %igx-avatar-display {
        @include sizable();
        --component-size: var(--ig-size, var(--ig-size-small));

        position: relative;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        user-select: none;
        color: var-get($theme, 'color');
        background: var-get($theme, 'background');
        vertical-align: middle;
        outline-style: none;
        flex-shrink: 0;
        width: var-get($theme, 'size');
        height: var-get($theme, 'size');

        igx-icon {
            --component-size: 3;
        }

        &::after {
            box-shadow: none;
            @if $bootstrap-theme {
                @extend %igx-avatar-outline;
            }
            transition: box-shadow .15s $in-out-quad;
        }

        &:focus::after {
            box-shadow: $box-shadow;
        }
    }

    %igx-avatar-image {
        width: 100%;
        height: 100%;
        border-radius: inherit;
        background-size: cover;
        background-repeat: no-repeat;
        background-position: center;
    }

    %igx-avatar--circle {
        border-radius: calc(#{var-get($theme, 'size')} / 2);
    }

    %igx-avatar--rounded {
        border-radius: var-get($theme, 'border-radius');
    }

    %igx-avatar--initials {
        text-transform: uppercase;
        font-size: calc(#{var-get($theme, 'size')} / 2);
        line-height: calc(#{var-get($theme, 'size')} / 2);
    }
}
