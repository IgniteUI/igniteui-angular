@use '../../base' as *;
@use '../../themes/schemas' as *;
@use '../../typography/base' as *;
@use 'sass:map';
@use 'sass:meta';

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// Returns a map containing all style properties related to the theming of the tree component.
/// @param {Map} $palette [null] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
/// @param {Color} background [null] - The background color used for the tree node.
/// @param {Color} foreground [null] - The color used for the tree node content.
/// @param {Color} background-selected [null] - The background color used for the selected tree node.
/// @param {Color} foreground-selected [null] - The color used for the content of the selected tree node.
/// @param {Color} background-active [null] - The background color used for the active tree node.
/// @param {Color} foreground-active [null] - The color used for the content of the active tree node.
/// @param {Color} background-active-selected [null] - The background color used for the active selected tree node.
/// @param {Color} foreground-active-selected [null] - The color used for the content of the active selected tree node.
/// @param {Color} background-disabled [null] - The background color used for the tree node in disabled state.
/// @param {Color} foreground-disabled [null] - The color used for the content of the disabled tree node.
/// @param {Color} drop-area-color [null] - The background color used for the tree node drop aria.
/// @param {Color} border-color [null] - The outline shadow color used for tree node in focus state.
/// @requires $light-schema
/// @requires apply-palette
/// @requires extend
/// @requires text-contrast
/// @example scss Change the tree background
///   $my-tree-theme: tree-theme($background: magenta);
///   // Pass the theme to the tree component mixin
///   @include tree($my-tree-theme);
@function tree-theme(
    $palette: null,
    $schema: $light-schema,
    $background: null,
    $background-selected: null,
    $background-active: null,
    $background-active-selected: null,
    $background-disabled: null,
    $foreground: null,
    $foreground-selected: null,
    $foreground-active: null,
    $foreground-active-selected: null,
    $foreground-disabled: null,
    $drop-area-color: null,
    $border-color: null,
) {
    $name: 'igx-tree';
    $tree-schema: ();

    @if map.has-key($schema, $name) {
        $tree-schema: map.get($schema, $name);
    } @else {
        $tree-schema: $schema;
    }

    $theme: apply-palette($tree-schema, $palette);

    @if not($foreground) and $background {
        $foreground: text-contrast($background);
    }

    @if not($foreground-selected) and $background-selected {
        $foreground-selected: text-contrast($background-selected);
    }

    @if not($foreground-active) and $background-active {
        $foreground-active: text-contrast($background-active);
    }

    @if not($foreground-active-selected) and $background-active-selected {
        $foreground-active-selected: text-contrast($background-active-selected);
    }

    @return extend($theme, (
        name: $name,
        palette: $palette,
        background: $background,
        foreground: $foreground,
        background-selected: $background-selected,
        foreground-selected: $foreground-selected,
        background-active: $background-active,
        foreground-active: $foreground-active,
        background-active-selected: $background-active-selected,
        foreground-active-selected: $foreground-active-selected,
        background-disabled: $background-disabled,
        foreground-disabled: $foreground-disabled,
        drop-area-color: $drop-area-color,
        border-color: $border-color,
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} css-vars
/// @requires var-get
@mixin tree($theme) {
    @include css-vars($theme);

    $variant: map.get($theme, variant);
    $indigo-theme: $variant == 'indigo-design';

    $node-indent: (
        comfortable: rem(24px),
        cosy: rem(16px),
        compact: rem(12px)
    );

    $node-height: (
        comfortable: rem(50px),
        cosy: rem(40px),
        compact: rem(32px)
    );

    $icon-size: rem(24px);
    $icon-space: rem(8px);

    $drop-indicator-width: (
        comfortable: calc(100% - ((#{map.get($node-indent, 'comfortable')} * 2) + (#{$icon-size} + #{$icon-space}))),
        cosy: calc(100% - ((#{map.get($node-indent, 'cosy')} * 2) + (#{$icon-size} + #{$icon-space}))),
        compact: calc(100% - ((#{map.get($node-indent, 'compact')} * 2) + (#{$icon-size} + #{$icon-space})))
    );

    %tree-display {
        display: block;
        z-index: 0;
    }

    %tree-node,
    %node-wrapper,
    %node-toggle-button,
    %node-content,
    %node-select {
        display: flex;
    }

    %tree-node {
        flex-direction: column;
    }

    %node-wrapper,
    %node-toggle-button,
    %node-select {
        align-items: center;
    }

    %node-toggle-button,
    %node-select {
        margin-inline-end: $icon-space;
    }

    %node-content,
    %node-toggle-button,
    %node-select {
        z-index: 1;
    }

    %node-toggle-button--hidden {
        visibility: hidden;
    }

    %node-wrapper {
        min-height: map.get($node-height, 'comfortable');
        padding: 0 map.get($node-indent, 'comfortable');
        position: relative;
        background: var-get($theme, 'background');
        color: var-get($theme, 'foreground');

        // We need this here, since we count on it to calculate the width of the tree drop indicator
        igx-icon {
            width: var(--igx-icon-size, #{$icon-size});
            height: var(--igx-icon-size, #{$icon-size});
            font-size: var(--igx-icon-size, #{$icon-size});
        }

        [dir='rtl'] & {
            igx-icon {
                transform: scaleX(-1);
            }
        }

        &::after {
            content: '';
            position: absolute;
            top: 0;
            inset-inline-start: 0;
            width: 100%;
            height: 100%;
            background: transparent;
            z-index: 0;
        }

        &:hover {
            &::after {
                background: var-get($theme, 'hover-color');
            }
        }

        &:focus {
            outline-width: 0;
        }

        igx-circular-bar {
            width: $icon-size;
            height: $icon-size;
        }

        &--cosy {
            min-height: map.get($node-height, 'cosy');
            padding: 0 map.get($node-indent, 'cosy');

            %node-spacer {
                width: map.get($node-indent, 'cosy')
            }

            %node-drop-indicator {
                inset-inline-end: map.get($node-indent, 'cosy');
                width: map.get($drop-indicator-width, 'cosy');
            }

            igx-circular-bar {
                width: calc(#{$icon-size} - 4px);
                height: calc(#{$icon-size} - 4px);
            }
        }

        &--compact {
            min-height: map.get($node-height, 'compact');
            padding: 0 map.get($node-indent, 'compact');

            %node-spacer {
                width: map.get($node-indent, 'compact')
            }

            %node-drop-indicator {
                inset-inline-end: map.get($node-indent, 'compact');
                width: map.get($drop-indicator-width, 'compact');
            }

            igx-circular-bar {
                width: calc(#{$icon-size} - 6px);
                height: calc(#{$icon-size} - 6px);
            }
        }
    }

    %node-wrapper--selected {
        background: var-get($theme, 'background-selected');
        color: var-get($theme, 'foreground-selected');
    }

    %node-wrapper--active {
        background: var-get($theme, 'background-active');
        color: var-get($theme, 'foreground-active');
    }

    %indigo-opacity {
        $bg-active: map.get($theme, 'background-active');

        @if ($indigo-theme) {
            @if meta.type-of($bg-active) == 'color' and lightness($bg-active) < 50 {
                opacity: .8;
            } @else {
                opacity: .3;
            }
        }
    }

    %node-wrapper--active-selected {
        background: var-get($theme, 'background-active-selected');
        color: var-get($theme, 'foreground-active-selected');
    }

    %node-wrapper--focused {
        box-shadow: inset 0 0 0 1px var-get($theme, 'border-color');
    }

    %node-wrapper--disabled {
        background: var-get($theme, 'background-disabled') !important;
        color: var-get($theme, 'foreground-disabled') !important;

        box-shadow: none !important;

        pointer-events: none;

        &::after {
            display: none;
        }

        %node-toggle-button {
            color: var-get($theme, 'foreground-disabled') !important;
        }
    }

    %node-spacer {
        display: inline-block;
        width: map.get($node-indent, 'comfortable');
    }

    %node-content {
        display: block;
        align-items: center;
        flex: 1;
        @include ellipsis();
    }

    %node-toggle-button {
        justify-content: center;
        cursor: pointer;
        user-select: none;
        min-width: $icon-size
    }

    %node-drop-indicator {
        display: flex;
        visibility: hidden;
        position: absolute;
        inset-inline-end: map.get($node-indent, 'comfortable');
        bottom: 0;
        width: map.get($drop-indicator-width, 'comfortable');

        > div {
            flex: 1;
            height: rem(1px);
            background: var-get($theme, 'drop-area-color');
        }
    }

    %node-group {
        overflow: hidden;
    }
}

/// Adds typography styles for the igx-tree component.
/// Uses the 'subtitle-1' category from the typographic scale.
/// @group typography
/// @param {Map} $type-scale - A typographic scale as produced by igx-type-scale.
/// @param {Map} $categories [(label: 'subtitle-1')] - The categories from the typographic scale used for type styles.
/// @requires {mixin} type-style
@mixin tree-typography(
    $type-scale,
    $categories: (label: 'body-2')
) {
    $text: map.get($categories, 'label');

    %node-content {
        @include type-style($type-scale, $text)
    }
}
