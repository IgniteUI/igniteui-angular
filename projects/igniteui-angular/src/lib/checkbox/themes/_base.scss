@use 'sass:map';
@use 'sass:math';
@use 'igniteui-theming/sass/animations' as *;
@use 'igniteui-theming/sass/bem' as *;
@use 'igniteui-theming/sass/themes' as *;
@use 'igniteui-theming/sass/typography' as *;
@use 'igniteui-theming/sass/color/functions' as *;
@use './light/tokens' as *;

$_theme: $material;

@layer base {
    @include scale-in-out($start-scale: 0.9);
    @include scale-in-center();

    %cbx-ripple-empty {
        background: var-get($_theme, 'empty-color');
        transition: background 0.2s $ease-out-quad;
    }

    %cbx-ripple--hovered {
        @extend %cbx-ripple-empty;
        opacity: 0.06;

        @container style(--ig-theme-variant: dark) {
            opacity: 0.12;
        }
    }

    %cbx-ripple--pressed {
        opacity: 0.12;

        @container style(--ig-theme-variant: dark) {
            opacity: 0.24;
        }
    }

    %cbx-ripple--focused {
        @extend %cbx-ripple-empty;
        @extend %cbx-ripple--pressed;
    }

    %cbx-ripple--filled {
        background: var-get($_theme, 'fill-color');
    }

    %cbx-ripple--error {
        background: var-get($_theme, 'error-color');
    }

    %cbx-ripple--hover-checked,
    %cbx-ripple--focused-checked {
        @extend %cbx-ripple--filled;
    }

    %cbx-ripple--hover-invalid,
    %cbx-ripple--focused-invalid {
        @extend %cbx-ripple--error;
    }

    @include b(igx-checkbox) {
        // TODO: These should be moved to the shema as design tokens
        --size: #{rem(20px)};
        --border-width: #{rem(2px)};
        --label-margin: #{rem(8px)};
        --mark-stroke: 3;
        --mark-length: 24;
        --mark-offset: 0;

        position: relative;
        display: inline-flex;
        flex-flow: row nowrap;
        align-items: center;
        outline-style: none;
        cursor: pointer;

        &:hover {
            @include e(ripple) {
                @extend %cbx-ripple--hovered;
            }
        }

        &:active {
            @include e(ripple) {
                @extend %cbx-ripple--hovered;
                @extend %cbx-ripple--pressed;
            }
        }

        @include e(input) {
            @include hide-default();
        }

        @include e(label) {
            display: inline-block;
            color: var-get($_theme, 'label-color');
            user-select: none;
            word-wrap: break-all;
            margin-inline-start: var(--label-margin);
            margin-block: 0;

            &:empty {
                margin: 0;
            }
        }

        @include e(label, $m: before) {
            margin-inline-end: var(--label-margin);
            order: -1;
        }

        @include e(composite-wrapper) {
            align-items: center;
            justify-content: center;
            display: flex;
            position: relative;
            width: var(--size);
            height: var(--size);

            //ripple color
            --color: #{var-get($_theme, 'empty-color')};
        }

        @include e(composite) {
            position: relative;
            display: flex;
            justify-content: center;
            width: var(--size);
            height: var(--size);
            min-width: var(--size);
            background: var-get($_theme, 'empty-fill-color');
            border-width: var(--border-width);
            border-style: solid;
            border-color: var-get($_theme, 'empty-color');
            border-radius: var-get($_theme, 'border-radius');
            -webkit-tap-highlight-color: transparent;
            transition:
                border-color 0.2s $ease-out-quad,
                background 0.2s $ease-out-quad;
            overflow: hidden;
        }

        @include e(composite-mark) {
            width: 100%;
            stroke: var-get($_theme, 'tick-color');
            stroke-linecap: square;
            stroke-width: var(--mark-stroke);
            stroke-dasharray: var(--mark-length);
            stroke-dashoffset: var(--mark-length);
            fill: none;
            opacity: 0;
            z-index: 1;
        }

        @include e(ripple) {
            --_ripple-size: #{rem(40px)};

            display: none;
            position: absolute;
            top: calc(50% - calc(var(--_ripple-size) / 2));
            width: var(--_ripple-size);
            aspect-ratio: 1;
            border-radius: var-get($_theme, 'border-radius-ripple');
            overflow: hidden;
            pointer-events: none;
            filter: opacity(1);
        }

        @include m(invalid) {
            @include e(composite) {
                border-color: var-get($_theme, 'error-color');
            }

            @include e(composite-wrapper) {
                //ripple color
                --color: #{var-get($_theme, 'error-color')};
            }

            @include e(label) {
                color: var-get($_theme, 'error-color');
            }

            &:hover {
                @include e(ripple) {
                    @extend %cbx-ripple--hovered;
                    @extend %cbx-ripple--hover-invalid;
                }

                @include e(composite) {
                    border-color: var-get($_theme, 'error-color-hover');
                }
            }

            &:active {
                @include e(ripple) {
                    @extend %cbx-ripple--hover-invalid;
                }
            }
        }

        @include m(focused) {
            @include e(ripple) {
                @extend %cbx-ripple--focused;
            }

            &:hover {
                @include e(ripple) {
                    @extend %cbx-ripple--focused;
                }
            }
        }

        @include mx(focused, invalid) {
            @include e(ripple) {
                @extend %cbx-ripple--focused-invalid;
            }
        }

        @include mx(invalid, checked) {
            @include e(composite) {
                border-color: var-get($_theme, 'error-color');
                background: var-get($_theme, 'error-color');
            }

            &:hover {
                @include e(composite) {
                    border-color: var-get($_theme, 'error-color-hover');
                    background: var-get($_theme, 'error-color-hover');
                }
            }
        }

        @include m(indeterminate) {
            @include e(composite) {
                border-color: var-get($_theme, 'fill-color');
                background: var-get($_theme, 'fill-color');
            }

            @include e(composite-mark) {
                stroke-dashoffset: 41; /* length of path - adjacent line length */
                opacity: 1;
                rotate: 45deg;
                transform: translateX(
                    calc(var(--mark-stroke) / var(--mark-length) * -1em)
                );
                margin-inline-start: var(--mark-offset);
                margin-block-start: var(--mark-offset);
            }

            &:hover {
                @include e(ripple) {
                    @extend %cbx-ripple--hovered;
                    @extend %cbx-ripple--hover-checked;
                }

                @include e(composite) {
                    border-color: var-get($_theme, 'fill-color-hover');
                    background: var-get($_theme, 'fill-color-hover');

                    /* stylelint-disable-next-line max-nesting-depth */
                    &::before {
                        background: var-get($_theme, 'fill-color-hover');
                    }
                }
            }

            &:active {
                @include e(ripple) {
                    @extend %cbx-ripple--hovered;
                    @extend %cbx-ripple--hover-checked;
                    @extend %cbx-ripple--pressed;
                }
            }
        }

        @include mx(indeterminate, checked) {
            @include e(composite-mark) {
                stroke-dashoffset: 41;
            }
        }

        @include mx(invalid, indeterminate) {
            @include e(composite) {
                border-color: var-get($_theme, 'error-color');
                background: var-get($_theme, 'error-color');
            }

            &:hover {
                @include e(composite) {
                    border-color: var-get($_theme, 'error-color-hover');
                    background: var-get($_theme, 'error-color-hover');
                }
            }
        }

        @include mx(invalid, indeterminate, checked) {
            @include e(composite) {
                border-color: var-get($_theme, 'error-color');
                background: var-get($_theme, 'error-color');
            }

            &:hover {
                @include e(composite) {
                    border-color: var-get($_theme, 'error-color-hover');
                    background: var-get($_theme, 'error-color-hover');
                }
            }
        }

        @include m(checked) {
            @include e(composite) {
                border-color: var-get($_theme, 'fill-color');
                background: var-get($_theme, 'fill-color');
            }

            @include e(composite-mark) {
                stroke-dashoffset: 0;
                opacity: 1;
                transition:
                    all 0.2s $ease-out-quad,
                    opacity 0.2s $ease-out-quad;
            }

            @include e(composite-wrapper) {
                //ripple color
                --color: #{var-get($_theme, 'fill-color')};
            }

            &:hover {
                @include e(ripple) {
                    @extend %cbx-ripple--hovered;
                    @extend %cbx-ripple--hover-checked;
                }

                @include e(composite) {
                    border-color: var-get($_theme, 'fill-color-hover');
                    background: var-get($_theme, 'fill-color-hover');
                }
            }

            &:active {
                @include e(ripple) {
                    @extend %cbx-ripple--hovered;
                    @extend %cbx-ripple--hover-checked;
                    @extend %cbx-ripple--pressed;
                }
            }
        }

        @include m(disabled) {
            user-select: none;
            pointer-events: none;
            cursor: initial;

            @include e(label) {
                color: var-get($_theme, 'disabled-color-label');
            }

            @include e(label, $m: before) {
                color: var-get($_theme, 'disabled-color-label');
            }

            @include e(composite) {
                border-color: var-get($_theme, 'disabled-color');
            }
        }

        @include m(plain) {
            @include e(composite) {
                transition: none;

                &::after {
                    transition: none;
                }
            }

            @include e(composite-mark) {
                transition: none;
            }
        }

        @include mx(focused, checked) {
            @include e(ripple) {
                @extend %cbx-ripple--focused;
                @extend %cbx-ripple--focused-checked;
            }
        }

        @include mx(focused, indeterminate) {
            @include e(ripple) {
                @extend %cbx-ripple--focused;
                @extend %cbx-ripple--focused-checked;
            }
        }
    }
}
