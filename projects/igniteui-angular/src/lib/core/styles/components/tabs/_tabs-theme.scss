@use 'sass:map';
@use 'sass:meta';
@use '../../base' as *;
@use '../ripple/ripple-theme' as *;
@use '../ripple/ripple-component' as *;
@use '../../themes/schemas' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// If only background color is specified,
/// the idle item color will be assigned automatically to a contrasting color.
/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Color} $item-text-color [null] - The color used for the tab text color.
/// @param {Color} $item-background [null] - The background color used for the tabs header.
/// @param {Color} $item-hover-background [null] - The background used for the tabs on hover.
/// @param {Color} $item-hover-color [null] - The text color used for the tabs on hover.
/// @param {Color} $item-icon-color [null] - The color used for the tab icon.
/// @param {Color} $item-active-icon-color [null] - The color used for the active tab icon.
/// @param {Color} $item-hover-icon-color [null] - The color used for the tab icon on hover.
/// @param {Color} $item-disabled-icon-color [null] - The color used for the disabled tab icon.
/// @param {Color} $item-active-color [null] - The color used for the active tabs text.
/// @param {Color} $item-active-background [null] - The color used for the active/focused tab background.
/// @param {Color} $item-disabled-color [null] - The color used for the disabled tabs text.
/// @param {Color} $indicator-color [null] - The color used for the active tab indicator.
/// @param {Color} $button-color [null] - The color used for the button icon/text color.
/// @param {Color} $button-hover-color [null] - The color used for the button icon/text color on hover.
/// @param {Color} $button-disabled-color [null] - The color used for the disabled button icon/text.
/// @param {Color} $button-background [null] - The color used for the button background.
/// @param {Color} $button-hover-background [null] - The color used for the button background on hover.
/// @param {List} $border-radius [null] - The border radius for the tabs.
/// @param {Color} $border-color [null] - The border color of the tabs.
/// @param {Color} $border-color--hover [null] - The border color of the tabs on hover.
/// @param {Color} $tab-ripple-color [null] - The color used for the button background.
/// @param {Color} $button-ripple-color [null] - The color used for the button background on hover.
/// @requires $light-material-schema
/// @example scss Set a custom background color
///   $my-tabs-theme: tabs-theme(
///      $item-background: orange
///    );
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-tabs-theme);
@function tabs-theme(
    $schema: $light-material-schema,
    $item-text-color: null,
    $item-background: null,
    $item-hover-background: null,
    $item-hover-color: null,
    $item-icon-color: null,
    $item-active-icon-color: null,
    $item-hover-icon-color: null,
    $item-disabled-icon-color: null,
    $item-active-color: null,
    $item-active-background: null,
    $item-disabled-color: null,
    $indicator-color: null,
    $button-color: null,
    $button-background: null,
    $button-hover-background: null,
    $button-hover-color: null,
    $button-disabled-color: null,
    $tab-ripple-color: null,
    $button-ripple-color: null,
    $border-radius: null,
    $border-color: null,
    $border-color--hover: null,
) {
    $name: 'igx-tabs';
    $tabs-schema: ();

    @if map.has-key($schema, 'tabs') {
        $tabs-schema: map.get($schema, 'tabs');
    } @else {
        $tabs-schema: $schema;
    }

    $theme: digest-schema($tabs-schema);
    $variant: map.get($theme, '_meta', 'theme');

    @if not($item-hover-background) and $item-background {
        $item-hover-background: hsl(from var(--item-background) h s calc(l * 0.9));
    }

    @if not($item-active-background) and $item-background {
        $item-active-background: hsl(from var(--item-background) h s calc(l * 0.9));
    }

    @if not($item-background) {
        @if not($item-text-color) and $item-icon-color {
            $item-text-color: var(--item-icon-color);
        }

        @if not($item-icon-color) and $item-text-color {
            $item-icon-color: var(--item-text-color);
        }
    } @else {
        @if not($item-text-color) and $item-background {
            $item-text-color: hsla(from adaptive-contrast(var(--item-background)) h s l / 0.7);
         }

         @if not($item-icon-color) and $item-background {
             $item-icon-color: hsla(from adaptive-contrast(var(--item-background) h s l / 0.7));
         }
    }

    @if $variant == 'bootstrap' {
        @if not($item-hover-color) and $item-text-color {
            $item-hover-color: hsl(from var(--item-text-color) h s calc(l * 0.9));
        }

        @if not($item-hover-icon-color) and $item-icon-color {
            $item-hover-icon-color: hsla(from var(--item-icon-color) h s calc(l * 0.9));
        }

        @if not($border-color) and $item-background {
            $border-color: hsla(from adaptive-contrast(var(--item-background)) h s l / 0.5);
        }

        @if not($border-color--hover) and $border-color {
            $border-color--hover: var(--border-color);
        }
    } @else {
        @if not($item-hover-color) and $item-text-color {
            $item-hover-color: hsla(from var(--item-text-color) h s l / 1);
        }

        @if not($item-hover-icon-color) and $item-icon-color {
            $item-hover-icon-color: hsla(from var(--item-icon-color) h s l / 1);
        }

        @if not($item-background) {
            @if not($indicator-color) and $item-text-color {
                $indicator-color: var(--item-text-color);
            }

            @if not($indicator-color) and $item-icon-color {
                $indicator-color: var(--item-icon-color);
            }
        } @else {
            @if not($indicator-color) {
                $indicator-color: adaptive-contrast(var(--item-background));
            }
        }
    }

    @if not($item-active-background) {
        @if $variant != 'bootstrap' {
            @if not($item-active-icon-color) and $item-icon-color {
                $item-active-icon-color: var(--item-icon-color);
            }

            @if not($item-active-color) and $item-text-color {
                $item-active-color: var(--item-text-color);
            }
        }
    } @else {
        @if not($item-active-icon-color) and $item-active-background {
            $item-active-icon-color: adaptive-contrast(var(--item-active-background));
        }

        @if not($item-active-color) and $item-active-background {
            $item-active-color: adaptive-contrast(var(--item-active-background));
        }
    }

    // Button
    @if $item-background {
        @if not($button-background) and $item-background {
            $button-background: var(--item-background);
        }

        @if not($button-color) and $button-background {
            $button-color: adaptive-contrast(var(--button-background));
        }

        @if not($button-hover-background) and $item-background {
            $button-hover-background: hsl(from var(--item-background) h s calc(l * 0.9));
        }

        @if not($button-hover-color) and $button-hover-background {
            $button-hover-color: adaptive-contrast(var(--button-hover-background));
        }

        @if not($button-disabled-color) and $button-color {
            $button-disabled-color: hsla(from var(--button-color) h s l / 0.4);
        }

        @if not($button-ripple-color) and $button-color {
            $button-ripple-color: var(--button-color);
        }
    } @else {
        @if $variant != 'material' {
            @if not($button-color) and $item-text-color {
                $button-color: var(--item-text-color);
            }

            @if not($button-hover-color) and $button-color {
                $button-hover-color: hsl(from var(--button-color) h s calc(l * 0.9));
            }

            @if not($button-disabled-color) and $button-color {
                $button-disabled-color: hsla(from var(--button-color) h s l / 0.5);
            }
        }
    }
    // Button end

    @if not($tab-ripple-color) and $item-active-background {
        $tab-ripple-color: text-contrast($item-active-background);
    }

    @if not($tab-ripple-color) and $item-background {
        $tab-ripple-color: text-contrast($item-background);
    }

    @return extend($theme, (
        name: $name,
        item-text-color: $item-text-color,
        item-background: $item-background,
        item-hover-color: $item-hover-color,
        item-hover-background: $item-hover-background,
        item-icon-color: $item-icon-color,
        item-active-icon-color: $item-active-icon-color,
        item-hover-icon-color: $item-hover-icon-color,
        item-disabled-icon-color: $item-disabled-icon-color,
        item-active-color: $item-active-color,
        item-active-background: $item-active-background,
        item-disabled-color: $item-disabled-color,
        indicator-color: $indicator-color,
        button-color: $button-color,
        button-background: $button-background,
        button-hover-background:$button-hover-background,
        button-hover-color:$button-hover-color,
        button-disabled-color:$button-disabled-color,
        tab-ripple-color: $tab-ripple-color,
        button-ripple-color: $button-ripple-color,
        border-color: $border-color,
        border-color--hover: $border-color--hover,
        border-radius: $border-radius,
    ));
}

/// @deprecated Use the `css-vars` mixin instead.
/// @see {mixin} css-vars
/// @param {Map} $theme - The theme used to style the component.
/// @requires ripple-theme
/// @requires {mixin} ripple
@mixin tabs($theme) {
    @include css-vars($theme);

    $variant: map.get($theme, '_meta', 'theme');
    $not-bootstrap-theme: $variant != 'bootstrap';
    $bootstrap-theme: $variant == 'bootstrap';
    $indigo-theme: $variant == 'indigo';
    $theme-variant: map.get($theme, '_meta', 'variant');

    $item-min-width: rem(90px);
    $item-max-width: rem(360px);
    $item-min-height: map.get((
        'material': rem(48px),
        'fluent': rem(44px),
        'bootstrap': rem(48px),
        'indigo': rem(40px)
    ), $variant);

    $tabs-animation-function: cubic-bezier(.35, 0, .25, 1);

    $item-padding: rem(11px) rem(16px);

    $tabs-ripple-theme: ripple-theme(
        $schema: $light-material-schema,
        $color: var-get($theme, 'tab-ripple-color')
    );

    $button-ripple-theme: ripple-theme(
        $schema: $light-material-schema,
        $color: var-get($theme, 'button-ripple-color')
    );

    %tabs-header,
    %tabs-header-button,
    %tabs-header-item-inner,
    %tabs-header-content {
        display: flex;
        align-items: center;
    }

    %tabs-display {
        --nav-btn-border-color: #{var-get($theme, 'border-color')};

        display: flex;
        flex-direction: column;
        overflow: hidden;
    }

    %tabs-header {
        overflow: hidden;
        flex: 0 0 auto;
        background: var-get($theme, 'item-background');
        z-index: 1;
    }

    %tabs-header-content {
        flex: 1 1 auto;
        overflow: hidden;
        scroll-behavior: smooth;
    }

    %tabs-header-wrapper {
        position: relative;
        flex-grow: 1;

        @if $bootstrap-theme {
            &::after {
                content: '';
                position: absolute;
                bottom: 0;
                inset-inline-start: 0;
                width: 100%;
                height: rem(1px);
                background: var-get($theme, 'border-color');
                z-index: 0;
            }
        }
    }

    %tabs-header-scroll {
        display: flex;
        height: 100%;
    }

    %tabs-header-button {
        align-items: center;
        justify-content: center;
        z-index: 1;
        border: none;
        padding: 0;
        min-width: rem(48px);
        width: rem(48px);
        cursor: pointer;
        position: relative;
        background: var-get($theme, 'button-background');
        color: var-get($theme, 'button-color');
        outline: 0;
        align-self: stretch;
        height: auto;
        transition: none;
        border-radius: border-radius(0);

        &:hover {
            background: var-get($theme, 'button-hover-background');
            color: var-get($theme, 'button-hover-color');
        }

        &:focus {
            outline: 0;

            @if $variant != 'indigo' {
                background: var-get($theme, 'button-hover-background');
            }
        }

        &::-moz-focus-inner {
            // remove focus dotted border in firefox
            border: 0;
        }

        &:disabled {
            color: var-get($theme, 'button-disabled-color');
            cursor: default;
            pointer-events: none;
        }

        &--none {
            display: none;
        }

        @if $indigo-theme {
            min-width: rem(40px);
            width: rem(40px);

            &::after {
                content: '';
                position: absolute;
                pointer-events: none;
                width: 100%;
                height: 100%;
                border-bottom: rem(1px) solid var(--nav-btn-border-color);
            }
        }

        @include ripple($button-ripple-theme);
        @include css-vars($button-ripple-theme);

        igx-icon {
            $icon-size: #{if($variant == 'indigo', rem(16px), rem(24px))};

            --ig-icon-size: #{$icon-size};
            --igx-icon-size: #{$icon-size};
        }

        [dir='rtl'] & {
            transform: scaleX(-1);
        }
    }

    %tabs-header-item {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        min-width: $item-min-width;
        max-width: $item-max-width;
        min-height: $item-min-height;
        word-wrap: break-word;
        // Flex basis & shrink are Needed for IE11
        flex-basis: auto;
        flex-shrink: 0;
        padding: $item-padding;
        overflow: hidden;
        cursor: pointer;
        position: relative;
        user-select: none;
        background: var-get($theme, 'item-background');
        color: var-get($theme, 'item-text-color');
        outline: 0;

        igx-icon {
            color: var-get($theme, 'item-icon-color');
        }

        @if $bootstrap-theme {
            padding-block: rem(12px);
            border-start-start-radius: var-get($theme, 'border-radius');
            border-start-end-radius: var-get($theme, 'border-radius');
        }

        @if $not-bootstrap-theme {
            transition: all .3s $tabs-animation-function;
            border: rem(1px) solid var-get($theme, 'border-color');

            &:hover,
            &:focus {
                border: rem(1px) solid var-get($theme, 'border-color--hover');
            }
        }

        @if $indigo-theme {
            border-top: rem(1px) solid transparent;
            border-inline: none;

            &:hover,
            &:focus {
                border-top: rem(1px) solid transparent;
                border-inline: none;
                border-bottom: rem(1px) solid var-get($theme, 'border-color');
            }

            igx-icon {
                --ig-size: 2;
            }
        }

        > * {
            margin-inline-start: rem(if($variant != 'indigo', 12px, 8px));

            &:first-child {
                margin-inline-start: 0;
            }
        }

        &::-moz-focus-inner {
            border: 0;
        }

        &:focus {
            background: var-get($theme, 'item-active-background');
            color: var-get($theme, 'item-hover-color');
            border-bottom-color: transparent;
        }

        &:hover {
            background: var-get($theme, 'item-hover-background');
            color: var-get($theme, 'item-hover-color');

            @if $bootstrap-theme {
                box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'border-color--hover');
            }
        }

        &:hover,
        &:focus {
            igx-icon {
                color: var-get($theme, 'item-hover-icon-color');
            }
        }

        @include ripple($tabs-ripple-theme);
        @include css-vars($tabs-ripple-theme);
    }

    %tabs-header-item--selected {
        outline: 0;
        color: var-get($theme, 'item-active-color');

        &:hover,
        &:focus {
            background: var-get($theme, 'item-active-background');
            color: if($variant == 'fluent', var-get($theme, 'item-hover-color'), var-get($theme, 'item-active-color'));

            igx-icon {
                color: var-get($theme, 'item-active-icon-color');
            }
        }

        igx-icon {
            color: var-get($theme, 'item-active-icon-color');
        }

        @if $bootstrap-theme {
            background: var-get($theme, 'item-active-background');
            position: relative;
            box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'border-color');
            z-index: 1;

            &:not(:focus) {
                &::before {
                    content: '';
                    position: absolute;
                    bottom: 0;
                    inset-inline-start: 0;
                    width: 100%;
                    height: rem(1px);
                    background: linear-gradient(
                            to right,
                            var-get($theme, 'border-color') 1px,
                            var-get($theme, 'item-active-background') 1px,
                            var-get($theme, 'item-active-background') calc(100% - 1px),
                            var-get($theme, 'border-color') calc(100% - 1px)
                    );
                    z-index: -1;
                }
            }

            &:hover {
                box-shadow: inset 0 0 0 rem(1px) var-get($theme, 'border-color');
            }
        }

        @if $variant == 'fluent' {
            %tabs-header-item-inner > [igxtabheaderlabel] {
                font-weight: 600;
            }
        }

        @if $indigo-theme {
            &:hover,
            &:focus-visible {
                background: var-get($theme, 'item-hover-background');
            }
        }
    }

    %tabs-header-item:focus,
    %tabs-header-item--selected:focus {
        @if $bootstrap-theme {
            border: none;
            box-shadow: inset 0 0 0 rem(2px) var-get($theme, 'item-hover-color');
            border-radius: rem(4px);
            z-index: 1;

            &::after {
                display: none;
            }
        }
    }

    %tabs-header-item--disabled {
        outline: 0;
        color: var-get($theme, 'item-disabled-color');
        cursor: default;
        pointer-events: none;

        igx-icon {
            color: var-get($theme, 'item-disabled-icon-color');
        }
    }

    %tabs-header-item-inner {
        display: flex;
        align-items: center;
        justify-content: center;
        flex-direction: column;
        text-align: center;

        > [igxtabheaderlabel] {
            @include line-clamp(2, true, true);
        }

        > [igxtabheadericon] {
            margin-bottom: rem(8px);

            &:last-child {
                margin-bottom: 0;
            }
        }
    }

    %tabs-header-active-indicator {
        position: absolute;
        bottom: 0;
        // We need to explicitly set the default for IE 11
        left: 0;
        transform: translateX(0);
        height: rem(2px);
        min-width: $item-min-width;
        background: var-get($theme, 'indicator-color');
        transition: transform .3s $tabs-animation-function, width .2s $tabs-animation-function;

        @if $bootstrap-theme {
            display: none;
        }

        @if $indigo-theme {
            height: rem(3px);
        }
    }

    %tabs-panels {
        position: relative;
        overflow: hidden;
        display: flex;
        flex-direction: column;
        flex: 1 1 auto;
    }

    %tabs-panel {
        position: absolute;
        inset: 0;
        overflow-x: hidden;
        overflow-y: auto;
        flex: 1 1 auto;

        &::-moz-focus-inner {
            // remove focus dotted border in firefox
            border: 0;
        }

        &:focus {
            outline-width: 0;
        }

        &[tabindex='0'] {
            position: relative;
        }
    }

    %tabs-header-scroll--start {
        justify-content: flex-start;
    }

    %tabs-header-scroll--end {
        justify-content: flex-end;
        min-width: max-content;
    }

    %tabs-header-scroll--center {
        justify-content: center;
        min-width: max-content;
    }

    %tabs-header-scroll--justify {
        %tabs-header-item {
            flex-basis: 0;
            flex-grow: 1;
            max-width: 100%;
        }
    }
}

/// Adds typography styles for the igx-tabs component.
/// Uses the 'subtitle-2'
/// category from the typographic scale.
/// @group typography
/// @param {Map} $categories [(label: 'button')] - The categories from the typographic scale used for type styles.
@mixin tabs-typography($categories: (label: 'button')) {
    $label: map.get($categories, 'label');

    %tabs-header-item-inner > [igxtabheaderlabel] {
        @include type-style($label) {
            margin-top: 0;
            margin-bottom: 0;
            @content;
        }
    }
}
