@use 'sass:map';
@use 'sass:meta';
@use '../../base' as *;
@use '../../themes/schemas' as *;
@use 'igniteui-theming/sass/animations/easings' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// If only background color is specified, text/icon color
/// will be assigned automatically to a contrasting color.
/// Does ___not___ apply for disabled state colors.
/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Map} $elevations [null] - The elevations (shadows) map to be used.
///
/// @param {box-shadow} $shadow [null] - The shadow to be applied for the button group.
/// @param {Color} $item-text-color [null]- The text color for button group items.
/// @param {color} $item-icon-color [null]- The icon color for button group items.
/// @param {Color} $item-background [null] - The background color for button group items .
/// @param {Color} $item-border-color [null] - The border color between button group items.
///
/// @param {Color} $item-hover-text-color [null] - The hover text color for button group items.
/// @param {Color} $item-hover-icon-color [null] - The hover icon color for button group items.
/// @param {Color} $item-hover-background [null] - The hover background color for button group items.
/// @param {Color} $item-hover-border-color [null] - The hover border color between button group items.
///
/// @param {Color} $item-focused-text-color [null] - The focused text color for button group items.
/// @param {Color} $item-focused-background [null] - The focused background color for button group items.
/// @param {Color} $item-focused-border-color [null] - The focused border color for an item from the button group.
/// @param {Color} $idle-shadow-color [null] - The outline color of focused button group items.
/// @param {Color} $selected-shadow-color [null] - The outline color of focused/selected button group items.
///
/// @param {Color} $disabled-text-color [null]- The text/icon color for a disabled item in the button group.
/// @param {Color} $disabled-background-color [null] - The background color for a disabled item in the button group.
/// @param {Color} $item-disabled-border [null] - The border color for a disabled item in the button group.
///
/// @param {Color} $item-selected-text-color [null]- The text color for a selected item in the button group.
/// @param {Color} $item-selected-icon-color [null]- The icon color for a selected item in the button group.
/// @param {Color} $item-selected-background [null] - The background color for a selected item in the button group.
/// @param {Color} $item-selected-border-color [null] - The border color for a selected item from the button group.
///
/// @param {Color} $item-selected-hover-text-color [null] - The text color for a selected item in hover state in the button group.
/// @param {Color} $item-selected-hover-icon-color [null] - The icon color for a selected item in hover state in the button group.
/// @param {Color} $item-selected-hover-background [null] - The background color for a selected item in hover or focus state in the button group.
/// @param {Color} $item-selected-hover-border-color [null] - The border color for a selected item in hover state in the button group.
///
/// @param {Color} $disabled-selected-text-color [null] - The disabled text color for a selected item in the button group.
/// @param {Color} $disabled-selected-icon-color [null] - The disabled icon color for a selected item in the button group.
/// @param {Color} $disabled-selected-background [null] - The disabled background color for a selected item in the button group.
/// @param {Color} $disabled-selected-border-color [null] - The disabled border color for a selected item from the button group.
///
/// @param {List} $border-radius [null] - The border radius used for button-group component.
///
/// @requires $light-material-schema
///
/// @example scss Change the background, text, and border colors
///   $my-button-group-theme: button-group-theme(
///     $item-text-color: white,
///     $item-background: rgba(0, 0, 0, .8),
///     $item-border-color: #dadada
///   );
///   // Pass the theme to the css-vars() mixin
///   @include css-vars($my-button-group-theme);
@function button-group-theme(
    $schema: $light-material-schema,
    $elevations: null,
    $shadow: null,

    $item-text-color: null,
    $item-icon-color: null,
    $item-background: null,
    $item-border-color: null,

    $item-hover-text-color: null,
    $item-hover-icon-color: null,
    $item-hover-background: null,
    $item-hover-border-color: null,

    $item-focused-text-color: null,
    $item-focused-border-color: null,
    $item-focused-background: null,
    $idle-shadow-color: null,
    $selected-shadow-color: null,
    $border-radius: null,

    $disabled-text-color: null,
    $disabled-background-color: null,
    $item-disabled-border: null,

    $item-selected-text-color: null,
    $item-selected-icon-color: null,
    $item-selected-background: null,
    $item-selected-border-color: null,

    $item-selected-hover-text-color: null,
    $item-selected-hover-icon-color: null,
    $item-selected-hover-background: null,
    $item-selected-hover-border-color: null,

    $disabled-selected-text-color: null,
    $disabled-selected-icon-color: null,
    $disabled-selected-background: null,
    $disabled-selected-border-color: null,
) {
    $name: 'igx-button-group';
    $selector: 'igx-buttongroup';
    $button-group-schema: ();

    @if map.has-key($schema, 'button-group') {
        $button-group-schema: map.get($schema, 'button-group');
    } @else {
        $button-group-schema: $schema;
    }

    $theme: digest-schema($button-group-schema);
    $meta: map.get($theme, '_meta');

    $border: rem(1px) solid map.get($theme, 'item-selected-border-color');

    @if not($item-text-color) and $item-background {
        @if meta.type-of($item-background) == 'color' {
            $item-text-color: text-contrast($item-background);
        }
    }

    @if not($item-hover-text-color) and $item-hover-background {
        @if meta.type-of($item-hover-background) == 'color' {
            $item-hover-text-color: text-contrast($item-hover-background);
        }
    }

    @if not($item-selected-background) and $item-background {
        @if meta.type-of($item-background) == 'color' {
            $item-selected-text-color: text-contrast($item-background);
        }
    }

    @if not($idle-shadow-color) and $selected-shadow-color {
        @if meta.type-of($selected-shadow-color) == 'color' {
            $idle-shadow-color: $selected-shadow-color;
        }
    }

    @if not($selected-shadow-color) and $idle-shadow-color {
        @if meta.type-of($idle-shadow-color) == 'color' {
            $selected-shadow-color: $idle-shadow-color;
        }
    }

    @if not($item-selected-text-color) and $item-selected-background {
        @if meta.type-of($item-selected-background) == 'color' {
            $item-selected-text-color: text-contrast($item-selected-background);
        }
    }

    @if map.get($button-group-schema, 'elevation') > 0 {
        $border: none;
    }

    @if not($shadow) {
        $elevation: map.get($button-group-schema, 'elevation');
        $shadow: elevation($elevation);
    }

    @return extend($theme, (
        name: $name,
        selector: $selector,
        item-text-color: $item-text-color,
        item-icon-color: $item-icon-color,
        item-background: $item-background,
        item-border-color: $item-border-color,
        item-focused-text-color: $item-focused-text-color,
        item-focused-background: $item-focused-background,
        item-focused-border-color: $item-focused-border-color,
        border-radius: $border-radius,
        item-hover-text-color: $item-hover-text-color,
        item-hover-icon-color: $item-hover-icon-color,
        item-hover-background: $item-hover-background,
        item-hover-border-color: $item-hover-border-color,
        disabled-text-color:$disabled-text-color,
        disabled-background-color:$disabled-background-color,
        item-disabled-border: $item-disabled-border,
        item-selected-text-color: $item-selected-text-color,
        item-selected-icon-color: $item-selected-icon-color,
        item-selected-background: $item-selected-background,
        item-selected-border-color: $item-selected-border-color,
        item-selected-hover-text-color: $item-selected-hover-text-color,
        item-selected-hover-icon-color: $item-selected-hover-icon-color,
        item-selected-hover-background: $item-selected-hover-background,
        item-selected-hover-border-color: $item-selected-hover-border-color,
        disabled-selected-text-color: $disabled-selected-text-color,
        disabled-selected-icon-color: $disabled-selected-icon-color,
        disabled-selected-background: $disabled-selected-background,
        disabled-selected-border-color: $disabled-selected-border-color,
        border: $border,
        shadow: $shadow,
        idle-shadow-color: $idle-shadow-color,
        selected-shadow-color: $selected-shadow-color,
        _meta: map.merge(if($meta, $meta, ()), (
            variant: map.get($schema, '_meta', 'theme')
        )),
    ));
}

/// @deprecated Use the `css-vars` mixin instead.
/// @see {mixin} css-vars
/// @param {Map} $theme - The theme used to style the component.
@mixin button-group($theme) {
    @include css-vars($theme);
    $group-item-min-width: rem(24px);
    $group-item-border-thickness: rem(1px);
    $group-items-margin: rem(10px, 16px);
    $outline-btn-indent: rem(2px);

    $variant: map.get($theme, '_meta', 'variant');
    $bootstrap-theme: $variant == 'bootstrap';
    $indigo-theme: $variant == 'indigo-design';

    %igx-group-display {
        display: flex;
        box-shadow: var-get($theme, 'shadow');
        border-radius: var-get($theme, 'border-radius');

        button {
            // The margin here is required to fix a bug in Safari #7858
            margin-top: 0;
            margin-inline-end: 0;
            margin-bottom: 0;
        }
    }

    %igx-group-item {
        border: $group-item-border-thickness solid var-get($theme, 'item-border-color');
        color: var-get($theme, 'item-text-color');
        background: var-get($theme, 'item-background');
        min-width: $group-item-min-width;
        display: flex;
        flex: 1 0 0%;
        justify-content: center;
        align-items: center;
        text-decoration: none;
        cursor: pointer;
        user-select: none;
        position: relative;
        z-index: 0;

        &[igxButton] {
            border-radius: 0;
            border-color: var-get($theme, 'item-border-color');

            @if $bootstrap-theme {
                margin: 0 !important;
                border: none;
            }
        }

        igx-icon {
            color: var-get($theme, 'item-icon-color');
        }

        &:not(:nth-child(1)) {
            margin-inline-start: rem(-1px);
        }

        &:first-of-type {
            border-start-start-radius: inherit;
            border-end-start-radius: inherit;
        }

        &:last-of-type {
            border-start-end-radius: inherit;
            border-end-end-radius: inherit;
        }

        &[igxButton][disabled='true'] {
            color: var-get($theme, 'disabled-text-color');
            background: var-get($theme, 'disabled-background-color');
            border-color: var-get($theme, 'item-disabled-border');

            igx-icon {
                color: var-get($theme, 'disabled-text-color');
            }
        }

        &:hover,
        &:focus {
            color: var-get($theme, 'item-hover-text-color');
            background: var-get($theme, 'item-hover-background');

            igx-icon {
                color: var-get($theme, 'item-hover-icon-color');
            }
        }

        &:focus {
            @if $bootstrap-theme or $indigo-theme {
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'idle-shadow-color');
            }

            @if $indigo-theme {
                z-index: 2;
            }

            &:hover {
                igx-icon {
                    color: var-get($theme, 'item-hover-icon-color');
                }
            }
        }

        @if $variant != 'fluent' {
            &:focus,
            &:focus-visible {
                &:hover {
                    color: var-get($theme, 'item-hover-text-color');
                    background: var-get($theme, 'item-hover-background');
                }
            }
        }

        @if $variant == 'fluent' {
            min-width: rem(50px);

            igx-icon {
                $icon-size: rem(18px);

                --ig-icon-size: #{$icon-size};
                --igx-icon-size: #{$icon-size};
            }

            &:focus,
            &:focus-visible {
                background: var-get($theme, 'item-background');

                &:hover {
                    background: var-get($theme, 'item-hover-background');
                }

                &:active {
                    background: var-get($theme, 'item-focused-background');
                }
            }

            &:focus-visible {
                &::after {
                    content: '';
                    position: absolute;
                    inset-block-start: $outline-btn-indent;
                    inset-inline-start: $outline-btn-indent;
                    pointer-events: none;
                    width: calc(100% - (#{$outline-btn-indent} * 2));
                    height: calc(100% - (#{$outline-btn-indent} * 2));
                    box-shadow: 0 0 0 rem(1px) var-get($theme, 'item-focused-border-color');
                }
            }
        }

        @if $variant == 'indigo-design' {
            padding-inline: pad-inline(rem(8px));

            igx-icon {
                $icon-size: rem(16px);

                --ig-icon-size: #{$icon-size};
                --igx-icon-size: #{$icon-size};
            }

            &:hover {
                border-color: var-get($theme, 'item-hover-border-color');
                z-index: 1;
            }

            &:focus {
                color: var-get($theme, 'item-focused-text-color');
                background: var-get($theme, 'item-focused-background'); 

                igx-icon {
                    color: var-get($theme, 'item-icon-color');
                }

                &:hover {
                    color: var-get($theme, 'item-hover-text-color');
                    background: var-get($theme, 'item-hover-background');
                    border-color: var-get($theme, 'item-hover-border-color');
                }
            }

            &:active {
                color: var-get($theme, 'item-hover-text-color');
                background: var-get($theme, 'item-hover-background');
                border-color: var-get($theme, 'item-hover-border-color');
                box-shadow: 0 0 0 rem(3px) var-get($theme, 'idle-shadow-color');
                z-index: 2;

                igx-icon {
                    color: var-get($theme, 'item-hover-icon-color');
                }
            }
        }
    }

    %igx-group-item-vertical {
        &:not(:nth-child(1)) {
            margin-top: rem(-1px);
            margin-inline-start: 0;
        }

        &:first-of-type {
            border-start-start-radius: inherit;
            border-start-end-radius: inherit;
            border-end-start-radius: 0;
            border-end-end-radius: 0;
        }

        &:last-of-type {
            border-start-start-radius: 0;
            border-start-end-radius: 0;
            border-end-start-radius: inherit;
            border-end-end-radius: inherit;
        }
    }

    %igx-group-item-selected {
        color: var-get($theme, 'item-selected-text-color');
        background: var-get($theme, 'item-selected-background');
        border-color: var-get($theme, 'item-selected-border-color');
        position: relative;
        z-index: 1;

        &:hover,
        &:focus {
            @if $variant != 'fluent' {
                color: var-get($theme, 'item-selected-text-color');
                background: var-get($theme, 'item-selected-hover-background');
            }
        }

        &[igxButton] {
            border-color: var-get($theme, 'item-selected-border-color');
        }

        igx-icon {
            color: var-get($theme, 'item-selected-icon-color');
        }

        &:hover {
            border-color: var-get($theme, 'item-selected-hover-border-color');
            color: var-get($theme, 'item-selected-hover-text-color');

            igx-icon {
                color: var-get($theme, 'item-selected-hover-icon-color');
            }
        }

        &:focus {
            z-index: 3;
            background: var-get($theme, 'item-selected-background');
            box-shadow: 0 0 0 rem(3px) var-get($theme, 'selected-shadow-color');

            igx-icon {
                color: var-get($theme, 'item-selected-icon-color');
            }
            
            &:hover {
                border-color: var-get($theme, 'item-selected-hover-border-color');
                color: var-get($theme, 'item-selected-hover-text-color');
                background: var-get($theme, 'item-selected-hover-background');

                igx-icon {
                    color: var-get($theme, 'item-selected-hover-icon-color');
                }
            }
        }

        @if $variant != 'fluent' {
            &:focus,
            &:focus-visible {
                &:hover {
                    color: var-get($theme, 'item-selected-text-color');
                    background: var-get($theme, 'item-selected-hover-background');
                }

                &:active {
                    background: var-get($theme, 'item-selected-hover-background');
                }
            }
        }

        @if $variant == 'fluent' {
            &:hover,
            &:focus,
            &:focus-visible {
                background: var-get($theme, 'item-selected-background');
            }

            &:active {
                background: var-get($theme, 'item-selected-hover-background');
            }

            &:focus,
            &:focus-visible {
                &:hover {
                    background: var-get($theme, 'item-selected-background');
                }

                &:active {
                    background: var-get($theme, 'item-selected-hover-background');
                }
            }
        }

        &[igxButton][disabled='true'] {
            position: relative;

            &::before {
                position: absolute;
                content: '';
                top: 0;
                bottom: 0;
                inset-inline-end: 0;
                inset-inline-start: 0;
                background: color($color: 'gray', $variant: 500, $opacity: .12);
            }

            @if $variant == 'indigo-design' {
                color: var-get($theme, 'disabled-selected-text-color');
                background: var-get($theme, 'disabled-selected-background');
                border: none;

                igx-icon {
                    color: var-get($theme, 'disabled-selected-icon-color');
                }

                &::before {
                    display: none;
                }
            }
        }
    }

    %igx-group-vertical {
        flex-flow: column;
    }

    %igx-group-item-content {
        display: flex;
        align-items: center;
        flex-flow: row nowrap;
        min-width: 0;

        * ~ * {
            margin-inline-start: $group-items-margin;
        }
    }

    %igx-button-group__button-text {
        width: 100%;
        @include ellipsis();
    }
}

/// Adds typography styles for the igx-button-group component.
/// Uses the 'button' category from the typographic scale.
/// @group typography
/// @param {String} $categories [(text: 'button')] - The category from the typographic scale used for type styles.
@mixin button-group-typography($categories: (text: 'button')) {
    $text: map.get($categories, 'text');

    %igx-group-item {
        @include type-style($text) {
            text-align: center;
        }
    }
}
