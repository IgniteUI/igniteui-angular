@use '../../base' as *;
@use '../../themes/schemas' as *;
@use 'sass:map';

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
///
/// @param {Map} $palette [null] - The palette used as basis for styling the component.
/// @param {Map} $schema [$light-schema] - The schema used as basis for styling the component.
/// @param {Map} $elevations [null] - The elevations (shadows) map to be used.
///
/// @param {color} $bar-color [null] - The background color of the bar.
/// @param {color} $handle-color [null] - The color for the bar drag handle.
/// @param {color} $expander-color [null] - The color for the arrow expander's.
/// @param {number} $border-radius [null] - the border radios of the splitter bar drag handle
/// @param {color} $focus-color [null] - The color used for focused splitter bar.
/// @param {number} $size [null] - The size of the splitter, its width for vertical and height for horizontal splitter.
///
@function splitter-theme(
    $palette: null,
    $schema: $light-schema,
    $elevations: null,

    $bar-color: null,
    $handle-color: null,
    $expander-color: null,
    $border-radius: null,
    $focus-color: null,
    $size: null
) {
    $name: 'igx-splitter';
    $splitter-schema: ();

    @if map.has-key($schema, $name) {
        $splitter-schema: map.get($schema, $name);
    } @else {
        $splitter-schema: $schema;
    }

    $theme: apply-palette($splitter-schema, $palette);

    @if not($handle-color) and $bar-color {
        $handle-color: text-contrast($bar-color);
    }

    @if not($expander-color) and $bar-color {
        $expander-color: text-contrast($bar-color);
    }

    @return extend($theme, (
        name: $name,
        palette: $palette,
        bar-color: $bar-color,
        handle-color: $handle-color,
        expander-color: $expander-color,
        border-radius: $border-radius,
        focus-color: $focus-color,
        size: $size
    ));
}

/// @param {Map} $theme - The theme used to style the component.
/// @requires {mixin} css-vars
/// @requires rem
/// @requires var-get
@mixin splitter($theme) {
    @include css-vars($theme);
    $splitter-color: var-get($theme, 'bar-color');
    $hitbox-size: 4px;
    $debug-hitbox: false;
    $hitbox-debug-color: rgba(coral, .24);

    $variant: map.get($theme, 'variant');

    %igx-splitter-base {
        &[aria-orientation='horizontal'] {
            [dir='rtl'] & {
                flex-direction: row-reverse !important;
            }
        }
    }

    %handle-area {
        position: absolute;
        content: '';
        width: 100%;
        height: $hitbox-size;
        background: if($debug-hitbox, $hitbox-debug-color, transparent);
    }

    %handle-area--vertical {
        width: $hitbox-size;
        height: 100%;
    }

    %igx-splitter-bar {
        position: relative;
        display: flex;
        flex-grow: 1;
        justify-content: center;
        align-items: center;
        background: $splitter-color;
        border: 1px solid $splitter-color;
        z-index: 99;
        opacity: .68;
        transition: opacity .15s $ease-out-quad !important;

        &::before {
            @extend %handle-area;
            top: 100%;
        }

        &::after {
            @extend %handle-area;
            bottom: 100%;
        }

        &:hover {
            transition: all .25s ease-out;
            opacity: 1;
        }
    }

    %igx-splitter-bar--focus {
        // Remove the default browser outline styles
        outline: transparent solid 1px;
        box-shadow: inset 0 0 0 1px var-get($theme, 'focus-color');

        @if $variant == 'indigo-design' {
            background: var-get($theme, 'focus-color');
        }
    }

    %igx-splitter-bar--vertical {
        flex-direction: column;
        height: 100%;

        &::before {
            @extend %handle-area--vertical;
            top: 0;
            right: 100%;
        }

        &::after {
            @extend %handle-area--vertical;
            top: 0;
            left: 100%;
        }
    }

    %igx-splitter-handle {
        background: var-get($theme, 'handle-color');
        border-radius: border-radius(var-get($theme, 'border-radius'));
    }

    %igx-splitter-handle--horizontal {
        width: 25%;
        height: var-get($theme, 'size');
        margin: 0 rem(48px);
    }

    %igx-splitter-handle--vertical {
        width: var-get($theme, 'size');
        height: 25%;
        margin: rem(48px) 0;
    }

    %igx-splitter-hitbox {
        position: absolute;
        content: '';
        background: if($debug-hitbox, $hitbox-debug-color, transparent);
    }

    %igx-splitter-expander {
        position: relative;
        width: 0;
        height: 0;
        border-inline-end: var-get($theme, 'size') solid transparent;
        border-inline-start: var-get($theme, 'size') solid transparent;
        cursor: pointer;
        z-index: 1;
    }

    %igx-splitter-expander--start {
        border-bottom: var-get($theme, 'size') solid var-get($theme, 'expander-color');

        &::before {
            @extend %igx-splitter-hitbox;
            top: calc(100% - #{map.get($theme, 'size')});
            left: calc(100% - (#{map.get($theme, 'size')} * 2));
            width: calc(#{map.get($theme, 'size')} * 4);
            height: calc(#{map.get($theme, 'size')} * 3);
        }
    }

    %igx-splitter-expander--end {
        border-bottom: unset;
        border-top: var-get($theme, 'size') solid var-get($theme, 'expander-color');

        &::before {
            @extend %igx-splitter-hitbox;
            top: calc(100% - (#{map.get($theme, 'size')} * 2));
            left: calc(100% - (#{map.get($theme, 'size')} * 2));
            width: calc(#{map.get($theme, 'size')} * 4);
            height: calc(#{map.get($theme, 'size')} * 3);
        }
    }

    %igx-splitter-expander--start-vertical {
        border-top: var-get($theme, 'size') solid transparent;
        border-inline-end: var-get($theme, 'size') solid var-get($theme, 'expander-color');
        border-bottom: var-get($theme, 'size') solid transparent;
        border-inline-start: unset;

        &::before {
            @extend %igx-splitter-hitbox;
            top: calc(100% - (#{map.get($theme, 'size')} * 2));
            left: calc(100% - (#{map.get($theme, 'size')} * 2));
            width: calc(#{map.get($theme, 'size')} * 3);
            height: calc(#{map.get($theme, 'size')} * 4);
        }
    }

    %igx-splitter-expander--end-vertical {
        border-top: var-get($theme, 'size') solid transparent;
        border-inline-end: unset;
        border-bottom: var-get($theme, 'size') solid transparent;
        border-inline-start: var-get($theme, 'size') solid var-get($theme, 'expander-color');

        &::before {
            @extend %igx-splitter-hitbox;
            left: calc(100% - (#{map.get($theme, 'size')} * 2));
            top: calc(100% - (#{map.get($theme, 'size')} * 2));
            height: calc(#{map.get($theme, 'size')} * 4);
            width: calc(#{map.get($theme, 'size')} * 3);
        }
    }
}
