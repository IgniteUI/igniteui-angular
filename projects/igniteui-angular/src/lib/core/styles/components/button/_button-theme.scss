@use 'sass:map';
@use 'sass:meta';
@use 'sass:color';
@use 'sass:list';
@use 'sass:string';
@use '../../base' as *;
@use '../../themes/schemas' as *;

@forward './flat-button-theme';

@function contained-button-theme(
    $schema: $light-material-schema,

    $background: null,
    $foreground: null,

    $hover-background: null,
    $hover-foreground: null,

    $icon-color: $foreground,
    $icon-color-hover: $hover-foreground,

    $focus-background: null,
    $focus-foreground: null,

    $focus-hover-background: null,
    $focus-hover-foreground: null,

    $focus-visible-background: null,
    $focus-visible-foreground: null,

    $active-background: null,
    $active-foreground: null,

    $border-radius: null,
    $border-color: null,
    $hover-border-color: null,
    $focus-border-color: null,
    $focus-visible-border-color: null,
    $active-border-color: null,

    $shadow-color: null,

    $resting-shadow: null,
    $hover-shadow: null,
    $focus-shadow: null,
    $active-shadow: null,

    $disabled-background: null,
    $disabled-foreground: null,
    $disabled-icon-color: $disabled-foreground,
    $disabled-border-color: null,
    $size: null
) {
    $name: 'igx-contained-button';
    $button-schema: ();

    @if map.has-key($schema, 'button') {
        $button-schema: map.get($schema, 'button');
        @if map.has-key($button-schema, 'contained') {
            $button-schema: map.get($button-schema, 'contained');
        } @else {
            $button-schema: $schema;
        }
    }

    $theme: digest-schema($button-schema);
    $variant: map.get($schema, '_meta', 'theme');

    @if not($foreground) and $background {
        $foreground: adaptive-contrast(var(--background));
    }

    @if not($icon-color) and $background {
        $icon-color: adaptive-contrast(var(--background));
    }

    @if $variant == 'indigo' {
        @if not($hover-background) and $background {
            $hover-background: hsl(from var(--background) h s calc(l * 1.08));
        }
    } @else {
        @if not($hover-background) and $background {
            $hover-background: hsl(from var(--background) h s calc(l * 1.05));
        }
    }

    @if $variant == 'indigo' {
        @if not($focus-background) and $background {
            $focus-background: var(--background);
        }
    } @else {
        @if not($focus-background) and $background {
            $focus-background: hsl(from var(--background) h s calc(l * 1.1));
        }
    }

    @if not($hover-foreground) and $hover-background {
        $hover-foreground: if(
            $foreground,
            var(--foreground),
            adaptive-contrast(var(--hover-background))
        );
    }

    @if not($icon-color-hover) and $hover-background {
        $icon-color-hover: if(
            $icon-color,
            var(--icon-color),
            adaptive-contrast(var(--hover-background))
        );
    }

    @if not($focus-foreground) and $focus-background {
        $focus-foreground: if(
            $foreground,
            var(--foreground),
            adaptive-contrast(var(--focus-background))
        );
    }

    @if not($focus-hover-background) and $hover-background {
        $focus-hover-background: var(--hover-background);
    }

    @if not($focus-hover-foreground) and $focus-hover-background {
        $focus-hover-foreground: if(
            $foreground,
            var(--foreground),
            adaptive-contrast(var(--focus-hover-background))
        );
    }

    @if not($focus-visible-background) and $focus-background {
        $focus-visible-background: var(--focus-background);
    }

    @if not($focus-visible-foreground) and $focus-visible-background {
        $focus-visible-foreground: adaptive-contrast(
            var(--focus-visible-background)
        );
    }

    @if $variant == 'fluent' {
        @if not($focus-visible-border-color) and $focus-visible-foreground {
            $focus-visible-border-color: var(--focus-visible-foreground);
        }
    }

    @if $variant == 'fluent' or $variant == 'bootstrap' {
        @if not($active-background) and $background {
            $active-background: hsl(from var(--background) h s calc(l * 0.9));
        }
    } @else if $variant == 'material' {
        @if not($active-background) and $focus-background {
            $active-background: var(--focus-background);
        }
    } @else {
        @if not($active-background) and $hover-background {
            $active-background: var(--hover-background);
        }
    }

    @if not($active-foreground) and $active-background {
        $active-foreground: adaptive-contrast(var(--active-background));
    }

    @if $variant == 'bootstrap' or $variant == 'indigo' {
        @if not($shadow-color) and $focus-visible-background {
            $shadow-color: hsla(
                from var(--focus-visible-background) h s l / 0.5
            );
        }
    }

    @if not($resting-shadow) {
        $resting-elevation: map.get($button-schema, 'resting-elevation');
        $resting-shadow: elevation($resting-elevation);
    }

    @if not($hover-shadow) {
        $hover-elevation: map.get($button-schema, 'hover-elevation');
        $hover-shadow: elevation($hover-elevation);
    }

    @if not($focus-shadow) {
        $focus-elevation: map.get($button-schema, 'focus-elevation');
        $focus-shadow: elevation($focus-elevation);
    }

    @if not($active-shadow) {
        $active-elevation: map.get($button-schema, 'active-elevation');
        $active-shadow: elevation($active-elevation);
    }

    @return extend(
        $theme,
        (
            name: $name,
            background: $background,
            foreground: $foreground,
            icon-color: $icon-color,
            icon-color-hover: $icon-color-hover,
            hover-background: $hover-background,
            hover-foreground: $hover-foreground,
            focus-background: $focus-background,
            focus-foreground: $focus-foreground,
            focus-hover-background: $focus-hover-background,
            focus-hover-foreground: $focus-hover-foreground,
            focus-visible-background: $focus-visible-background,
            focus-visible-foreground: $focus-visible-foreground,
            active-background: $active-background,
            active-foreground: $active-foreground,
            border-radius: $border-radius,
            border-color: $border-color,
            hover-border-color: $hover-border-color,
            focus-border-color: $focus-border-color,
            focus-visible-border-color: $focus-visible-border-color,
            active-border-color: $active-border-color,
            shadow-color: $shadow-color,
            resting-shadow: $resting-shadow,
            hover-shadow: $hover-shadow,
            focus-shadow: $focus-shadow,
            active-shadow: $active-shadow,
            disabled-background: $disabled-background,
            disabled-foreground: $disabled-foreground,
            disabled-icon-color: $disabled-icon-color,
            disabled-border-color: $disabled-border-color,
            size: $size,
        )
    );
}

@function outlined-button-theme(
    $schema: $light-material-schema,

    $background: null,
    $foreground: null,

    $hover-background: null,
    $hover-foreground: null,

    $icon-color: $foreground,
    $icon-color-hover: $hover-foreground,

    $focus-background: null,
    $focus-foreground: null,

    $focus-hover-background: null,
    $focus-hover-foreground: null,

    $focus-visible-background: null,
    $focus-visible-foreground: null,

    $active-background: null,
    $active-foreground: null,

    $border-radius: null,
    $border-color: null,
    $hover-border-color: null,
    $focus-border-color: null,
    $focus-visible-border-color: null,
    $active-border-color: null,

    $shadow-color: null,

    $resting-shadow: null,
    $hover-shadow: null,
    $focus-shadow: null,
    $active-shadow: null,

    $disabled-background: null,
    $disabled-foreground: null,
    $disabled-icon-color: $disabled-foreground,
    $disabled-border-color: null,
    $size: null
) {
    $name: 'igx-outlined-button';
    $button-schema: ();

    @if map.has-key($schema, 'button') {
        $button-schema: map.get($schema, 'button');
        @if map.has-key($button-schema, 'outlined') {
            $button-schema: map.get($button-schema, 'outlined');
        } @else {
            $button-schema: $schema;
        }
    }

    $theme: digest-schema($button-schema);
    $variant: map.get($schema, '_meta', 'theme');

    @if $variant == 'material' or $variant == 'fluent' {
        @if not($hover-background) and $foreground {
            $hover-background: hsla(from var(--foreground) h s l / 0.08);
        }

        @if not($focus-background) and $foreground {
            $focus-background: hsla(from var(--foreground) h s l / 0.32);
        }

        @if not($focus-hover-background) and $foreground {
            $focus-hover-background: hsla(from var(--foreground) h s l / 0.24);
        }

        @if not($active-background) and $foreground {
            $active-background: hsla(from var(--foreground) h s l / 0.16);
        }

        @if not($hover-foreground) and $hover-background {
            $hover-foreground: hsla(from var(--hover-background) h s l / 1);
        }

        @if not($focus-foreground) and $focus-background {
            $focus-foreground: hsla(from var(--focus-background) h s l / 1);
        }

        @if not($focus-hover-foreground) and $focus-hover-background {
            $focus-hover-foreground: hsla(
                from var(--focus-hover-background) h s l / 1
            );
        }

        @if not($active-foreground) and $active-background {
            $active-foreground: hsla(from var(--active-background) h s l / 1);
        }

        @if $variant == 'material' {
            @if not($focus-visible-background) and $foreground {
                $focus-visible-background: hsla(
                    from var(--foreground) h s l / 0.16
                );
            }

            @if not($focus-visible-foreground) and $focus-visible-background {
                $focus-visible-foreground: hsla(
                    from var(--focus-visible-background) h s l / 1
                );
            }
        } @else {
            @if not($focus-visible-foreground) and $focus-foreground {
                $focus-visible-foreground: var(--focus-foreground);
            }
        }

        @if $variant == 'fluent' {
            @if not($focus-visible-border-color) and $focus-visible-foreground {
                $focus-visible-border-color: var(--focus-visible-foreground);
            }
        }
    }

    @if $variant == 'indigo' {
        @if not($hover-background) and $foreground {
            $hover-background: hsla(from var(--foreground) h s l / 0.08);
        }

        @if not($focus-background) and $foreground {
            $focus-background: hsla(from var(--foreground) h s l / 0.08);
        }

        @if not($focus-hover-background) and $foreground {
            $focus-hover-background: hsla(from var(--foreground) h s l / 0.08);
        }

        @if not($active-background) and $foreground {
            $active-background: hsla(from var(--foreground) h s l / 0.08);
        }

        @if not($hover-foreground) and $foreground {
            $hover-foreground: hsl(from var(--foreground) h s calc(l * 0.9));
        }

        @if not($focus-foreground) and $foreground {
            $focus-foreground: hsl(from var(--foreground) h s calc(l * 0.9));
        }

        @if not($focus-hover-foreground) and $foreground {
            $focus-hover-foreground: hsl(
                from var(--foreground) h s calc(l * 0.9)
            );
        }

        @if not($focus-visible-foreground) and $foreground {
            $focus-visible-foreground: var(--foreground);
        }

        @if not($active-foreground) and $foreground {
            $active-foreground: hsl(from var(--foreground) h s calc(l * 0.9));
        }

        @if not($shadow-color) and $focus-visible-foreground {
            $shadow-color: hsla(
                from var(--focus-visible-foreground) h s l / 0.2
            );
        }
    }

    @if $variant == 'bootstrap' {
        @if not($hover-background) and $foreground {
            $hover-background: var(--foreground);
        }

        @if not($hover-foreground) and $hover-background {
            $hover-foreground: adaptive-contrast(var(--hover-background));
        }

        @if not($focus-background) and $foreground {
            $focus-background: hsl(from var(--foreground) h s calc(l * 0.8));
        }

        @if not($focus-foreground) and $focus-background {
            $focus-foreground: adaptive-contrast(var(--focus-background));
        }

        @if not($focus-hover-background) and $hover-background {
            $focus-hover-background: hsl(
                from var(--hover-background) h s calc(l * 0.9)
            );
        }

        @if not($focus-hover-foreground) and $focus-hover-background {
            $focus-hover-foreground: adaptive-contrast(
                var(--focus-hover-background)
            );
        }

        @if not($focus-visible-background) and $hover-background {
            $focus-visible-background: var(--hover-background);
        }

        @if not($focus-visible-foreground) and $focus-visible-background {
            $focus-visible-foreground: adaptive-contrast(
                var(--focus-visible-background)
            );
        }

        @if not($active-background) and $foreground {
            $active-background: hsl(from var(--foreground) h s calc(l * 0.8));
        }

        @if not($active-foreground) and $active-background {
            $active-foreground: adaptive-contrast(var(--active-background));
        }

        @if not($disabled-foreground) and $foreground {
            $disabled-foreground: hsl(from (var(--foreground) h s l / 0.5));
        }

        @if not($disabled-icon-color) and $disabled-foreground {
            $disabled-icon-color: var(--disabled-foreground);
        }

        @if not($disabled-border-color) and $disabled-foreground {
            $disabled-border-color: var(--disabled-foreground);
        }

        @if not($hover-border-color) and $hover-background {
            $hover-border-color: var(--hover-background);
        }

        @if not($focus-border-color) and $focus-background {
            $focus-border-color: var(--focus-background);
        }

        @if not($focus-visible-border-color) and $focus-visible-background {
            $focus-visible-border-color: var(--focus-visible-background);
        }

        @if not($active-border-color) and $active-background {
            $active-border-color: var(--active-background);
        }

        @if not($shadow-color) and $focus-visible-background {
            $shadow-color: hsla(
                from var(--focus-visible-background) h s l / 0.5
            );
        }
    }

    @if not($icon-color-hover) and $hover-foreground {
        $icon-color-hover: var(--hover-foreground);
    }

    @if variant != 'bootstrap' {
        @if not($border-color) and $foreground {
            $border-color: var(--foreground);
        }

        @if not($hover-border-color) and $hover-foreground {
            $hover-border-color: var(--hover-foreground);
        }

        @if not($focus-border-color) and $focus-foreground {
            $focus-border-color: var(--focus-foreground);
        }

        @if not($focus-visible-border-color) and $focus-visible-foreground {
            $focus-visible-border-color: var(--focus-visible-foreground);
        }

        @if not($active-border-color) and $active-foreground {
            $active-border-color: var(--active-foreground);
        }
    }

    @if not($resting-shadow) {
        $resting-elevation: map.get($button-schema, 'resting-elevation');
        $resting-shadow: elevation($resting-elevation);
    }

    @if not($hover-shadow) {
        $hover-elevation: map.get($button-schema, 'hover-elevation');
        $hover-shadow: elevation($hover-elevation);
    }

    @if not($focus-shadow) {
        $focus-elevation: map.get($button-schema, 'focus-elevation');
        $focus-shadow: elevation($focus-elevation);
    }

    @if not($active-shadow) {
        $active-elevation: map.get($button-schema, 'active-elevation');
        $active-shadow: elevation($active-elevation);
    }

    @return extend(
        $theme,
        (
            name: $name,
            background: $background,
            foreground: $foreground,
            icon-color: $icon-color,
            icon-color-hover: $icon-color-hover,
            hover-background: $hover-background,
            hover-foreground: $hover-foreground,
            focus-background: $focus-background,
            focus-foreground: $focus-foreground,
            focus-hover-background: $focus-hover-background,
            focus-hover-foreground: $focus-hover-foreground,
            focus-visible-background: $focus-visible-background,
            focus-visible-foreground: $focus-visible-foreground,
            active-background: $active-background,
            active-foreground: $active-foreground,
            border-radius: $border-radius,
            border-color: $border-color,
            hover-border-color: $hover-border-color,
            focus-border-color: $focus-border-color,
            focus-visible-border-color: $focus-visible-border-color,
            active-border-color: $active-border-color,
            shadow-color: $shadow-color,
            resting-shadow: $resting-shadow,
            hover-shadow: $hover-shadow,
            focus-shadow: $focus-shadow,
            active-shadow: $active-shadow,
            disabled-background: $disabled-background,
            disabled-foreground: $disabled-foreground,
            disabled-icon-color: $disabled-icon-color,
            disabled-border-color: $disabled-border-color,
            size: $size,
        )
    );
}

@function fab-button-theme(
    $schema: $light-material-schema,

    $background: null,
    $foreground: null,

    $hover-background: null,
    $hover-foreground: null,

    $icon-color: $foreground,
    $icon-color-hover: $hover-foreground,

    $focus-background: null,
    $focus-foreground: null,

    $focus-hover-background: null,
    $focus-hover-foreground: null,

    $focus-visible-background: null,
    $focus-visible-foreground: null,

    $active-background: null,
    $active-foreground: null,

    $border-radius: null,
    $border-color: null,
    $hover-border-color: null,
    $focus-border-color: null,
    $focus-visible-border-color: null,
    $active-border-color: null,

    $shadow-color: null,

    $resting-shadow: null,
    $hover-shadow: null,
    $focus-shadow: null,
    $active-shadow: null,

    $disabled-background: null,
    $disabled-foreground: null,
    $disabled-icon-color: $disabled-foreground,
    $disabled-border-color: null,
    $size: null
) {
    $name: 'igx-fab-button';
    $button-schema: ();

    @if map.has-key($schema, 'button') {
        $button-schema: map.get($schema, 'button');
        @if map.has-key($button-schema, 'fab') {
            $button-schema: map.get($button-schema, 'fab');
        } @else {
            $button-schema: $schema;
        }
    }

    $theme: digest-schema($button-schema);
    $variant: map.get($schema, '_meta', 'theme');

    @if not($foreground) and $background {
        $foreground: adaptive-contrast(var(--background));
    }

    @if not($icon-color) and $background {
        $icon-color: adaptive-contrast(var(--background));
    }

    @if $variant == 'indigo' {
        @if not($hover-background) and $background {
            $hover-background: hsl(from var(--background) h s calc(l * 1.08));
        }
    } @else {
        @if not($hover-background) and $background {
            $hover-background: hsl(from var(--background) h s calc(l * 1.05));
        }
    }

    @if $variant == 'indigo' {
        @if not($focus-background) and $background {
            $focus-background: var(--background);
        }
    } @else {
        @if not($focus-background) and $background {
            $focus-background: hsl(from var(--background) h s calc(l * 1.1));
        }
    }

    @if not($hover-foreground) and $hover-background {
        $hover-foreground: if(
            $foreground,
            var(--foreground),
            adaptive-contrast(var(--hover-background))
        );
    }

    @if not($icon-color-hover) and $hover-background {
        $icon-color-hover: if(
            $icon-color,
            var(--icon-color),
            adaptive-contrast(var(--hover-background))
        );
    }

    @if not($focus-foreground) and $focus-background {
        $focus-foreground: if(
            $foreground,
            var(--foreground),
            adaptive-contrast(var(--focus-background))
        );
    }

    @if not($focus-hover-background) and $hover-background {
        $focus-hover-background: var(--hover-background);
    }

    @if not($focus-hover-foreground) and $focus-hover-background {
        $focus-hover-foreground: if(
            $foreground,
            var(--foreground),
            adaptive-contrast(var(--focus-hover-background))
        );
    }

    @if not($focus-visible-background) and $focus-background {
        $focus-visible-background: var(--focus-background);
    }

    @if not($focus-visible-foreground) and $focus-visible-background {
        $focus-visible-foreground: adaptive-contrast(
            var(--focus-visible-background)
        );
    }

    @if $variant == 'fluent' {
        @if not($focus-visible-border-color) and $focus-visible-foreground {
            $focus-visible-border-color: var(--focus-visible-foreground);
        }
    }

    @if $variant == 'fluent' or $variant == 'bootstrap' {
        @if not($active-background) and $background {
            $active-background: hsl(from var(--background) h s calc(l * 0.9));
        }
    } @else if $variant == 'material' {
        @if not($active-background) and $focus-background {
            $active-background: var(--focus-background);
        }
    } @else {
        @if not($active-background) and $hover-background {
            $active-background: var(--hover-background);
        }
    }

    @if not($active-foreground) and $active-background {
        $active-foreground: adaptive-contrast(var(--active-background));
    }

    @if $variant == 'bootstrap' or $variant == 'indigo' {
        @if not($shadow-color) and $focus-visible-background {
            $shadow-color: hsla(
                from var(--focus-visible-background) h s l / 0.5
            );
        }
    }

    @if not($resting-shadow) {
        $resting-elevation: map.get($button-schema, 'resting-elevation');
        $resting-shadow: elevation($resting-elevation);
    }

    @if not($hover-shadow) {
        $hover-elevation: map.get($button-schema, 'hover-elevation');
        $hover-shadow: elevation($hover-elevation);
    }

    @if not($focus-shadow) {
        $focus-elevation: map.get($button-schema, 'focus-elevation');
        $focus-shadow: elevation($focus-elevation);
    }

    @if not($active-shadow) {
        $active-elevation: map.get($button-schema, 'active-elevation');
        $active-shadow: elevation($active-elevation);
    }

    @return extend(
        $theme,
        (
            name: $name,
            background: $background,
            foreground: $foreground,
            icon-color: $icon-color,
            icon-color-hover: $icon-color-hover,
            hover-background: $hover-background,
            hover-foreground: $hover-foreground,
            focus-background: $focus-background,
            focus-foreground: $focus-foreground,
            focus-hover-background: $focus-hover-background,
            focus-hover-foreground: $focus-hover-foreground,
            focus-visible-background: $focus-visible-background,
            focus-visible-foreground: $focus-visible-foreground,
            active-background: $active-background,
            active-foreground: $active-foreground,
            border-radius: $border-radius,
            border-color: $border-color,
            hover-border-color: $hover-border-color,
            focus-border-color: $focus-border-color,
            focus-visible-border-color: $focus-visible-border-color,
            active-border-color: $active-border-color,
            shadow-color: $shadow-color,
            resting-shadow: $resting-shadow,
            hover-shadow: $hover-shadow,
            focus-shadow: $focus-shadow,
            active-shadow: $active-shadow,
            disabled-background: $disabled-background,
            disabled-foreground: $disabled-foreground,
            disabled-icon-color: $disabled-icon-color,
            disabled-border-color: $disabled-border-color,
            size: $size,
        )
    );
}

/// @deprecated Use the `css-vars` mixin instead.
/// @see {mixin} css-vars
/// @param {Map} $flat [null] - The flat theme used to style the component.
/// @param {Map} $contained [null] - The contained theme used to style the component.
/// @param {Map} $outlined [null] - The outlined theme used to style the component.
/// @param {Map} $fab [null] - The fab theme used to style the component.
@mixin button($themes...) {
    $button-width: rem(88px);
    $flat-theme: null;
    $contained-theme: null;
    $outlined-theme: null;
    $fab-theme: null;
    $variant: 'material';

    $required-themes: ('flat', 'contained', 'outlined', 'fab');
    $added: ();
    $missing: ();

    @each $key, $theme in meta.keywords($themes) {
        $type: map.get($theme, _meta, type);

        $added: list.append($added, $key);

        @if $type == 'flat' {
            $flat-theme: $theme;
        } @else if $type == 'contained' {
            $contained-theme: $theme;
        } @else if $type == 'outlined' {
            $outlined-theme: $theme;
        } @else if $type == 'fab' {
            $fab-theme: $theme;
        }

        $variant: map.get($theme, '_meta', 'theme');
        @include css-vars($theme);
    }

    @each $item in $required-themes {
        @if not(list.index($added, $item)) {
            $missing: list.append($missing, '$#{$item}', $separator: comma);
        }
    }

    @if list.length($missing) != 0 {
        @error meta.inspect(string.unquote("Missing theme properties:") #{$missing});
    }

    $time: map.get(
        (
            'material': 0.1s,
            'fluent': 0.1s,
            'bootstrap': 0.15s,
            'indigo': 0.15s,
        ),
        $variant
    );

    $button-transition: color $time ease-in-out,
        background-color $time ease-in-out,
        border-color $time ease-in-out,
        box-shadow $time ease-in-out;

    $button-disabled-shadow: none;

    $button-floating-width: rem(56px);
    $button-floating-height: $button-floating-width;

    $button-padding-inline: (
        comfortable: rem(16px, 16px),
        cosy: rem(12px, 16px),
        compact: rem(8px, 16px),
    );

    $button-padding-indigo-inline: (
        comfortable: rem(24px, 16px),
        cosy: rem(16px, 16px),
        compact: rem(10px, 16px),
    );

    $button-padding-material-block: (
        comfortable: rem(7px, 16px),
        cosy: rem(4px, 16px),
        compact: rem(1px, 16px),
    );

    $button-padding-fluent-block: (
        comfortable: 0,
        cosy: 0,
        compact: 0,
    );

    $button-padding-bootstrap-block: (
        comfortable: rem(6px, 16px),
        cosy: rem(4px, 16px),
        compact: rem(2px, 16px),
    );

    $button-padding-indigo-block: (
        comfortable: 0,
        cosy: 0,
        compact: 0,
    );

    $button-padding-inline: map.get(
        (
            'material': $button-padding-inline,
            'fluent': $button-padding-inline,
            'bootstrap': $button-padding-inline,
            'indigo': $button-padding-indigo-inline,
        ),
        $variant
    );

    $button-padding-block: map.get(
        (
            'material': $button-padding-material-block,
            'fluent': $button-padding-fluent-block,
            'bootstrap': $button-padding-bootstrap-block,
            'indigo': $button-padding-indigo-block,
        ),
        $variant
    );

    $outlined-button-padding-inline: map.get(
        (
            'material': $button-padding-inline,
            'fluent': $button-padding-inline,
            'bootstrap': $button-padding-inline,
            'indigo': $button-padding-indigo-inline,
        ),
        $variant
    );

    $outlined-button-padding-block: map.get(
        (
            'material': $button-padding-material-block,
            'fluent': $button-padding-fluent-block,
            'bootstrap': $button-padding-bootstrap-block,
            'indigo': $button-padding-indigo-block,
        ),
        $variant
    );

    $button-floating-padding-block: (
        comfortable: rem(8px),
        cosy: rem(4px),
        compact: 0,
    );

    $button-floating-padding-inline: (
        comfortable: rem(14px),
        cosy: rem(10px),
        compact: rem(6px),
    );

    $button-floating-padding-indigo-inline: (
        comfortable: rem(10px),
        cosy: rem(8px),
        compact: rem(6px),
    );

    $items-gap: (
        comfortable: rem(12px),
        cosy: rem(8px),
        compact: rem(4px),
    );

    $items-gap-indigo-comfortable: rem(8px);

    $filtering-row-button-size: (
        comfortable: rem(40px),
        cosy: rem(30px),
        compact: rem(21px),
    );

    $icon-sizes: map.get(
        (
            'material': rem(18px),
            'fluent': rem(18px),
            'bootstrap': rem(18px),
            'indigo': rem(16px),
        ),
        $variant
    );

    $icon-in-button-size: $icon-sizes;

    $contained-shadow: map.get(
        (
            'material': var-get($contained-theme, 'resting-shadow'),
            'fluent': none,
            'bootstrap': none,
            'indigo': none,
        ),
        $variant
    );

    $contained-shadow--hover: map.get(
        (
            'material': var-get($contained-theme, 'hover-shadow'),
            'fluent': none,
            'bootstrap': none,
            'indigo': none,
        ),
        $variant
    );

    $contained-shadow--focus: map.get(
        (
            'material': var-get($contained-theme, 'focus-shadow'),
            'fluent': 0 0 0 rem(3px) var-get($contained-theme, 'shadow-color'),
            'bootstrap': 0 0 0 rem(4px)
                var-get($contained-theme, 'shadow-color'),
            'indigo': 0 0 0 rem(3px) var-get($contained-theme, 'shadow-color'),
        ),
        $variant
    );

    $contained-shadow--active: map.get(
        (
            'material': var-get($contained-theme, 'active-shadow'),
            'fluent': 0 0 0 rem(3px) var-get($contained-theme, 'shadow-color'),
            'bootstrap': 0 0 0 rem(4px)
                var-get($contained-theme, 'shadow-color'),
            'indigo': 0 0 0 rem(3px) var-get($contained-theme, 'shadow-color'),
        ),
        $variant
    );

    $fab-shadow: map.get(
        (
            'material': var-get($fab-theme, 'resting-shadow'),
            'fluent': none,
            'bootstrap': none,
            'indigo': none,
        ),
        $variant
    );

    $fab-shadow--hover: map.get(
        (
            'material': var-get($fab-theme, 'hover-shadow'),
            'fluent': none,
            'bootstrap': none,
            'indigo': none,
        ),
        $variant
    );

    $fab-shadow--focus: map.get(
        (
            'material': var-get($fab-theme, 'focus-shadow'),
            'fluent': 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
            'bootstrap': 0 0 0 rem(4px) var-get($fab-theme, 'shadow-color'),
            'indigo': 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
        ),
        $variant
    );

    $fab-shadow--active: map.get(
        (
            'material': var-get($fab-theme, 'active-shadow'),
            'fluent': 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
            'bootstrap': 0 0 0 rem(4px) var-get($fab-theme, 'shadow-color'),
            'indigo': 0 0 0 rem(3px) var-get($fab-theme, 'shadow-color'),
        ),
        $variant
    );

    %fluent-border {
        &::after {
            $btn-indent: rem(2px);
            content: '';
            position: absolute;
            top: $btn-indent;
            inset-inline-start: $btn-indent;
            pointer-events: none;
            width: calc(100% - (#{$btn-indent} * 2));
            height: calc(100% - (#{$btn-indent} * 2));
        }
    }

    %igx-button-display {
        @include sizable();

        position: relative;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        min-width: $button-width;
        padding-inline: pad-inline(
            map.get($button-padding-inline, 'compact'),
            map.get($button-padding-inline, 'cosy'),
            map.get($button-padding-inline, 'comfortable')
        );
        padding-block: pad-block(
            map.get($button-padding-block, 'compact'),
            map.get($button-padding-block, 'cosy'),
            map.get($button-padding-block, 'comfortable')
        );
        min-height: var-get($flat-theme, 'size');
        border: rem(1px) solid var-get($flat-theme, 'border-color');
        cursor: pointer;
        user-select: none;
        outline-style: none;
        -webkit-tap-highlight-color: transparent;
        overflow: hidden;
        white-space: nowrap;
        transition: $button-transition;
        gap: pad-inline(
            map.get($items-gap, 'compact'),
            map.get($items-gap, 'cosy'),
            map.get($items-gap, 'comfortable')
        );

        @if $variant == 'indigo' {
            min-width: rem(28px);
        }

        igx-icon {
            --component-size: var(--ig-size, var(--ig-size-large));
            display: flex;
            justify-content: center;
            width: var(--igx-icon-size, #{$icon-in-button-size});
            height: var(--igx-icon-size, #{$icon-in-button-size});
            font-size: var(--igx-icon-size, #{$icon-in-button-size});
            transition: $button-transition;
        }
    }

    igx-grid-filtering-row {
        @if $variant == 'bootstrap' {
            --filtering-row-button-size: #{sizable(
                    #{map.get($filtering-row-button-size, 'compact')},
                    #{map.get($filtering-row-button-size, 'cosy')},
                    #{map.get($filtering-row-button-size, 'comfortable')}
                )};

            %igx-button-display {
                min-height: var(--filtering-row-button-size);
                padding-block: 0;

                > * {
                    display: flex;
                    align-items: center;
                    height: rem(18px);
                }
            }
        }
    }

    %igx-button--flat {
        --component-size: var(
            --ig-size,
            #{var-get($flat-theme, 'default-size')}
        );
        background: var-get($flat-theme, 'background');
        color: var-get($flat-theme, 'foreground');
        border-radius: var-get($flat-theme, 'border-radius');

        igx-icon {
            color: var-get($flat-theme, 'icon-color');
        }

        &:hover {
            background: var-get($flat-theme, 'hover-background');
            color: var-get($flat-theme, 'hover-foreground');
            border-color: var-get($flat-theme, 'hover-border-color');

            igx-icon {
                color: var-get($flat-theme, 'icon-color-hover');
            }
        }

        &:active {
            background: var-get($flat-theme, 'active-background');
            color: var-get($flat-theme, 'active-foreground');
            border-color: var-get($flat-theme, 'active-border-color');

            igx-icon {
                color: var-get($flat-theme, 'active-foreground');
            }

            @if $variant == 'indigo' {
                igx-icon {
                    color: var-get($flat-theme, 'icon-color-hover');
                }
            }
        }

        @if $variant == 'indigo' {
            border-width: rem(2px);
            gap: pad-inline(
                map.get($items-gap, 'compact'),
                map.get($items-gap, 'cosy'),
                $items-gap-indigo-comfortable
            );
        }
    }

    %igx-button--flat-focused {
        background: var-get($flat-theme, 'focus-visible-background');
        color: var-get($flat-theme, 'focus-visible-foreground');
        border-color: var-get($flat-theme, 'focus-visible-border-color');

        igx-icon {
            color: var-get($flat-theme, 'icon-color');
        }

        &:hover {
            background: var-get($flat-theme, 'focus-hover-background');
            color: var-get($flat-theme, 'focus-hover-foreground');

            igx-icon {
                color: var-get($flat-theme, 'icon-color-hover');
            }
        }

        &:active {
            background: var-get($flat-theme, 'focus-background');
            color: var-get($flat-theme, 'focus-foreground');

            igx-icon {
                color: var-get($flat-theme, 'focus-foreground');
            }
        }

        @if $variant == 'bootstrap' {
            box-shadow: 0 0 0 rem(4px) var-get($flat-theme, 'shadow-color');
        }

        @if $variant == 'fluent' {
            border-color: var-get($flat-theme, 'active-border-color');

            &::after {
                @extend %fluent-border;

                box-shadow: 0
                    0
                    0
                    rem(1px)
                    var-get($flat-theme, 'focus-visible-border-color');
            }
        }

        @if $variant == 'indigo' {
            box-shadow: 0 0 0 rem(3px) var-get($flat-theme, 'shadow-color');

            &:active {
                igx-icon {
                    color: var-get($flat-theme, 'icon-color-hover');
                }
            }
        }
    }

    %igx-button--outlined {
        --component-size: var(
            --ig-size,
            #{var-get($outlined-theme, 'default-size')}
        );
        background: var-get($outlined-theme, 'background');
        color: var-get($outlined-theme, 'foreground');
        border-color: var-get($outlined-theme, 'border-color');
        border-radius: var-get($outlined-theme, 'border-radius');
        padding-block: pad-block(
            map.get($outlined-button-padding-block, 'compact'),
            map.get($outlined-button-padding-block, 'cosy'),
            map.get($outlined-button-padding-block, 'comfortable')
        );
        padding-inline: pad-inline(
            map.get($outlined-button-padding-inline, 'compact'),
            map.get($outlined-button-padding-inline, 'cosy'),
            map.get($outlined-button-padding-inline, 'comfortable')
        );

        @if $variant == 'indigo' {
            gap: pad-inline(
                map.get($items-gap, 'compact'),
                map.get($items-gap, 'cosy'),
                $items-gap-indigo-comfortable
            );

            border: rem(2px) solid var-get($outlined-theme, 'border-color');
        }

        igx-icon {
            color: var-get($outlined-theme, 'icon-color');
        }

        &:hover {
            background: var-get($outlined-theme, 'hover-background');
            color: var-get($outlined-theme, 'hover-foreground');
            border-color: var-get($outlined-theme, 'hover-border-color');

            igx-icon {
                color: var-get($outlined-theme, 'icon-color-hover');
            }
        }

        &:active {
            background: var-get($outlined-theme, 'active-background');
            color: var-get($outlined-theme, 'active-foreground');
            border-color: var-get($outlined-theme, 'active-border-color');

            igx-icon {
                color: var-get($outlined-theme, 'active-foreground');
            }

            @if $variant == 'indigo' {
                igx-icon {
                    color: var-get($outlined-theme, 'icon-color-hover');
                }
            }
        }

        @if $variant == 'fluent' {
            border: rem(1px) solid var-get($flat-theme, 'border-color');
        }
    }

    %igx-button--outlined-focused {
        background: var-get($outlined-theme, 'focus-visible-background');
        color: var-get($outlined-theme, 'focus-visible-foreground');
        border-color: var-get($outlined-theme, 'focus-visible-border-color');

        igx-icon {
            color: var-get($outlined-theme, 'focus-visible-foreground');
        }

        @if $variant == 'bootstrap' {
            box-shadow: 0 0 0 rem(4px) var-get($outlined-theme, 'shadow-color');
        } @else if $variant == 'indigo' {
            box-shadow: 0 0 0 rem(3px) var-get($outlined-theme, 'shadow-color');

            igx-icon {
                color: var-get($outlined-theme, 'icon-color');
            }
        }

        &:hover {
            background: var-get($outlined-theme, 'focus-hover-background');
            color: var-get($outlined-theme, 'focus-hover-foreground');
            border-color: var-get($outlined-theme, 'hover-border-color');

            igx-icon {
                color: var-get($outlined-theme, 'icon-color-hover');
            }
        }

        &:active {
            background: var-get($outlined-theme, 'focus-background');
            color: var-get($outlined-theme, 'focus-foreground');
            border-color: var-get($outlined-theme, 'active-border-color');

            @if $variant == 'indigo' {
                igx-icon {
                    color: var-get($outlined-theme, 'icon-color-hover');
                }
            }
        }

        @if $variant == 'fluent' {
            border-color: var-get($outlined-theme, 'focus-border-color');

            &::after {
                @extend %fluent-border;

                box-shadow: 0
                    0
                    0
                    rem(1px)
                    var-get($outlined-theme, 'focus-visible-border-color');
            }
        }
    }

    %igx-button--contained {
        --component-size: var(
            --ig-size,
            #{var-get($contained-theme, 'default-size')}
        );
        color: var-get($contained-theme, 'foreground');
        background: var-get($contained-theme, 'background');
        border-color: var-get($contained-theme, 'border-color');
        border-radius: var-get($contained-theme, 'border-radius');
        box-shadow: var-get($contained-theme, 'resting-shadow');

        igx-icon {
            color: var-get($contained-theme, 'icon-color');
        }

        &:hover {
            color: var-get($contained-theme, 'hover-foreground');
            background: var-get($contained-theme, 'hover-background');
            border-color: var-get($contained-theme, 'hover-border-color');
            box-shadow: var-get($contained-theme, 'hover-shadow');

            igx-icon {
                color: var-get($contained-theme, 'icon-color-hover');
            }
        }

        &:active {
            color: var-get($contained-theme, 'active-foreground');
            background: var-get($contained-theme, 'active-background');
            border-color: var-get($contained-theme, 'active-border-color');
            box-shadow: var-get($contained-theme, 'hover-shadow');

            igx-icon {
                color: var-get($contained-theme, 'active-foreground');
            }
        }

        @if $variant == 'indigo' {
            border-width: rem(2px);
            gap: pad-inline(
                map.get($items-gap, 'compact'),
                map.get($items-gap, 'cosy'),
                $items-gap-indigo-comfortable
            );

            &:active {
                igx-icon {
                    color: var-get($outlined-theme, 'icon-color-hover');
                }
            }
        }
    }

    %igx-button--contained-focused {
        background: var-get($contained-theme, 'focus-visible-background');
        color: var-get($contained-theme, 'focus-visible-foreground');
        border-color: var-get($contained-theme, 'focus-visible-border-color');

        igx-icon {
            color: var-get($contained-theme, 'icon-color');
        }

        @if $variant == 'material' {
            box-shadow: var-get($contained-theme, 'focus-shadow');
        } @else {
            box-shadow: $contained-shadow--active;
        }

        @if $variant == 'fluent' {
            border-color: var-get($contained-theme, 'active-border-color');

            &::after {
                @extend %fluent-border;

                box-shadow: 0
                    0
                    0
                    rem(1px)
                    var-get($contained-theme, 'focus-visible-border-color');
            }
        }

        &:hover {
            color: var-get($contained-theme, 'focus-hover-foreground');
            background: var-get($contained-theme, 'focus-hover-background');
            border-color: var-get($contained-theme, 'hover-border-color');

            igx-icon {
                color: var-get($contained-theme, 'icon-color-hover');
            }

            @if $variant == 'material' {
                box-shadow: var-get($contained-theme, 'focus-shadow');
            }
        }

        &:active {
            color: var-get($contained-theme, 'focus-foreground');
            background: var-get($contained-theme, 'focus-background');

            @if $variant == 'indigo' {
                igx-icon {
                    color: var-get($outlined-theme, 'icon-color-hover');
                }
            }
        }
    }

    %igx-button--round {
        display: inline-flex;
        position: relative;
        flex-direction: row;
        justify-content: center;
        align-items: center;
        outline: none;
        cursor: pointer;
        transition: $button-transition;
        user-select: none;
        -webkit-tap-highlight-color: transparent;
        overflow: hidden;
        // hack to allow circular overflow in safari...
        filter: blur(0);
    }

    %igx-button--fab {
        --component-size: var(
            --ig-size,
            #{var-get($fab-theme, 'default-size')}
        );
        padding-block: pad-block(
            map.get($button-floating-padding-block, 'compact'),
            map.get($button-floating-padding-block, 'cosy'),
            map.get($button-floating-padding-block, 'comfortable')
        );
        padding-inline: pad-inline(
            map.get($button-floating-padding-inline, 'compact'),
            map.get($button-floating-padding-inline, 'cosy'),
            map.get($button-floating-padding-inline, 'comfortable')
        );

        @if $variant == 'indigo' {
            padding-inline: pad-inline(
                map.get($button-floating-padding-indigo-inline, 'compact'),
                map.get($button-floating-padding-indigo-inline, 'cosy'),
                map.get($button-floating-padding-indigo-inline, 'comfortable')
            );
        }

        min-width: var-get($fab-theme, 'size');
        min-height: var-get($fab-theme, 'size');
        line-height: unset;
        white-space: nowrap;
        color: var-get($fab-theme, 'foreground');
        background: var-get($fab-theme, 'background');
        border-color: var-get($fab-theme, 'border-color');
        border-radius: var-get($fab-theme, 'border-radius');
        box-shadow: var-get($fab-theme, 'resting-shadow');

        igx-icon {
            color: var-get($fab-theme, 'icon-color');
        }

        &:hover {
            color: var-get($fab-theme, 'hover-foreground');
            background: var-get($fab-theme, 'hover-background');
            border-color: var-get($fab-theme, 'hover-border-color');
            box-shadow: var-get($fab-theme, 'hover-shadow');

            igx-icon {
                color: var-get($fab-theme, 'icon-color-hover');
            }
        }

        &:active {
            color: var-get($fab-theme, 'active-foreground');
            background: var-get($fab-theme, 'active-background');
            border-color: var-get($fab-theme, 'active-border-color');
            box-shadow: var-get($fab-theme, 'focus-shadow');

            igx-icon {
                color: var-get($fab-theme, 'active-foreground');
            }

            @if $variant == 'indigo' {
                igx-icon {
                    color: var-get($outlined-theme, 'icon-color-hover');
                }
            }
        }
    }

    %igx-button--fab-focused {
        background: var-get($fab-theme, 'focus-visible-background');
        color: var-get($fab-theme, 'focus-visible-foreground');
        border-color: var-get($fab-theme, 'focus-visible-border-color');

        igx-icon {
            color: var-get($fab-theme, 'icon-color');
        }

        @if $variant == 'material' {
            box-shadow: var-get($fab-theme, 'focus-shadow');
        } @else {
            box-shadow: $contained-shadow--focus;
        }

        @if $variant == 'fluent' {
            border-color: var-get($contained-theme, 'active-border-color');

            &::after {
                @extend %fluent-border;
                $btn-indent: rem(2px);
                border-radius: calc(
                    #{var-get($fab-theme, 'border-radius')} - #{$btn-indent}
                );
                box-shadow: 0
                    0
                    0
                    rem(1px)
                    var-get($fab-theme, 'focus-visible-border-color');
            }
        }

        &:hover {
            color: var-get($fab-theme, 'focus-hover-foreground');
            background: var-get($fab-theme, 'focus-hover-background');
            border-color: var-get($fab-theme, 'hover-border-color');

            igx-icon {
                color: var-get($fab-theme, 'icon-color-hover');
            }
        }

        &:active {
            background: var-get($fab-theme, 'focus-background');
            color: var-get($fab-theme, 'focus-foreground');

            @if $variant == 'indigo' {
                igx-icon {
                    color: var-get($outlined-theme, 'icon-color-hover');
                }
            }
        }
    }

    %igx-button--disabled {
        background: var-get($flat-theme, 'disabled-background');
        color: var-get($flat-theme, 'disabled-foreground');
        border-color: var-get($flat-theme, 'disabled-border-color');
        pointer-events: none;
        box-shadow: none;

        igx-icon {
            color: var-get($flat-theme, 'disabled-icon-color');
        }

        &:focus {
            box-shadow: none;
        }
    }
}

/// Adds typography styles for the igx-button component.
/// Uses the 'button' category from the typographic scale.
/// @group typography
/// @param {String} $categories [(text: 'button')] - The category from the typographic scale used for type styles.
@mixin button-typography(
    $categories: (
        text: 'button',
    )
) {
    $text: map.get($categories, 'text');

    %igx-button-display {
        @include type-style($text) {
            text-align: center;
        }
    }

    %igx-button--fab {
        @include type-style($text) {
            text-align: center;
            margin: 0;
        }
    }
}
